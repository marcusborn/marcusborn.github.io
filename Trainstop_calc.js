//NOTE all arrays should follow this syntax
// let initial_vel = isNumeric(input_values['initial_vel']);
// let final_vel = isNumeric(input_values['final_vel']);
// let time = isNumeric(input_values['time']);
// let distance = isNumeric(input_values['distance']);
// let accel = isNumeric(input_values['accel']);
// let grad = isNumeric(input_values['grad']);
let Nclass_accel_data =  [ [0, 0, 1.429, 0, 0, 0, 0],
[1, 0.278, 1.429, 0.027, 0.027, 0.194, 0.194],
[2, 0.556, 1.429, 0.081, 0.108, 0.194, 0.389],
[3, 0.833, 1.429, 0.135, 0.243, 0.194, 0.583],
[4, 1.111, 1.429, 0.189, 0.432, 0.194, 0.778],
[5, 1.389, 1.428, 0.243, 0.675, 0.194, 0.972],
[6, 1.667, 1.404, 0.3, 0.975, 0.196, 1.168],
[7, 1.944, 1.404, 0.357, 1.332, 0.198, 1.366],
[8, 2.222, 1.404, 0.412, 1.744, 0.198, 1.564],
[9, 2.5, 1.404, 0.467, 2.211, 0.198, 1.761],
[10, 2.778, 1.404, 0.522, 2.733, 0.198, 1.959],
[11, 3.056, 1.271, 0.606, 3.338, 0.208, 2.167],
[12, 3.333, 1.271, 0.698, 4.037, 0.219, 2.385],
[13, 3.611, 1.271, 0.759, 4.795, 0.219, 2.604],
[14, 3.889, 1.271, 0.82, 5.615, 0.219, 2.823],
[15, 4.167, 1.271, 0.88, 6.495, 0.219, 3.041],
[16, 4.444, 0.95, 1.077, 7.573, 0.25, 3.291],
[17, 4.722, 0.95, 1.34, 8.913, 0.292, 3.584],
[18, 5, 0.95, 1.422, 10.335, 0.292, 3.876],
[19, 5.278, 0.95, 1.503, 11.838, 0.292, 4.169],
[20, 5.556, 0.95, 1.584, 13.422, 0.292, 4.461],
[21, 5.833, 0.754, 1.857, 15.279, 0.326, 4.787],
[22, 6.111, 0.754, 2.202, 17.48, 0.369, 5.156],
[23, 6.389, 0.754, 2.304, 19.784, 0.369, 5.525],
[24, 6.667, 0.754, 2.406, 22.191, 0.369, 5.893],
[25, 6.944, 0.754, 2.509, 24.699, 0.369, 6.262],
[26, 7.222, 0.62, 2.866, 27.565, 0.405, 6.666],
[27, 7.5, 0.62, 3.3, 30.865, 0.448, 7.115],
[28, 7.778, 0.62, 3.424, 34.289, 0.448, 7.563],
[29, 8.056, 0.62, 3.549, 37.838, 0.448, 8.011],
[30, 8.333, 0.62, 3.673, 41.511, 0.448, 8.459],
[31, 8.611, 0.525, 4.113, 45.623, 0.485, 8.945],
[32, 8.889, 0.525, 4.632, 50.255, 0.529, 9.474],
[33, 9.167, 0.525, 4.779, 55.034, 0.529, 10.004],
[34, 9.444, 0.525, 4.926, 59.96, 0.529, 10.533],
[35, 9.722, 0.525, 5.073, 65.032, 0.529, 11.062],
[36, 10, 0.445, 5.647, 70.68, 0.573, 11.635],
[37, 10.278, 0.445, 6.324, 77.004, 0.624, 12.259],
[38, 10.556, 0.445, 6.497, 83.501, 0.624, 12.882],
[39, 10.833, 0.445, 6.67, 90.171, 0.624, 13.506],
[40, 11.111, 0.445, 6.844, 97.015, 0.624, 14.13],
[41, 11.389, 0.389, 7.489, 104.504, 0.666, 14.795],
[42, 11.667, 0.389, 8.226, 112.73, 0.714, 15.509],
[43, 11.944, 0.389, 8.425, 121.155, 0.714, 16.223],
[44, 12.222, 0.389, 8.623, 129.777, 0.714, 16.936],
[45, 12.5, 0.389, 8.821, 138.599, 0.714, 17.65],
[46, 12.778, 0.341, 9.617, 148.216, 0.761, 18.411],
[47, 13.056, 0.341, 10.526, 158.742, 0.815, 19.226],
[48, 13.333, 0.341, 10.753, 169.495, 0.815, 20.041],
[49, 13.611, 0.341, 10.979, 180.474, 0.815, 20.856],
[50, 13.889, 0.341, 11.206, 191.68, 0.815, 21.671],
[51, 14.167, 0.3, 12.158, 203.838, 0.867, 22.537],
[52, 14.444, 0.3, 13.24, 217.077, 0.925, 23.463],
[53, 14.722, 0.3, 13.497, 230.574, 0.925, 24.388],
[54, 15, 0.3, 13.754, 244.328, 0.925, 25.314],
[55, 15.278, 0.3, 14.011, 258.338, 0.925, 26.239],
[56, 15.556, 0.267, 15.098, 273.437, 0.979, 27.219],
[57, 15.833, 0.267, 16.32, 289.757, 1.04, 28.258],
[58, 16.111, 0.267, 16.609, 306.365, 1.04, 29.298],
[59, 16.389, 0.267, 16.898, 323.263, 1.04, 30.338],
[60, 16.667, 0.267, 17.187, 340.45, 1.04, 31.378],
[61, 16.944, 0.25, 18.067, 358.517, 1.075, 32.453],
[62, 17.222, 0.25, 19.01, 377.527, 1.113, 33.566],
[63, 17.5, 0.25, 19.319, 396.846, 1.113, 34.679],
[64, 17.778, 0.25, 19.628, 416.475, 1.113, 35.791],
[65, 18.056, 0.25, 19.937, 436.412, 1.113, 36.904],
[66, 18.333, 0.224, 21.334, 457.746, 1.173, 38.077],
[67, 18.611, 0.224, 22.888, 480.634, 1.239, 39.316],
[68, 18.889, 0.224, 23.232, 503.866, 1.239, 40.555],
[69, 19.167, 0.224, 23.576, 527.442, 1.239, 41.794],
[70, 19.444, 0.224, 23.921, 551.363, 1.239, 43.033],
[71, 19.722, 0.206, 25.265, 576.627, 1.29, 44.323],
[72, 20, 0.206, 26.724, 603.351, 1.346, 45.669],
[73, 20.278, 0.206, 27.098, 630.449, 1.346, 47.014],
[74, 20.556, 0.206, 27.472, 657.921, 1.346, 48.36],
[75, 20.833, 0.206, 27.845, 685.766, 1.346, 49.705],
[76, 21.111, 0.189, 29.495, 715.261, 1.406, 51.112],
[77, 21.389, 0.189, 31.301, 746.562, 1.473, 52.585],
[78, 21.667, 0.189, 31.71, 778.272, 1.473, 54.058],
[79, 21.944, 0.189, 32.119, 810.392, 1.473, 55.531],
[80, 22.222, 0.189, 32.529, 842.92, 1.473, 57.004],
[81, 22.5, 0.171, 34.587, 877.507, 1.547, 58.55],
[82, 22.778, 0.171, 36.861, 914.368, 1.628, 60.179],
[83, 23.056, 0.171, 37.314, 951.682, 1.628, 61.807],
[84, 23.333, 0.171, 37.766, 989.448, 1.628, 63.435],
[85, 23.611, 0.171, 38.218, 1027.667, 1.628, 65.063],
[86, 23.889, 0.153, 40.837, 1068.503, 1.719, 66.783],
[87, 24.167, 0.153, 43.766, 1112.269, 1.821, 68.604],
[88, 24.444, 0.153, 44.272, 1156.541, 1.821, 70.426],
[89, 24.722, 0.153, 44.778, 1201.319, 1.821, 72.247],
[90, 25, 0.153, 45.284, 1246.603, 1.821, 74.069],
[91, 25.278, 0.142, 47.407, 1294.01, 1.886, 75.954],
[92, 25.556, 0.142, 49.686, 1343.696, 1.955, 77.909],
[93, 25.833, 0.142, 50.229, 1393.924, 1.955, 79.864],
[94, 26.111, 0.142, 50.772, 1444.696, 1.955, 81.819],
[95, 26.389, 0.142, 51.315, 1496.011, 1.955, 83.774],
[96, 26.667, 0.132, 53.852, 1549.862, 2.03, 85.804],
[97, 26.944, 0.132, 56.591, 1606.454, 2.111, 87.915],
[98, 27.222, 0.132, 57.178, 1663.632, 2.111, 90.026],
[99, 27.5, 0.132, 57.764, 1721.396, 2.111, 92.137],
[100, 27.778, 0.132, 58.351, 1779.747, 2.111, 94.249],
[101, 28.056, 0.113, 63.382, 1843.129, 2.27, 96.519],
[102, 28.333, 0.113, 69.234, 1912.363, 2.456, 98.975],
[103, 28.611, 0.113, 69.916, 1982.279, 2.456, 101.43],
[104, 28.889, 0.113, 70.598, 2052.877, 2.456, 103.886],
[105, 29.167, 0.113, 71.28, 2124.157, 2.456, 106.341],
[106, 29.444, 0.102, 75.556, 2199.713, 2.578, 108.92],
[107, 29.722, 0.102, 80.28, 2279.993, 2.714, 111.633],
[108, 30, 0.102, 81.034, 2361.027, 2.714, 114.347],
[109, 30.278, 0.102, 81.788, 2442.815, 2.714, 117.061],
[110, 30.556, 0.102, 82.542, 2525.357, 2.714, 119.774],
[111, 30.833, 0.095, 86.232, 2611.589, 2.809, 122.584],
[112, 31.111, 0.095, 90.192, 2701.781, 2.912, 125.496],
[113, 31.389, 0.095, 91.001, 2792.783, 2.912, 128.408],
[114, 31.667, 0.095, 91.81, 2884.593, 2.912, 131.32],
[115, 31.944, 0.095, 92.619, 2977.211, 2.912, 134.232],
[116, 32.222, 0.084, 99.142, 3076.354, 3.09, 137.322],
[117, 32.5, 0.084, 106.516, 3182.869, 3.291, 140.613],
[118, 32.778, 0.084, 107.43, 3290.299, 3.291, 143.905],
[119, 33.056, 0.084, 108.344, 3398.643, 3.291, 147.196],
[120, 33.333, 0.084, 109.258, 3507.902, 3.291, 150.488]
];

let Xtrap_accel_data = [  [0, 0, 1.22, 0, 0, 0, 0],
[1, 0.278, 1.22, 0.032, 0.032, 0.228, 0.228],
[2, 0.556, 1.22, 0.095, 0.126, 0.228, 0.455],
[3, 0.833, 1.22, 0.158, 0.285, 0.228, 0.683],
[4, 1.111, 1.22, 0.221, 0.506, 0.228, 0.911],
[5, 1.389, 1.22, 0.285, 0.791, 0.228, 1.138],
[6, 1.667, 1.22, 0.348, 1.138, 0.228, 1.366],
[7, 1.944, 1.22, 0.411, 1.55, 0.228, 1.594],
[8, 2.222, 1.22, 0.474, 2.024, 0.228, 1.821],
[9, 2.5, 1.22, 0.538, 2.561, 0.228, 2.049],
[10, 2.778, 1.21, 0.603, 3.165, 0.229, 2.278],
[11, 3.056, 1.21, 0.67, 3.834, 0.23, 2.507],
[12, 3.333, 1.21, 0.733, 4.568, 0.23, 2.737],
[13, 3.611, 1.21, 0.797, 5.365, 0.23, 2.967],
[14, 3.889, 1.21, 0.861, 6.226, 0.23, 3.196],
[15, 4.167, 1.21, 0.925, 7.15, 0.23, 3.426],
[16, 4.444, 1.21, 0.988, 8.139, 0.23, 3.655],
[17, 4.722, 1.21, 1.052, 9.191, 0.23, 3.885],
[18, 5, 1.21, 1.116, 10.307, 0.23, 4.114],
[19, 5.278, 1.21, 1.18, 11.487, 0.23, 4.344],
[20, 5.556, 1.21, 1.243, 12.73, 0.23, 4.573],
[21, 5.833, 1.21, 1.307, 14.037, 0.23, 4.803],
[22, 6.111, 1.21, 1.371, 15.408, 0.23, 5.033],
[23, 6.389, 1.21, 1.435, 16.843, 0.23, 5.262],
[24, 6.667, 1.21, 1.499, 18.342, 0.23, 5.492],
[25, 6.944, 1.21, 1.562, 19.904, 0.23, 5.721],
[26, 7.222, 1.21, 1.626, 21.53, 0.23, 5.951],
[27, 7.5, 1.21, 1.69, 23.22, 0.23, 6.18],
[28, 7.778, 1.21, 1.754, 24.974, 0.23, 6.41],
[29, 8.056, 1.21, 1.817, 26.791, 0.23, 6.64],
[30, 8.333, 1.21, 1.881, 28.672, 0.23, 6.869],
[31, 8.611, 1.21, 1.945, 30.617, 0.23, 7.099],
[32, 8.889, 1.21, 2.009, 32.626, 0.23, 7.328],
[33, 9.167, 1.21, 2.072, 34.699, 0.23, 7.558],
[34, 9.444, 1.21, 2.136, 36.835, 0.23, 7.787],
[35, 9.722, 1.21, 2.2, 39.035, 0.23, 8.017],
[36, 10, 1.21, 2.264, 41.299, 0.23, 8.247],
[37, 10.278, 1.21, 2.328, 43.626, 0.23, 8.476],
[38, 10.556, 1.21, 2.391, 46.018, 0.23, 8.706],
[39, 10.833, 1.21, 2.455, 48.473, 0.23, 8.935],
[40, 11.111, 0.96, 2.809, 51.282, 0.256, 9.191],
[41, 11.389, 0.96, 3.255, 54.537, 0.289, 9.481],
[42, 11.667, 0.96, 3.336, 57.873, 0.289, 9.77],
[43, 11.944, 0.96, 3.416, 61.288, 0.289, 10.059],
[44, 12.222, 0.96, 3.496, 64.785, 0.289, 10.349],
[45, 12.5, 0.96, 3.577, 68.362, 0.289, 10.638],
[46, 12.778, 0.96, 3.657, 72.019, 0.289, 10.927],
[47, 13.056, 0.96, 3.737, 75.756, 0.289, 11.217],
[48, 13.333, 0.96, 3.818, 79.574, 0.289, 11.506],
[49, 13.611, 0.96, 3.898, 83.472, 0.289, 11.795],
[50, 13.889, 0.96, 3.979, 87.451, 0.289, 12.085],
[51, 14.167, 0.96, 4.059, 91.51, 0.289, 12.374],
[52, 14.444, 0.96, 4.139, 95.649, 0.289, 12.664],
[53, 14.722, 0.96, 4.22, 99.869, 0.289, 12.953],
[54, 15, 0.96, 4.3, 104.169, 0.289, 13.242],
[55, 15.278, 0.96, 4.38, 108.549, 0.289, 13.532],
[56, 15.556, 0.96, 4.461, 113.01, 0.289, 13.821],
[57, 15.833, 0.96, 4.541, 117.551, 0.289, 14.11],
[58, 16.111, 0.96, 4.622, 122.173, 0.289, 14.4],
[59, 16.389, 0.96, 4.702, 126.875, 0.289, 14.689],
[60, 16.667, 0.732, 5.427, 132.302, 0.328, 15.017],
[61, 16.944, 0.732, 6.377, 138.679, 0.379, 15.397],
[62, 17.222, 0.732, 6.483, 145.162, 0.379, 15.776],
[63, 17.5, 0.732, 6.588, 151.75, 0.379, 16.156],
[64, 17.778, 0.732, 6.694, 158.443, 0.379, 16.535],
[65, 18.056, 0.732, 6.799, 165.242, 0.379, 16.915],
[66, 18.333, 0.732, 6.904, 172.147, 0.379, 17.294],
[67, 18.611, 0.732, 7.01, 179.157, 0.379, 17.674],
[68, 18.889, 0.732, 7.115, 186.272, 0.379, 18.053],
[69, 19.167, 0.732, 7.221, 193.492, 0.379, 18.433],
[70, 19.444, 0.732, 7.326, 200.819, 0.379, 18.812],
[71, 19.722, 0.59, 8.23, 209.048, 0.42, 19.232],
[72, 20, 0.59, 9.351, 218.399, 0.471, 19.703],
[73, 20.278, 0.59, 9.482, 227.881, 0.471, 20.174],
[74, 20.556, 0.59, 9.612, 237.493, 0.471, 20.645],
[75, 20.833, 0.59, 9.743, 247.236, 0.471, 21.116],
[76, 21.111, 0.59, 9.874, 257.11, 0.471, 21.586],
[77, 21.389, 0.59, 10.005, 267.115, 0.471, 22.057],
[78, 21.667, 0.59, 10.135, 277.25, 0.471, 22.528],
[79, 21.944, 0.59, 10.266, 287.516, 0.471, 22.999],
[80, 22.222, 0.59, 10.397, 297.914, 0.471, 23.47],
[81, 22.5, 0.5, 11.397, 309.311, 0.51, 23.979],
[82, 22.778, 0.5, 12.577, 321.888, 0.556, 24.535],
[83, 23.056, 0.5, 12.731, 334.619, 0.556, 25.09],
[84, 23.333, 0.5, 12.886, 347.505, 0.556, 25.646],
[85, 23.611, 0.5, 13.04, 360.545, 0.556, 26.202],
[86, 23.889, 0.5, 13.194, 373.74, 0.556, 26.757],
[87, 24.167, 0.5, 13.349, 387.088, 0.556, 27.313],
[88, 24.444, 0.5, 13.503, 400.591, 0.556, 27.868],
[89, 24.722, 0.5, 13.657, 414.249, 0.556, 28.424],
[90, 25, 0.5, 13.812, 428.061, 0.556, 28.979],
[91, 25.278, 0.32, 17.032, 445.092, 0.678, 29.657],
[92, 25.556, 0.32, 22.063, 467.155, 0.868, 30.525],
[93, 25.833, 0.32, 22.304, 489.46, 0.868, 31.393],
[94, 26.111, 0.32, 22.545, 512.005, 0.868, 32.261],
[95, 26.389, 0.32, 22.786, 534.791, 0.868, 33.129],
[96, 26.667, 0.32, 23.028, 557.819, 0.868, 33.997],
[97, 26.944, 0.32, 23.269, 581.088, 0.868, 34.865],
[98, 27.222, 0.32, 23.51, 604.598, 0.868, 35.733],
[99, 27.5, 0.32, 23.751, 628.349, 0.868, 36.601],
[100, 27.778, 0.267, 26.158, 654.507, 0.946, 37.548],
[101, 28.056, 0.267, 29.044, 683.55, 1.04, 38.588],
[102, 28.333, 0.267, 29.333, 712.883, 1.04, 39.628],
[103, 28.611, 0.267, 29.622, 742.505, 1.04, 40.669],
[104, 28.889, 0.267, 29.911, 772.415, 1.04, 41.709],
[105, 29.167, 0.267, 30.2, 802.615, 1.04, 42.75],
[106, 29.444, 0.267, 30.489, 833.103, 1.04, 43.79],
[107, 29.722, 0.267, 30.778, 863.881, 1.04, 44.83],
[108, 30, 0.267, 31.066, 894.947, 1.04, 45.871],
[109, 30.278, 0.267, 31.355, 926.303, 1.04, 46.911],
[110, 30.556, 0.175, 38.231, 964.534, 1.257, 48.168],
[111, 30.833, 0.175, 48.721, 1013.255, 1.587, 49.755],
[112, 31.111, 0.175, 49.162, 1062.417, 1.587, 51.343],
[113, 31.389, 0.175, 49.603, 1112.02, 1.587, 52.93],
[114, 31.667, 0.175, 50.044, 1162.065, 1.587, 54.517],
[115, 31.944, 0.175, 50.485, 1212.55, 1.587, 56.104],
[116, 32.222, 0.12, 60.421, 1272.97, 1.883, 57.988],
[117, 32.5, 0.12, 74.91, 1347.88, 2.315, 60.302],
[118, 32.778, 0.12, 75.553, 1423.433, 2.315, 62.617],
[119, 33.056, 0.12, 76.196, 1499.629, 2.315, 64.932],
[120, 33.333, 0.12, 76.839, 1576.468, 2.315, 67.247],
[121, 33.611, 0.096, 86.291, 1662.759, 2.578, 69.825],
[122, 33.889, 0.096, 98.168, 1760.926, 2.909, 72.734],
[123, 34.167, 0.096, 98.976, 1859.902, 2.909, 75.642],
[124, 34.444, 0.096, 99.783, 1959.685, 2.909, 78.551],
[125, 34.722, 0.096, 100.591, 2060.277, 2.909, 81.46],
[126, 35, 0.096, 101.399, 2161.676, 2.909, 84.368],
[127, 35.278, 0.096, 102.207, 2263.884, 2.909, 87.277],
[128, 35.556, 0.096, 103.015, 2366.899, 2.909, 90.186],
[129, 35.833, 0.096, 103.823, 2470.722, 2.909, 93.094],
[130, 36.111, 0.096, 104.631, 2575.353, 2.909, 96.003]
];

let Sprinter_accel_data = [  [0, 0, 0.926, 0, 0, 0, 0],
[1, 0.278, 0.926, 0.042, 0.042, 0.3, 0.3],
[2, 0.556, 0.926, 0.125, 0.167, 0.3, 0.6],
[3, 0.833, 0.926, 0.208, 0.375, 0.3, 0.9],
[4, 1.111, 0.926, 0.292, 0.667, 0.3, 1.2],
[5, 1.389, 0.926, 0.375, 1.042, 0.3, 1.5],
[6, 1.667, 0.926, 0.458, 1.5, 0.3, 1.8],
[7, 1.944, 0.926, 0.542, 2.042, 0.3, 2.1],
[8, 2.222, 0.926, 0.625, 2.666, 0.3, 2.4],
[9, 2.5, 0.926, 0.708, 3.375, 0.3, 2.7],
[10, 2.778, 0.926, 0.792, 4.166, 0.3, 3],
[11, 3.056, 0.68, 1.009, 5.175, 0.346, 3.346],
[12, 3.333, 0.68, 1.305, 6.48, 0.408, 3.754],
[13, 3.611, 0.68, 1.418, 7.899, 0.408, 4.163],
[14, 3.889, 0.68, 1.532, 9.43, 0.408, 4.571],
[15, 4.167, 0.68, 1.645, 11.076, 0.408, 4.98],
[16, 4.444, 0.68, 1.759, 12.835, 0.408, 5.388],
[17, 4.722, 0.68, 1.872, 14.707, 0.408, 5.797],
[18, 5, 0.68, 1.986, 16.693, 0.408, 6.205],
[19, 5.278, 0.68, 2.099, 18.792, 0.408, 6.614],
[20, 5.556, 0.68, 2.213, 21.005, 0.408, 7.022],
[21, 5.833, 0.55, 2.572, 23.577, 0.452, 7.474],
[22, 6.111, 0.55, 3.016, 26.593, 0.505, 7.979],
[23, 6.389, 0.55, 3.157, 29.749, 0.505, 8.484],
[24, 6.667, 0.55, 3.297, 33.046, 0.505, 8.989],
[25, 6.944, 0.55, 3.437, 36.483, 0.505, 9.494],
[26, 7.222, 0.55, 3.577, 40.061, 0.505, 9.999],
[27, 7.5, 0.55, 3.718, 43.779, 0.505, 10.504],
[28, 7.778, 0.55, 3.858, 47.637, 0.505, 11.009],
[29, 8.056, 0.55, 3.998, 51.635, 0.505, 11.514],
[30, 8.333, 0.55, 4.139, 55.774, 0.505, 12.019],
[31, 8.611, 0.46, 4.66, 60.434, 0.55, 12.569],
[32, 8.889, 0.46, 5.284, 65.718, 0.604, 13.173],
[33, 9.167, 0.46, 5.452, 71.169, 0.604, 13.777],
[34, 9.444, 0.46, 5.619, 76.788, 0.604, 14.381],
[35, 9.722, 0.46, 5.787, 82.575, 0.604, 14.985],
[36, 10, 0.46, 5.955, 88.53, 0.604, 15.589],
[37, 10.278, 0.46, 6.123, 94.653, 0.604, 16.193],
[38, 10.556, 0.46, 6.29, 100.943, 0.604, 16.796],
[39, 10.833, 0.46, 6.458, 107.401, 0.604, 17.4],
[40, 11.111, 0.46, 6.626, 114.027, 0.604, 18.004],
[41, 11.389, 0.34, 7.813, 121.839, 0.694, 18.699],
[42, 11.667, 0.34, 9.418, 131.257, 0.817, 19.516],
[43, 11.944, 0.34, 9.645, 140.902, 0.817, 20.333],
[44, 12.222, 0.34, 9.872, 150.774, 0.817, 21.15],
[45, 12.5, 0.34, 10.099, 160.873, 0.817, 21.967],
[46, 12.778, 0.34, 10.326, 171.199, 0.817, 22.784],
[47, 13.056, 0.34, 10.553, 181.752, 0.817, 23.601],
[48, 13.333, 0.34, 10.78, 192.532, 0.817, 24.418],
[49, 13.611, 0.34, 11.007, 203.539, 0.817, 25.235],
[50, 13.889, 0.34, 11.234, 214.772, 0.817, 26.052],
[51, 14.167, 0.347, 11.344, 226.116, 0.809, 26.86],
[52, 14.444, 0.347, 11.452, 237.568, 0.801, 27.661],
[53, 14.722, 0.347, 11.674, 249.242, 0.801, 28.461],
[54, 15, 0.347, 11.897, 261.138, 0.801, 29.262],
[55, 15.278, 0.347, 12.119, 273.257, 0.801, 30.062],
[56, 15.556, 0.347, 12.341, 285.599, 0.801, 30.863],
[57, 15.833, 0.347, 12.564, 298.162, 0.801, 31.663],
[58, 16.111, 0.347, 12.786, 310.948, 0.801, 32.464],
[59, 16.389, 0.347, 13.008, 323.956, 0.801, 33.264],
[60, 16.667, 0.347, 13.231, 337.187, 0.801, 34.065],
[61, 16.944, 0.277, 14.962, 352.149, 0.89, 34.955],
[62, 17.222, 0.277, 17.131, 369.281, 1.003, 35.958],
[63, 17.5, 0.277, 17.41, 386.69, 1.003, 36.961],
[64, 17.778, 0.277, 17.688, 404.379, 1.003, 37.964],
[65, 18.056, 0.277, 17.967, 422.346, 1.003, 38.966],
[66, 18.333, 0.277, 18.246, 440.591, 1.003, 39.969],
[67, 18.611, 0.277, 18.524, 459.116, 1.003, 40.972],
[68, 18.889, 0.277, 18.803, 477.918, 1.003, 41.975],
[69, 19.167, 0.277, 19.081, 496.999, 1.003, 42.978],
[70, 19.444, 0.277, 19.36, 516.359, 1.003, 43.98],
[71, 19.722, 0.228, 21.544, 537.903, 1.1, 45.08],
[72, 20, 0.228, 24.197, 562.1, 1.218, 46.299],
[73, 20.278, 0.228, 24.536, 586.636, 1.218, 47.517],
[74, 20.556, 0.228, 24.874, 611.51, 1.218, 48.735],
[75, 20.833, 0.228, 25.213, 636.723, 1.218, 49.954],
[76, 21.111, 0.228, 25.551, 662.273, 1.218, 51.172],
[77, 21.389, 0.228, 25.889, 688.163, 1.218, 52.39],
[78, 21.667, 0.228, 26.228, 714.391, 1.218, 53.609],
[79, 21.944, 0.228, 26.566, 740.957, 1.218, 54.827],
[80, 22.222, 0.228, 26.905, 767.862, 1.218, 56.045],
[81, 22.5, 0.213, 28.17, 796.031, 1.26, 57.305],
[82, 22.778, 0.213, 29.524, 825.555, 1.304, 58.609],
[83, 23.056, 0.213, 29.886, 855.441, 1.304, 59.913],
[84, 23.333, 0.213, 30.248, 885.69, 1.304, 61.218],
[85, 23.611, 0.213, 30.611, 916.3, 1.304, 62.522],
[86, 23.889, 0.213, 30.973, 947.273, 1.304, 63.826],
[87, 24.167, 0.213, 31.335, 978.608, 1.304, 65.13],
[88, 24.444, 0.213, 31.697, 1010.306, 1.304, 66.434],
[89, 24.722, 0.213, 32.06, 1042.365, 1.304, 67.738],
[90, 25, 0.213, 32.422, 1074.787, 1.304, 69.042],
[91, 25.278, 0.136, 40.017, 1114.804, 1.592, 70.634],
[92, 25.556, 0.136, 51.913, 1166.718, 2.042, 72.677],
[93, 25.833, 0.136, 52.48, 1219.198, 2.042, 74.719],
[94, 26.111, 0.136, 53.048, 1272.246, 2.042, 76.762],
[95, 26.389, 0.136, 53.615, 1325.861, 2.042, 78.804],
[96, 26.667, 0.136, 54.183, 1380.044, 2.042, 80.847],
[97, 26.944, 0.136, 54.75, 1434.794, 2.042, 82.889],
[98, 27.222, 0.136, 55.317, 1490.111, 2.042, 84.931],
[99, 27.5, 0.136, 55.885, 1545.995, 2.042, 86.974],
[100, 27.778, 0.136, 56.452, 1602.447, 2.042, 89.016],
[101, 28.056, 0.132, 57.87, 1660.318, 2.073, 91.089],
[102, 28.333, 0.132, 59.332, 1719.65, 2.104, 93.194],
[103, 28.611, 0.132, 59.916, 1779.566, 2.104, 95.298],
[104, 28.889, 0.132, 60.501, 1840.067, 2.104, 97.403],
[105, 29.167, 0.132, 61.085, 1901.152, 2.104, 99.507],
[106, 29.444, 0.132, 61.67, 1962.822, 2.104, 101.611],
[107, 29.722, 0.132, 62.254, 2025.076, 2.104, 103.716],
[108, 30, 0.132, 62.839, 2087.916, 2.104, 105.82],
[109, 30.278, 0.132, 63.424, 2151.339, 2.104, 107.924],
[110, 30.556, 0.132, 64.008, 2215.347, 2.104, 110.029],
[111, 30.833, 0.094, 75.453, 2290.801, 2.458, 112.487],
[112, 31.111, 0.094, 91.525, 2382.326, 2.955, 115.442],
[113, 31.389, 0.094, 92.346, 2474.672, 2.955, 118.397],
[114, 31.667, 0.094, 93.167, 2567.84, 2.955, 121.352],
[115, 31.944, 0.094, 93.988, 2661.828, 2.955, 124.307],
[116, 32.222, 0.094, 94.809, 2756.637, 2.955, 127.262],
[117, 32.5, 0.094, 95.63, 2852.266, 2.955, 130.218],
[118, 32.778, 0.094, 96.451, 2948.717, 2.955, 133.173],
[119, 33.056, 0.094, 97.271, 3045.988, 2.955, 136.128],
[120, 33.333, 0.094, 98.092, 3144.081, 2.955, 139.083],
[121, 33.611, 0.072, 111.82, 3255.901, 3.341, 142.423],
[122, 33.889, 0.072, 129.668, 3385.569, 3.842, 146.265],
[123, 34.167, 0.072, 130.735, 3516.304, 3.842, 150.107],
[124, 34.444, 0.072, 131.803, 3648.107, 3.842, 153.949],
[125, 34.722, 0.072, 132.87, 3780.976, 3.842, 157.792],
[126, 35, 0.072, 133.937, 3914.913, 3.842, 161.634],
[127, 35.278, 0.072, 135.004, 4049.918, 3.842, 165.476],
[128, 35.556, 0.072, 136.071, 4185.989, 3.842, 169.318],
[129, 35.833, 0.072, 137.139, 4323.128, 3.842, 173.16],
[130, 36.111, 0.072, 138.206, 4461.333, 3.842, 177.002]
];

let Vlocity_accel_data = [  [0, 0, 0.842, 0, 0, 0, 0],
[1, 0.278, 0.842, 0.046, 0.046, 0.33, 0.33],
[2, 0.556, 0.842, 0.138, 0.183, 0.33, 0.66],
[3, 0.833, 0.842, 0.229, 0.413, 0.33, 0.99],
[4, 1.111, 0.842, 0.321, 0.733, 0.33, 1.32],
[5, 1.389, 0.842, 0.413, 1.146, 0.33, 1.65],
[6, 1.667, 0.842, 0.504, 1.65, 0.33, 1.98],
[7, 1.944, 0.842, 0.596, 2.246, 0.33, 2.31],
[8, 2.222, 0.842, 0.688, 2.933, 0.33, 2.64],
[9, 2.5, 0.842, 0.779, 3.713, 0.33, 2.97],
[10, 2.778, 0.842, 0.871, 4.583, 0.33, 3.3],
[11, 3.056, 0.747, 1.02, 5.603, 0.35, 3.65],
[12, 3.333, 0.747, 1.188, 6.792, 0.372, 4.022],
[13, 3.611, 0.747, 1.292, 8.083, 0.372, 4.394],
[14, 3.889, 0.747, 1.395, 9.478, 0.372, 4.766],
[15, 4.167, 0.747, 1.498, 10.977, 0.372, 5.138],
[16, 4.444, 0.747, 1.602, 12.578, 0.372, 5.51],
[17, 4.722, 0.747, 1.705, 14.283, 0.372, 5.882],
[18, 5, 0.747, 1.808, 16.092, 0.372, 6.254],
[19, 5.278, 0.747, 1.912, 18.003, 0.372, 6.626],
[20, 5.556, 0.747, 2.015, 20.018, 0.372, 6.998],
[21, 5.833, 0.691, 2.2, 22.219, 0.386, 7.384],
[22, 6.111, 0.691, 2.401, 24.62, 0.402, 7.786],
[23, 6.389, 0.691, 2.513, 27.132, 0.402, 8.188],
[24, 6.667, 0.691, 2.624, 29.756, 0.402, 8.59],
[25, 6.944, 0.691, 2.736, 32.492, 0.402, 8.992],
[26, 7.222, 0.691, 2.848, 35.34, 0.402, 9.394],
[27, 7.5, 0.691, 2.959, 38.299, 0.402, 9.796],
[28, 7.778, 0.691, 3.071, 41.37, 0.402, 10.198],
[29, 8.056, 0.691, 3.183, 44.552, 0.402, 10.6],
[30, 8.333, 0.691, 3.294, 47.846, 0.402, 11.002],
[31, 8.611, 0.644, 3.526, 51.373, 0.416, 11.418],
[32, 8.889, 0.644, 3.776, 55.148, 0.432, 11.85],
[33, 9.167, 0.644, 3.895, 59.044, 0.431, 12.281],
[34, 9.444, 0.644, 4.015, 63.059, 0.432, 12.713],
[35, 9.722, 0.644, 4.135, 67.194, 0.431, 13.144],
[36, 10, 0.644, 4.255, 71.449, 0.432, 13.576],
[37, 10.278, 0.644, 4.375, 75.824, 0.431, 14.007],
[38, 10.556, 0.644, 4.495, 80.319, 0.432, 14.439],
[39, 10.833, 0.644, 4.615, 84.934, 0.432, 14.87],
[40, 11.111, 0.644, 4.735, 89.668, 0.431, 15.302],
[41, 11.389, 0.518, 5.379, 95.047, 0.478, 15.78],
[42, 11.667, 0.518, 6.179, 101.226, 0.536, 16.316],
[43, 11.944, 0.518, 6.328, 107.554, 0.536, 16.852],
[44, 12.222, 0.518, 6.477, 114.03, 0.536, 17.388],
[45, 12.5, 0.518, 6.626, 120.656, 0.536, 17.924],
[46, 12.778, 0.518, 6.774, 127.43, 0.536, 18.46],
[47, 13.056, 0.518, 6.923, 134.354, 0.536, 18.996],
[48, 13.333, 0.518, 7.072, 141.426, 0.536, 19.532],
[49, 13.611, 0.518, 7.221, 148.647, 0.536, 20.068],
[50, 13.889, 0.518, 7.37, 156.017, 0.536, 20.604],
[51, 14.167, 0.43, 8.219, 164.236, 0.586, 21.19],
[52, 14.444, 0.43, 9.241, 173.477, 0.646, 21.836],
[53, 14.722, 0.43, 9.421, 182.898, 0.646, 22.482],
[54, 15, 0.43, 9.6, 192.498, 0.646, 23.128],
[55, 15.278, 0.43, 9.78, 202.278, 0.646, 23.774],
[56, 15.556, 0.43, 9.959, 212.237, 0.646, 24.42],
[57, 15.833, 0.43, 10.139, 222.376, 0.646, 25.066],
[58, 16.111, 0.43, 10.318, 232.694, 0.646, 25.712],
[59, 16.389, 0.43, 10.498, 243.191, 0.646, 26.358],
[60, 16.667, 0.43, 10.677, 253.868, 0.646, 27.004],
[61, 16.944, 0.395, 11.315, 265.183, 0.673, 27.677],
[62, 17.222, 0.395, 12.01, 277.193, 0.703, 28.38],
[63, 17.5, 0.395, 12.205, 289.398, 0.703, 29.083],
[64, 17.778, 0.395, 12.4, 301.798, 0.703, 29.786],
[65, 18.056, 0.395, 12.595, 314.393, 0.703, 30.489],
[66, 18.333, 0.395, 12.791, 327.184, 0.703, 31.192],
[67, 18.611, 0.395, 12.986, 340.17, 0.703, 31.895],
[68, 18.889, 0.395, 13.181, 353.351, 0.703, 32.598],
[69, 19.167, 0.395, 13.377, 366.728, 0.703, 33.301],
[70, 19.444, 0.395, 13.572, 380.3, 0.703, 34.004],
[71, 19.722, 0.273, 16.287, 396.586, 0.832, 34.836],
[72, 20, 0.273, 20.219, 416.805, 1.018, 35.854],
[73, 20.278, 0.273, 20.501, 437.306, 1.018, 36.872],
[74, 20.556, 0.273, 20.784, 458.091, 1.018, 37.89],
[75, 20.833, 0.273, 21.067, 479.158, 1.018, 38.908],
[76, 21.111, 0.273, 21.35, 500.507, 1.018, 39.926],
[77, 21.389, 0.273, 21.633, 522.14, 1.018, 40.944],
[78, 21.667, 0.273, 21.915, 544.055, 1.018, 41.962],
[79, 21.944, 0.273, 22.198, 566.253, 1.018, 42.98],
[80, 22.222, 0.273, 22.481, 588.734, 1.018, 43.998],
[81, 22.5, 0.262, 23.245, 611.979, 1.04, 45.037],
[82, 22.778, 0.262, 24.043, 636.022, 1.062, 46.099],
[83, 23.056, 0.262, 24.337, 660.359, 1.062, 47.161],
[84, 23.333, 0.262, 24.633, 684.992, 1.062, 48.223],
[85, 23.611, 0.262, 24.928, 709.919, 1.062, 49.285],
[86, 23.889, 0.262, 25.223, 735.142, 1.062, 50.347],
[87, 24.167, 0.262, 25.517, 760.659, 1.062, 51.409],
[88, 24.444, 0.262, 25.813, 786.472, 1.062, 52.471],
[89, 24.722, 0.262, 26.108, 812.579, 1.062, 53.533],
[90, 25, 0.262, 26.403, 838.982, 1.062, 54.595],
[91, 25.278, 0.222, 28.879, 867.861, 1.149, 55.744],
[92, 25.556, 0.222, 31.796, 899.657, 1.251, 56.995],
[93, 25.833, 0.222, 32.144, 931.801, 1.251, 58.246],
[94, 26.111, 0.222, 32.491, 964.292, 1.251, 59.497],
[95, 26.389, 0.222, 32.839, 997.131, 1.251, 60.748],
[96, 26.667, 0.222, 33.186, 1030.317, 1.251, 61.999],
[97, 26.944, 0.222, 33.534, 1063.851, 1.251, 63.25],
[98, 27.222, 0.222, 33.881, 1097.732, 1.251, 64.501],
[99, 27.5, 0.222, 34.229, 1131.961, 1.251, 65.752],
[100, 27.778, 0.222, 34.576, 1166.537, 1.251, 67.003],
[101, 28.056, 0.21, 35.901, 1202.437, 1.286, 68.289],
[102, 28.333, 0.21, 37.301, 1239.739, 1.323, 69.612],
[103, 28.611, 0.21, 37.669, 1277.407, 1.323, 70.935],
[104, 28.889, 0.21, 38.036, 1315.444, 1.323, 72.258],
[105, 29.167, 0.21, 38.404, 1353.847, 1.323, 73.581],
[106, 29.444, 0.21, 38.771, 1392.619, 1.323, 74.904],
[107, 29.722, 0.21, 39.139, 1431.757, 1.323, 76.227],
[108, 30, 0.21, 39.506, 1471.264, 1.323, 77.55],
[109, 30.278, 0.21, 39.874, 1511.137, 1.323, 78.873],
[110, 30.556, 0.21, 40.241, 1551.379, 1.323, 80.196],
[111, 30.833, 0.214, 40.237, 1591.616, 1.311, 81.507],
[112, 31.111, 0.214, 40.233, 1631.849, 1.299, 82.806],
[113, 31.389, 0.214, 40.594, 1672.442, 1.299, 84.105],
[114, 31.667, 0.214, 40.955, 1713.397, 1.299, 85.404],
[115, 31.944, 0.214, 41.315, 1754.712, 1.299, 86.703],
[116, 32.222, 0.214, 41.676, 1796.389, 1.299, 88.002],
[117, 32.5, 0.214, 42.037, 1838.426, 1.299, 89.301],
[118, 32.778, 0.214, 42.398, 1880.824, 1.299, 90.6],
[119, 33.056, 0.214, 42.759, 1923.582, 1.299, 91.899],
[120, 33.333, 0.214, 43.12, 1966.702, 1.299, 93.198],
[121, 33.611, 0.186, 46.458, 2013.16, 1.388, 94.586],
[122, 33.889, 0.186, 50.288, 2063.448, 1.49, 96.076],
[123, 34.167, 0.186, 50.701, 2114.149, 1.49, 97.566],
[124, 34.444, 0.186, 51.115, 2165.264, 1.49, 99.056],
[125, 34.722, 0.186, 51.529, 2216.793, 1.49, 100.546],
[126, 35, 0.186, 51.943, 2268.737, 1.49, 102.036],
[127, 35.278, 0.186, 52.357, 2321.093, 1.49, 103.526],
[128, 35.556, 0.186, 52.771, 2373.864, 1.49, 105.016],
[129, 35.833, 0.186, 53.185, 2427.049, 1.49, 106.506],
[130, 36.111, 0.186, 53.599, 2480.648, 1.49, 107.996],
[131, 36.389, 0.162, 57.757, 2538.405, 1.593, 109.589],
[132, 36.667, 0.162, 62.536, 2600.94, 1.712, 111.301],
[133, 36.944, 0.162, 63.011, 2663.952, 1.712, 113.013],
[134, 37.222, 0.162, 63.487, 2727.438, 1.712, 114.725],
[135, 37.5, 0.162, 63.962, 2791.4, 1.712, 116.437],
[136, 37.778, 0.162, 64.438, 2855.838, 1.712, 118.149],
[137, 38.056, 0.162, 64.913, 2920.752, 1.712, 119.861],
[138, 38.333, 0.162, 65.389, 2986.14, 1.712, 121.573],
[139, 38.611, 0.162, 65.864, 3052.005, 1.712, 123.285],
[140, 38.889, 0.162, 66.34, 3118.345, 1.712, 124.997],
[141, 39.167, 0.119, 77.115, 3195.46, 1.976, 126.973],
[142, 39.444, 0.119, 91.818, 3287.278, 2.336, 129.309],
[143, 39.722, 0.119, 92.467, 3379.745, 2.336, 131.645],
[144, 40, 0.119, 93.116, 3472.86, 2.336, 133.981],
[145, 40.278, 0.119, 93.764, 3566.625, 2.336, 136.317],
[146, 40.556, 0.119, 94.413, 3661.038, 2.336, 138.653],
[147, 40.833, 0.119, 95.062, 3756.1, 2.336, 140.989],
[148, 41.111, 0.119, 95.711, 3851.811, 2.336, 143.325],
[149, 41.389, 0.119, 96.36, 3948.171, 2.336, 145.661],
[150, 41.667, 0.119, 97.009, 4045.18, 2.336, 147.997],
[151, 41.944, 0.095, 108.739, 4153.919, 2.601, 150.598],
[152, 42.222, 0.095, 123.473, 4277.392, 2.934, 153.532],
[153, 42.5, 0.095, 124.288, 4401.679, 2.934, 156.466],
[154, 42.778, 0.095, 125.103, 4526.782, 2.934, 159.4],
[155, 43.056, 0.095, 125.918, 4652.699, 2.934, 162.334],
[156, 43.333, 0.095, 126.733, 4779.432, 2.934, 165.268],
[157, 43.611, 0.095, 127.547, 4906.979, 2.934, 168.202],
[158, 43.889, 0.095, 128.362, 5035.342, 2.934, 171.136],
[159, 44.167, 0.095, 129.178, 5164.519, 2.934, 174.07],
[160, 44.444, 0.095, 129.993, 5294.512, 2.934, 177.004]
];

let emu_service_braking_data = [  [0, 0, -0.035, 0, 0, 0, 0],
[1, 0.278, -0.035, 1.1, 1.1, 7.92, 7.92],
[2, 0.556, -0.062, 1.4, 2.5, 1.08, 9],
[3, 0.833, -0.089, 1.4, 3.9, 0.36, 9.36],
[4, 1.111, -0.116, 1.4, 5.3, 0.18, 9.54],
[5, 1.389, -0.144, 1.4, 6.7, 0.108, 9.648],
[6, 1.667, -0.163, 1.8, 8.5, 0.552, 10.2],
[7, 1.944, -0.182, 1.9, 10.4, 0.497, 10.697],
[8, 2.222, -0.204, 1.7, 12.1, 0.193, 10.89],
[9, 2.5, -0.223, 1.9, 14, 0.31, 11.2],
[10, 2.778, -0.241, 2, 16, 0.32, 11.52],
[11, 3.056, -0.259, 2, 18, 0.262, 11.782],
[12, 3.333, -0.278, 2, 20, 0.218, 12],
[13, 3.611, -0.296, 2, 22, 0.185, 12.185],
[14, 3.889, -0.315, 2, 24, 0.158, 12.343],
[15, 4.167, -0.334, 2, 26, 0.137, 12.48],
[16, 4.444, -0.353, 2, 28, 0.12, 12.6],
[17, 4.722, -0.372, 2, 30, 0.106, 12.706],
[18, 5, -0.391, 2, 32, 0.094, 12.8],
[19, 5.278, -0.41, 2, 34, 0.084, 12.884],
[20, 5.556, -0.429, 2, 36, 0.076, 12.96],
[21, 5.833, -0.442, 2.5, 38.5, 0.24, 13.2],
[22, 6.111, -0.455, 2.5, 41, 0.218, 13.418],
[23, 6.389, -0.469, 2.5, 43.5, 0.199, 13.617],
[24, 6.667, -0.483, 2.5, 46, 0.183, 13.8],
[25, 6.944, -0.492, 3, 49, 0.312, 14.112],
[26, 7.222, -0.502, 3, 52, 0.288, 14.4],
[27, 7.5, -0.511, 3, 55, 0.267, 14.667],
[28, 7.778, -0.521, 3, 58, 0.248, 14.914],
[29, 8.056, -0.532, 3, 61, 0.231, 15.145],
[30, 8.333, -0.543, 3, 64, 0.215, 15.36],
[31, 8.611, -0.553, 3, 67, 0.201, 15.561],
[32, 8.889, -0.56, 3.5, 70.5, 0.301, 15.863],
[33, 9.167, -0.568, 3.5, 74, 0.283, 16.145],
[34, 9.444, -0.575, 3.5, 77.5, 0.266, 16.412],
[35, 9.722, -0.583, 3.5, 81, 0.251, 16.663],
[36, 10, -0.588, 4, 85, 0.337, 17],
[37, 10.278, -0.597, 3.5, 88.5, 0.222, 17.222],
[38, 10.556, -0.609, 3, 91.5, 0.115, 17.337],
[39, 10.833, -0.618, 3.5, 95, 0.202, 17.538],
[40, 11.111, -0.63, 3, 98, 0.102, 17.64],
[41, 11.389, -0.63, 5, 103, 0.448, 18.088],
[42, 11.667, -0.636, 4, 107, 0.255, 18.343],
[43, 11.944, -0.637, 5, 112, 0.411, 18.753],
[44, 12.222, -0.644, 4, 116, 0.228, 18.982],
[45, 12.5, -0.646, 5, 121, 0.378, 19.36],
[46, 12.778, -0.648, 5, 126, 0.362, 19.722],
[47, 13.056, -0.651, 5, 131, 0.346, 20.068],
[48, 13.333, -0.654, 5, 136, 0.332, 20.4],
[49, 13.611, -0.657, 5, 141, 0.318, 20.718],
[50, 13.889, -0.656, 6, 147, 0.45, 21.168],
[51, 14.167, -0.66, 5, 152, 0.291, 21.459],
[52, 14.444, -0.66, 6, 158, 0.418, 21.877],
[53, 14.722, -0.665, 5, 163, 0.266, 22.143],
[54, 15, -0.666, 6, 169, 0.39, 22.533],
[55, 15.278, -0.667, 6, 175, 0.376, 22.909],
[56, 15.556, -0.668, 6, 181, 0.362, 23.271],
[57, 15.833, -0.67, 6, 187, 0.35, 23.621],
[58, 16.111, -0.669, 7, 194, 0.462, 24.083],
[59, 16.389, -0.671, 6, 200, 0.324, 24.407],
[60, 16.667, -0.671, 7, 207, 0.433, 24.84],
[61, 16.944, -0.674, 6, 213, 0.301, 25.141],
[62, 17.222, -0.674, 7, 220, 0.407, 25.548],
[63, 17.5, -0.675, 7, 227, 0.394, 25.943],
[64, 17.778, -0.675, 7, 234, 0.382, 26.325],
[65, 18.056, -0.676, 7, 241, 0.37, 26.695],
[66, 18.333, -0.678, 7, 248, 0.359, 27.055],
[67, 18.611, -0.677, 8, 256, 0.456, 27.51],
[68, 18.889, -0.678, 7, 263, 0.337, 27.847],
[69, 19.167, -0.678, 8, 271, 0.431, 28.278],
[70, 19.444, -0.678, 8, 279, 0.419, 28.697],
[71, 19.722, -0.68, 7, 286, 0.306, 29.003],
[72, 20, -0.68, 8, 294, 0.397, 29.4],
[73, 20.278, -0.681, 8, 302, 0.386, 29.786],
[74, 20.556, -0.679, 9, 311, 0.473, 30.259],
[75, 20.833, -0.68, 8, 319, 0.365, 30.624],
[76, 21.111, -0.679, 9, 328, 0.45, 31.074],
[77, 21.389, -0.681, 8, 336, 0.344, 31.418],
[78, 21.667, -0.68, 9, 345, 0.428, 31.846],
[79, 21.944, -0.68, 9, 354, 0.417, 32.263],
[80, 22.222, -0.68, 9, 363, 0.407, 32.67],
[81, 22.5, -0.68, 9, 372, 0.397, 33.067],
[82, 22.778, -0.681, 9, 381, 0.387, 33.454],
[83, 23.056, -0.68, 10, 391, 0.464, 33.918],
[84, 23.333, -0.681, 9, 400, 0.368, 34.286],
[85, 23.611, -0.68, 10, 410, 0.444, 34.729],
[86, 23.889, -0.679, 10, 420, 0.433, 35.163],
[87, 24.167, -0.681, 9, 429, 0.341, 35.503],
[88, 24.444, -0.681, 10, 439, 0.415, 35.918],
[89, 24.722, -0.681, 10, 449, 0.405, 36.324],
[90, 25, -0.679, 11, 460, 0.476, 36.8],
[91, 25.278, -0.68, 10, 470, 0.387, 37.187],
[92, 25.556, -0.68, 10, 480, 0.378, 37.565],
[93, 25.833, -0.68, 11, 491, 0.448, 38.013],
[94, 26.111, -0.68, 10, 501, 0.362, 38.374],
[95, 26.389, -0.68, 11, 512, 0.43, 38.804],
[96, 26.667, -0.68, 11, 523, 0.421, 39.225],
[97, 26.944, -0.68, 11, 534, 0.412, 39.637],
[98, 27.222, -0.68, 11, 545, 0.404, 40.041],
[99, 27.5, -0.68, 11, 556, 0.396, 40.436],
[100, 27.778, -0.68, 11, 567, 0.388, 40.824],
[101, 28.056, -0.68, 12, 579, 0.451, 41.275],
[102, 28.333, -0.68, 11, 590, 0.372, 41.647],
[103, 28.611, -0.68, 12, 602, 0.434, 42.082],
[104, 28.889, -0.68, 12, 614, 0.426, 42.508],
[105, 29.167, -0.679, 12, 626, 0.418, 42.926],
[106, 29.444, -0.681, 11, 637, 0.342, 43.268],
[107, 29.722, -0.68, 13, 650, 0.47, 43.738],
[108, 30, -0.68, 12, 662, 0.395, 44.133],
[109, 30.278, -0.68, 12, 674, 0.388, 44.521],
[110, 30.556, -0.68, 13, 687, 0.446, 44.967],
[111, 30.833, -0.68, 12, 699, 0.373, 45.341],
[112, 31.111, -0.68, 13, 712, 0.431, 45.771],
[113, 31.389, -0.68, 12, 724, 0.36, 46.131],
[114, 31.667, -0.68, 13, 737, 0.416, 46.547],
[115, 31.944, -0.68, 13, 750, 0.409, 46.957],
[116, 32.222, -0.68, 13, 763, 0.402, 47.359],
[117, 32.5, -0.68, 14, 777, 0.457, 47.815],
[118, 32.778, -0.68, 13, 790, 0.388, 48.203],
[119, 33.056, -0.68, 13, 803, 0.381, 48.585],
[120, 33.333, -0.68, 14, 817, 0.435, 49.02],
];
let emu_emergency_braking_data = [  [0, 0, -0.039, 0, 0, 0, 0],
[1, 0.278, -0.039, 1, 1, 7.2, 7.2],
[2, 0.556, -0.07, 1.2, 2.2, 0.72, 7.92],
[3, 0.833, -0.102, 1.2, 3.4, 0.24, 8.16],
[4, 1.111, -0.133, 1.25, 4.65, 0.21, 8.37],
[5, 1.389, -0.161, 1.35, 6, 0.27, 8.64],
[6, 1.667, -0.186, 1.45, 7.45, 0.3, 8.94],
[7, 1.944, -0.21, 1.55, 9, 0.317, 9.257],
[8, 2.222, -0.229, 1.8, 10.8, 0.463, 9.72],
[9, 2.5, -0.244, 2, 12.8, 0.52, 10.24],
[10, 2.778, -0.259, 2.1, 14.9, 0.488, 10.728],
[11, 3.056, -0.275, 2.1, 17, 0.399, 11.127],
[12, 3.333, -0.292, 2, 19, 0.273, 11.4],
[13, 3.611, -0.31, 2, 21, 0.231, 11.631],
[14, 3.889, -0.329, 2, 23, 0.198, 11.829],
[15, 4.167, -0.347, 2, 25, 0.171, 12],
[16, 4.444, -0.366, 2, 27, 0.15, 12.15],
[17, 4.722, -0.384, 2, 29, 0.132, 12.282],
[18, 5, -0.403, 2, 31, 0.118, 12.4],
[19, 5.278, -0.422, 2, 33, 0.105, 12.505],
[20, 5.556, -0.441, 2, 35, 0.095, 12.6],
[21, 5.833, -0.46, 2, 37, 0.086, 12.686],
[22, 6.111, -0.479, 2, 39, 0.078, 12.764],
[23, 6.389, -0.498, 2, 41, 0.071, 12.835],
[24, 6.667, -0.517, 2, 43, 0.065, 12.9],
[25, 6.944, -0.536, 2, 45, 0.06, 12.96],
[26, 7.222, -0.555, 2, 47, 0.055, 13.015],
[27, 7.5, -0.574, 2, 49, 0.051, 13.067],
[28, 7.778, -0.593, 2, 51, 0.048, 13.114],
[29, 8.056, -0.612, 2, 53, 0.044, 13.159],
[30, 8.333, -0.62, 3, 56, 0.281, 13.44],
[31, 8.611, -0.632, 2.7, 58.7, 0.194, 13.634],
[32, 8.889, -0.643, 2.7, 61.4, 0.181, 13.815],
[33, 9.167, -0.656, 2.6, 64, 0.149, 13.964],
[34, 9.444, -0.666, 3, 67, 0.225, 14.188],
[35, 9.722, -0.675, 3, 70, 0.212, 14.4],
[36, 10, -0.685, 3, 73, 0.2, 14.6],
[37, 10.278, -0.695, 3, 76, 0.189, 14.789],
[38, 10.556, -0.7, 3.6, 79.6, 0.293, 15.082],
[39, 10.833, -0.707, 3.4, 83, 0.241, 15.323],
[40, 11.111, -0.71, 4, 87, 0.337, 15.66],
[41, 11.389, -0.713, 4, 91, 0.32, 15.98],
[42, 11.667, -0.721, 3.4, 94.4, 0.202, 16.183],
[43, 11.944, -0.728, 3.6, 98, 0.226, 16.409],
[44, 12.222, -0.732, 4, 102, 0.282, 16.691],
[45, 12.5, -0.737, 4, 106, 0.269, 16.96],
[46, 12.778, -0.742, 4, 110, 0.257, 17.217],
[47, 13.056, -0.744, 4.5, 114.5, 0.323, 17.54],
[48, 13.333, -0.747, 4.5, 119, 0.31, 17.85],
[49, 13.611, -0.747, 5, 124, 0.37, 18.22],
[50, 13.889, -0.754, 4, 128, 0.212, 18.432],
[51, 14.167, -0.754, 5, 133, 0.344, 18.776],
[52, 14.444, -0.756, 5, 138, 0.331, 19.108],
[53, 14.722, -0.758, 5, 143, 0.319, 19.426],
[54, 15, -0.76, 5, 148, 0.307, 19.733],
[55, 15.278, -0.763, 5, 153, 0.296, 20.029],
[56, 15.556, -0.766, 5, 158, 0.285, 20.314],
[57, 15.833, -0.764, 6, 164, 0.402, 20.716],
[58, 16.111, -0.768, 5, 169, 0.264, 20.979],
[59, 16.389, -0.767, 6, 175, 0.377, 21.356],
[60, 16.667, -0.772, 5, 180, 0.244, 21.6],
[61, 16.944, -0.772, 6, 186, 0.354, 21.954],
[62, 17.222, -0.772, 6, 192, 0.343, 22.297],
[63, 17.5, -0.773, 6, 198, 0.332, 22.629],
[64, 17.778, -0.775, 6, 204, 0.321, 22.95],
[65, 18.056, -0.776, 6, 210, 0.312, 23.262],
[66, 18.333, -0.774, 7, 217, 0.411, 23.673],
[67, 18.611, -0.777, 6, 223, 0.291, 23.964],
[68, 18.889, -0.779, 6, 229, 0.283, 24.247],
[69, 19.167, -0.778, 7, 236, 0.379, 24.626],
[70, 19.444, -0.778, 7, 243, 0.368, 24.994],
[71, 19.722, -0.778, 7, 250, 0.358, 25.352],
[72, 20, -0.778, 7, 257, 0.348, 25.7],
[73, 20.278, -0.779, 7, 264, 0.338, 26.038],
[74, 20.556, -0.78, 7, 271, 0.329, 26.368],
[75, 20.833, -0.781, 7, 278, 0.32, 26.688],
[76, 21.111, -0.782, 7, 285, 0.312, 27],
[77, 21.389, -0.781, 8, 293, 0.397, 27.397],
[78, 21.667, -0.782, 7, 300, 0.295, 27.692],
[79, 21.944, -0.782, 8, 308, 0.379, 28.071],
[80, 22.222, -0.781, 8, 316, 0.369, 28.44],
[81, 22.5, -0.781, 8, 324, 0.36, 28.8],
[82, 22.778, -0.781, 8, 332, 0.351, 29.151],
[83, 23.056, -0.782, 8, 340, 0.343, 29.494],
[84, 23.333, -0.782, 8, 348, 0.335, 29.829],
[85, 23.611, -0.783, 8, 356, 0.327, 30.155],
[86, 23.889, -0.782, 9, 365, 0.403, 30.558],
[87, 24.167, -0.783, 8, 373, 0.311, 30.869],
[88, 24.444, -0.782, 9, 382, 0.386, 31.255],
[89, 24.722, -0.782, 9, 391, 0.377, 31.631],
[90, 25, -0.781, 9, 400, 0.369, 32],
[91, 25.278, -0.783, 8, 408, 0.281, 32.281],
[92, 25.556, -0.781, 10, 418, 0.432, 32.713],
[93, 25.833, -0.781, 9, 427, 0.345, 33.058],
[94, 26.111, -0.782, 9, 436, 0.338, 33.396],
[95, 26.389, -0.782, 9, 445, 0.331, 33.726],
[96, 26.667, -0.781, 10, 455, 0.399, 34.125],
[97, 26.944, -0.782, 9, 464, 0.316, 34.441],
[98, 27.222, -0.782, 10, 474, 0.383, 34.824],
[99, 27.5, -0.781, 10, 484, 0.376, 35.2],
[100, 27.778, -0.781, 10, 494, 0.368, 35.568],
[101, 28.056, -0.781, 10, 504, 0.361, 35.929],
[102, 28.333, -0.781, 10, 514, 0.354, 36.282],
[103, 28.611, -0.781, 10, 524, 0.347, 36.629],
[104, 28.889, -0.781, 10, 534, 0.34, 36.969],
[105, 29.167, -0.78, 11, 545, 0.402, 37.371],
[106, 29.444, -0.781, 10, 555, 0.327, 37.698],
[107, 29.722, -0.78, 11, 566, 0.388, 38.086],
[108, 30, -0.78, 11, 577, 0.381, 38.467],
[109, 30.278, -0.78, 11, 588, 0.374, 38.84],
[110, 30.556, -0.779, 11, 599, 0.367, 39.207],
[111, 30.833, -0.779, 11, 610, 0.36, 39.568],
[112, 31.111, -0.779, 11, 621, 0.354, 39.921],
[113, 31.389, -0.779, 11, 632, 0.348, 40.269],
[114, 31.667, -0.78, 11, 643, 0.341, 40.611],
[115, 31.944, -0.779, 12, 655, 0.398, 41.009],
[116, 32.222, -0.779, 11, 666, 0.329, 41.338],
[117, 32.5, -0.779, 12, 678, 0.385, 41.723],
[118, 32.778, -0.779, 12, 690, 0.379, 42.102],
[119, 33.056, -0.778, 12, 702, 0.372, 42.474],
[120, 33.333, -0.778, 12, 714, 0.366, 42.84],
];


let Nclass_emergency_brake_rate = -0.60;
let Nclass_service_brake_rate = -0.56;
let Sprinter_service_brake_rate = -0.73;
let Sprinter_emergency_brake_rate = -0.83;
let Vlocity_service_brake_rate = -0.95;
let Vlocity_emergency_brake_rate = -1.12;

let saved_table_data = [0,0]; //this is an array that saves results. it must be initialised with elements because it's length-1 is called in main()
let calculation_type = ""; //this is a variable that will be changed with eatch iteration. it can be put into table and also allows for bug prevention

//EMU BRAKING - TODO

let call_count = 1;
let preset_checked = false;

let all_vals_array = []; // saves old vals

//funtion gets values from user input html form
function get_input_values(){

    const input_values =  {
        initial_vel: document.getElementById("initial_vel").value,
        final_vel:  document.getElementById("final_vel").value,
        time:  document.getElementById("time").value,
        distance: document.getElementById("distance").value,
        accel: document.getElementById("accel").value,
        grad: document.getElementById("grad").value,
        };
        ////This only is if user inputs km/h
        // if (input_values['initial_vel'] != "" && !isNaN(input_values['initial_vel'])){
        //     input_values['initial_vel'] = input_values['initial_vel']/3.6
        //     console.log()
        // }
        // if (input_values['final_vel'] != "" && !isNaN(input_values['final_vel'])){
        //     input_values['final_vel'] = input_values['final_vel']/3.6
        // }
        ////This only is if user inputs km/h
    console.log(input_values);
    //convert inputs to floats unless user inputs nothing(e.g empty string)
    for (const variable in input_values){
        if (input_values[variable] != ""){
            input_values[variable] = parseFloat(input_values[variable]);
        }
    }
    //console.log(input_values)
    return input_values;

    
}

//this function round an array of numbers to wo decimal places.
function round_array(num_array){
    let rounded_num_array = [];
    for(let i =0; i< num_array.length;i++){
        rounded_num_array[i] = Math.round(num_array[i]*100)/100;
    }
    return rounded_num_array;

}

//this function counts the inputs entered by user & checks if it is a valid number or null input.
function check_input(input_values){
        let count = 0;
        for (const variable in input_values){
            if (variable != 'grad'){ //this takes the values of input_values and checks them (excluding gradient)
                if (!isNaN(input_values[variable]) && input_values[variable] !== ""){
                    count = count + 1;
                    //console.log(`var = ${variable}, val = ${input_values[variable]}(${typeof(input_values[variable])}), count = ${count}`);
            }
        }
    }
    for (const value in input_values){
        if (value != "" && isNaN(input_values[value])){
            alert("YOU HAVE NOT ENTERED VALID INPUTS");
        throw new Error("ERROR");
            //exit program 
        }
    }
    if (count < 3 && preset_checked == false){
        alert("You have not put in enough variables");
        throw new Error("ERROR");
    }
    console.log(`preset_check=${preset_checked} count = ${count}`)
    if (count < 2 && preset_checked == true){
        alert("You have not put in enough variables");
        throw new Error("ERROR");
    }
    if (count > 3 && preset_checked == false){
        alert("Please only enter three variables and a gradient if applicable!");
        throw new Error("ERROR");
    }
    if (count > 2 && preset_checked == true){
        alert("Please only enter two variables for a preset calculation and a gradient if applicable!");
        throw new Error("ERROR");
    }
    
    return count;
}

function check_input_two(calculation_type, input_values){
        //checks variables with calculation type
        if(calculation_type == "Acceleration"){
            if(input_values['initial_vel'] !== "" && input_values['final_vel'] !== "" && input_values['initial_vel'] > input_values['final_vel']){
                alert("For this calculation final velocity should be greater than initial velocity.")
                throw new Error("final velocity should be greater than initial velocity.");
            }
    
    
        }
        console.log(`calculayion type: ${calculation_type}`)
        if(calculation_type === "Service Braking" || calculation_type === "Emerg Braking"){
            if(input_values['initial_vel'] < input_values['final_vel']){
                console.log(`initial val = ${input_values['initial_vel']}, final vel = ${input_values['final_vel']}`)
                alert("For this calculation initial velocity should be greater than final velocity.")
                throw new Error("initial velocity should be greater than final velocity.");
            }
    
        }
        if (input_values[time] < 0 || input_values[distance] < 0){
            alert("time and distance inputs must be greater than zero")
            throw new Error("time and distance inputs must be greater than zero");
        }
        return;
}

function what_was_calculated(input_values){
    //this determines what needs to be calculated (so that it can be highlighted in red in the table)
    let highlight_calculated_array = [];
    for (let input in input_values){    //Object.keys(input_values).length returns array of property names and then can find size of object with .length
        if (input_values[input] === ""){
            highlight_calculated_array.push('calculated');
        }
        else{
            highlight_calculated_array.push('not_calculated');
        }
    }
    highlight_calculated_array[highlight_calculated_array.length-1] = 'not_calculated'; //the gradient should never be calculated!
    //console.log("CALCULATED ARRAY + "+highlight_calculated_array);
    return highlight_calculated_array;
}

function calculate_vals(input_values){
//accel_adjust adjusts the acceleration value by a factor to compensate for a gradient.
function accel_adjust(accel,grad){
    if (!isNaN(parseFloat(grad))){
        accel = parseFloat(accel) - (9.81*parseFloat(grad)/100);
        return accel;
    }
    else {
        return parseFloat(accel);
    }
}

    let initial_vel = input_values['initial_vel'];
    let final_vel = input_values['final_vel'];
    let time = input_values['time'];
    let distance = input_values['distance'];
    let accel = input_values['accel'];
    let grad = input_values['grad'];
    //console.log(input_values);
    accel = accel_adjust(accel,grad);
    console.log("accel: " + accel);
    console.log(input_values);

    if (!accel) {
        if (!distance){
            distance = (time*(initial_vel + final_vel))/2; //f3
            accel = (final_vel-initial_vel)/time; //f1
            accel = accel_adjust(accel);
        }
        else if(!time){
            time = (2*distance)/(initial_vel+final_vel);
            accel = (final_vel**2-initial_vel**2)/(2*distance);
            accel = accel_adjust(accel);

        }
        else if(!initial_vel){
            initial_vel = ((distance*2)/time)-final_vel;
            accel = (final_vel-initial_vel)/time; 
            accel = accel_adjust(accel);
        }
        else if(!final_vel){
            final_vel = ((distance*2)/time)-initial_vel;
            accel = (final_vel-initial_vel)/time;
            accel = accel_adjust(accel); 
        }  
    }
    if (!distance){
        if (!time){
            time = (final_vel-initial_vel)/(accel);
            distance = (final_vel**2 - initial_vel**2)/(2*accel);
        }
        if (!initial_vel){
            initial_vel = final_vel-(accel*time);
            distance = time*(initial_vel + final_vel)/2;
        }
        if (!final_vel){
            final_vel = initial_vel + (accel*time);
            distance = (time*(initial_vel + final_vel))/2;
            console.log("No distance, no final vel"+ time +"*"+initial_vel+"+"+final_vel+"/2"+"="+ distance);
        }
    }
    if (!time){
        if (!initial_vel){
            initial_vel = Math.sqrt(final_vel**2 - (2*accel*distance));
            time = (final_vel-initial_vel)/accel;
        }
        if (!final_vel){
            final_vel = Math.sqrt(initial_vel**2 + 2*accel*distance);
            time = (final_vel-initial_vel)/accel;
            let vals_array = [initial_vel, final_vel, time, distance, accel, grad];
        }
    }
    if (!initial_vel && !final_vel){
        initial_vel = (distance - (0.5*accel*time**2))/time;
    }
let vals_array = [initial_vel, final_vel, time, distance, accel, grad];
console.log(vals_array);
return vals_array;

}

//adds row & table data points to values table.
function add_table_row(vals_array, highlight_calculated_array){
    let table = document.getElementById("calculation_table");
    let row = table.insertRow();
    let cell = row.insertCell();
    cell.innerHTML = `#${call_count}`;
    let i=0;
    for (i=0; i < vals_array.length; i++){
        cell = row.insertCell();
        cell.innerHTML = vals_array[i];
        cell.id = `row${call_count-1}-col${i}:`
        cell.className = `col${i+1}`
        if (highlight_calculated_array[i] == 'calculated'){
            cell.className += cell.className ? " calculated":"calculated"; //adds second class if necesarry using ternary operator (?)
            //console.log("CALCULATEDDDD!!!!")
        }
    }
    cell = row.insertCell();
    cell.innerHTML = preset_name;
    cell.id = `row${call_count-1}-col${7}:`
    cell.className = `col${7}`
    $("tr:odd").css("background-color", "rgb(240, 244, 247)"); //highlights color of table cells
    return;
}


/////FUNCTION FOR PRESET ACCELERATIONS GO HERE/////
function acceleration_preset(){
    preset_checked = true;
    document.getElementById("accel").disabled = true;

}

function enable_acceleration_input(){
    preset_checked = false;
    document.getElementById("accel").disabled = false;
}

function find_values(train_dynamics_data, input_values){
    let time_accumulation = 0; //initiaise
    //let sum_av_accel = 0; //initialise
    let distance_accumulation = 0; //initialise
    let i = 0;

    if (input_values['initial_vel'] !== "" && input_values['final_vel'] !== ""){
        //initial & final velocity given. 
        //assuming m/s 
        //IF m/s
        let initial_vel = Math.round(input_values['initial_vel'] * 3.6); //round to nearest table value(integer)
        let final_vel = Math.round(input_values['final_vel']*3.6); 
        if (initial_vel < final_vel){ //acceleration calc
            for (i = initial_vel; i<= final_vel; i++){
                //find av acceleration given data
                time_accumulation += train_dynamics_data[i][5];
                //find distance given data
                distance_accumulation += train_dynamics_data[i][3];
                //find accumulated time given data
                // BONUS -> find (effective acceleration given data (this is not the correct accel value.))
                //sum_av_accel += train_dynamics_data[i][2] * train_dynamics_data[i][3];
            }
        }
        if (initial_vel > final_vel){ //deceleration calc
            for (i = final_vel; i<= initial_vel; i++){
                //find av acceleration given data
                time_accumulation += train_dynamics_data[i][5];
                //find distance given data
                distance_accumulation += train_dynamics_data[i][3];
                //find accumulated time given data
                // BONUS -> find (effective acceleration given data (this is not the correct accel value.))
                //sum_av_accel += train_dynamics_data[i][2] * train_dynamics_data[i][3];
            }
        }
        eff_accel = Math.round(((input_values['final_vel'] - input_values['initial_vel'])/time_accumulation)*100)/100;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [input_values['initial_vel'], input_values['final_vel'], time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(vals_array);
        return vals_array;
        }

    if (input_values['initial_vel'] !== "" && input_values['distance'] !== ""){
        //initial vel give & distance given. this is an exageration and is the reason interpolation needs to be done!
        //need to work out the factor of safety here especially for high speeds
        i= Math.round(input_values['initial_vel'] * 3.6)
        while (distance_accumulation <= input_values['distance']){
            if(i>=train_dynamics_data.length){alert("This calculation exceeds maximum speed of the loco");}
            distance_accumulation += train_dynamics_data[i][3];
            time_accumulation += train_dynamics_data[i][5];
            //sum_av_accel += train_dynamics_data[i][2] * train_dynamics_data[i][3];
            i++;
        }
        initial_vel = Math.round(input_values['initial_vel']); //round to nearest table value(integer);
        final_vel = train_dynamics_data[i][0]/3.6
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*100)/100;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        console.log("THIS IS A DISTANCE VELOCITY CALC, ATM THESE ARE ROUNDED TO NEAREST TABLE VAL SO YOU WILL NOT GET ACCURATE RESULTS.")
        return vals_array;
    }

    if (input_values['initial_vel'] !== "" && input_values['time'] !== ""){
        //initial & time is given. 
        i= Math.round(input_values['initial_vel'] * 3.6)
        while (time_accumulation <= input_values['time']){
            if(i>=train_dynamics_data.length){alert("This calculation exceeds maximum acceleration of the loco");}
            distance_accumulation += train_dynamics_data[i][3];
            time_accumulation += train_dynamics_data[i][5];
            //sum_av_accel += train_dynamics_data[i][2] * train_dynamics_data[i][3];
            i++;
        }
        initial_vel = Math.round(input_values['initial_vel']); //round to nearest table value(integer);
        final_vel = train_dynamics_data[i][0]/3.6
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*10)/10;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        return vals_array;
    }

    if (input_values['final_vel'] !== "" && input_values['time'] !== ""){
        //initial & final velocity given. 
        i = Math.round(input_values['final_vel'] * 3.6);
        while (time_accumulation <= input_values['time']){
            i--;
            if (i<0 && document.getElementById("accel").disabled === false){alert("It looks like the train is changing directions. This calculation is not supported.");}
            distance_accumulation += train_dynamics_data[i][3];
            time_accumulation += train_dynamics_data[i][5];
            //sum_av_accel += train_dynamics_data[i][2] * train_dynamics_data[i][3];
        }
        final_vel = Math.round(input_values['final_vel']); //round to nearest table value(integer);
        initial_vel = train_dynamics_data[i][0]/3.6;
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*10)/10;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        return vals_array;
    }
    if (input_values[final_vel] !== "" && input_values[distance] !== ""){
        //initial & final velocity given. 
        i = Math.round(input_values['final_vel'] * 3.6);
        while (distance_accumulation <= input_values['distance']){
            i--;
            if (i<0){alert("It looks like the train is changing directions. This calculation is not supported.");}
            distance_accumulation += train_dynamics_data[i][3];
            time_accumulation += train_dynamics_data[i][5];
            //sum_av_accel += train_dynamics_data[i][2] * train_dynamics_data[i][3];
        }
        final_vel = Math.round(input_values['final_vel']); //round to nearest table value(integer);
        initial_vel = train_dynamics_data[i][0]/3.6;
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*10)/10;
        //eff_accel = sum_av_accel/distance_accumulation;
        console.log("THIS IS A DISTANCE VELOCITY CALC, ATM THESE ARE ROUNDED TO NEAREST TABLE VAL SO YOU WILL NOT GET ACCURATE RESULTS.")
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        return vals_array;

    }

}

function get_selected_preset(input_values){
    //will either need to find vals from tabulated data or calculate vals(if a is constant)
    //BELOW ARE ACCELERATION CALCS USING TABULATED DATA
    if(document.getElementById("emu_accel").checked){
        preset_name = "emu_accel"
        calculation_type ="Acceleration";
        return find_values(Xtrap_accel_data, input_values);
    }
    if(document.getElementById("vlocity_accel").checked){
        preset_name = "vlocity_accel"
        calculation_type ="Acceleration";
        return find_values(Vlocity_accel_data, input_values);
    }
    if(document.getElementById("nclass_accel").checked){
        preset_name = "nclass_accel"
        calculation_type ="Acceleration";
        return find_values(Nclass_accel_data, input_values);
    }
    if(document.getElementById("sprinter_accel").checked){
        preset_name = "sprinter_accel"
        calculation_type ="Acceleration";
        return find_values(Sprinter_accel_data, input_values);
    }
    //BELOW ARE BRAKING CALCS FROM A CONSTANT DECEL VALUE USED IN SERVICE BRAKING
    if(document.getElementById("emu_sb").checked){
        preset_name = "emu_sb"
        calculation_type ="Service Braking";
        return find_values(emu_service_braking_data, input_values);

    }if(document.getElementById("vlocity_sb").checked){
        input_values['accel'] = Vlocity_service_brake_rate;
        preset_name = "vlocity_sb"
        calculation_type ="Service Braking";
        return calculate_vals(input_values);

    }if(document.getElementById("nclass_sb").checked){
        preset_name = "nclass_sb"
        calculation_type ="Service Braking";
        input_values['accel'] = Nclass_service_brake_rate;
        return calculate_vals(input_values);

    }if(document.getElementById("sprinter_sb").checked){
        preset_name = "sprinter_sb"
        calculation_type ="Service Braking";
        input_values['accel'] = Sprinter_service_brake_rate;
        return calculate_vals(input_values);
    }

    //BELOW ARE BRAKING CALCS FROM A CONSTANT DECEL VALUE USED IN EMERGENCY BRAKING
    if(document.getElementById("emu_eb").checked){
        preset_name = "emu_eb"
        calculation_type ="Emerg Braking";
        return find_values(emu_emergency_braking_data, input_values);

    }if(document.getElementById("vlocity_eb").checked){
        preset_name = "vlocity_eb"
        calculation_type ="Emerg Braking";
        input_values['accel'] = Vlocity_emergency_brake_rate;
        return calculate_vals(input_values);

    }if(document.getElementById("nclass_eb").checked){
        preset_name = "nclass_eb"
        calculation_type ="Emerg Braking";
        input_values['accel'] = Nclass_emergency_brake_rate;
        return calculate_vals(input_values);

    }if(document.getElementById("sprinter_eb").checked){
        preset_name = "sprinter_eb"
        calculation_type ="Emerg Braking";
        input_values['accel'] = Sprinter_emergency_brake_rate;
        return calculate_vals(input_values);
    }

    else{ //this is the case that no preset was selected
        //this is in the case that acceleration is constant
        preset_name = "none";
        calculation_type ="custom";
        return calculate_vals(input_values);
    }

}

function take_gradient(vals_array, input_values){
    //only do this function if calc done from find vals not calc vals
    //need to multiply grad with acceleration -> then take velocities and accel and redo calcs.
    grad = vals_array[vals_array.length-1];
    accel = vals_array[vals_array.length-2];

    new_input = input_values;

    if (!isNaN(parseFloat(grad)) && grad !== 0 && grad !== ""){
    //    accel = parseFloat(accel) - (9.81*parseFloat(grad)/100); //not needed because already part of calculate_vals
        new_input["accel"] = accel;
        console.log(`new_input=${new_input}, original input_values=${input_values}`)
        return calculate_vals(new_input);
    }
    return vals_array
}

//function to change m/s to km/h and moves speed toggles together
function toggle_units() {

//changes toggles units from m/s to km/h and syncs up v final and v initial toggles.
  $(".v_toggle").change(function() {

    let x = this.checked;
    $(".v_toggle").prop("checked", x);
  });

  //This part multiplies or divides speeds based on toggles
    let speeds = document.querySelectorAll(".col1");
    let speeds2 = document.querySelectorAll(".col2");
    if($("#vi_units").prop('checked') == true){
        for (let i = 0; i < speeds.length; i++)
        {
            speeds[i].innerText = Math.round(all_vals_array[i][0]*3.6*10)/10;
            speeds2[i].innerText = Math.round(all_vals_array[i][1]*3.6*10)/10;

            // speeds[i].innerText = Math.round(Number(speeds[i].innerText)*3.6*10)/10;
            // speeds2[i].innerText = Math.round(Number(speeds2[i].innerText)*3.6*10)/10;
        }
    }  
    else{
        for (let i = 0; i < speeds.length; i++)
        {
            speeds[i].innerText = all_vals_array[i][0];
            speeds2[i].innerText = all_vals_array[i][1];
            // speeds[i].innerText = Math.round(Number(speeds[i].innerText)/3.6*10)/10;
            // speeds2[i].innerText = Math.round(Number(speeds2[i].innerText)/3.6*10)/10;
        }
    }   
return;
}
function toggle_grad(){
    let grads = document.querySelectorAll(".col6");
    if(document.getElementById("grad_units").checked){
        for (let i = 0; i < grads.length; i++){
            if (grads[i].innerText != 0){
                grads[i].innerText = `1:${100/all_vals_array[i][5]}`;
            }
        }
    }
    if(!document.getElementById("grad_units").checked){
        for (let i = 0; i < grads.length; i++){
            if (grads[i].innerText != 0){
                grads[i].innerText = all_vals_array[i][5];
            }
        }
    }
}

function main(){
    let input_values = get_input_values(); //reads input varaibles and outputs them in an array
    //console.log(input_values);

    check_input(input_values); //counts variables and prompts if not enough
    let vals_array = get_selected_preset(input_values); // returns an array of desired values
    check_input_two(calculation_type, input_values); //another check needs to be done after the preset has been determined as calc type changes.
    //console.log(calculation_type);
    //     function test(){

    //         let i = 0;
    //         while (i<vals_array.length){
    //             switch (i){
    //                 case 0:
    //                     console.log("intial_vel = " + vals_array[i]);
    //                     break;
    //                 case 1:
    //                     console.log("final_vel =" + vals_array[i]);
    //                     break;
    //                 case 2:
    //                     console.log("time =" + vals_array[i]);
    //                     break;
    //                 case 3:
    //                     console.log("distance =" + vals_array[i]);
    //                     break;
    //                 case 4:
    //                     console.log("acceleration =" + vals_array[i]);
    //                     break;
    //                 case 5:
    //                     console.log("gradient =" + vals_array[i]);  
    //                     break;       
                    
    //             }
    //             i++;
    //         }
    // return;
    // }
    // test();
    vals_array = take_gradient(vals_array, input_values); //this sends back through calc vals if there was no accel check.
    let rounded_vals_array = round_array(vals_array);
    //this is_same function checks if values have changed b/n calculations.
    let is_same = saved_table_data[saved_table_data.length-1].length == rounded_vals_array.length && saved_table_data[saved_table_data.length-1].every(function(element, index) { //this check if saved_table_data is the same as vals_array
        return element === rounded_vals_array[index]; 
    });
    if(is_same){
        console.log('no change in values detected so no calculation was done');
        return;
    }
    let highlight_calculated_array = what_was_calculated(input_values); //finds which values have been calculated
    console.log(rounded_vals_array);
    add_table_row(rounded_vals_array, highlight_calculated_array);
    call_count += 1;
    //console.log("clicks = " + call_count);
    saved_table_data.push(rounded_vals_array); //this is to test that table is changing between calculations.
    //console.log(rounded_vals_array);
    all_vals_array.push(rounded_vals_array);
    toggle_units();
    }


    // //bug fixes
    // 19.08 - fixed calculation-type error
    //19.08 changed input vals to convert to floats if not empty.

