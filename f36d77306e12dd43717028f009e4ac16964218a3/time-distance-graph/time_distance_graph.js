//NOTE all arrays should follow this syntax
// let initial_vel = isNumeric(input_values['initial_vel']);
// let final_vel = isNumeric(input_values['final_vel']);
// let time = isNumeric(input_values['time']);
// let distance = isNumeric(input_values['distance']);
// let accel = isNumeric(input_values['accel']);
// let grad = isNumeric(input_values['grad']);
let Nclass_accel_data =  [ [0, 0, 1.429, 0, 0, 0, 0],
[1, 0.278, 1.429, 0.027, 0.027, 0.194, 0.194],
[2, 0.556, 1.429, 0.081, 0.108, 0.194, 0.389],
[3, 0.833, 1.429, 0.135, 0.243, 0.194, 0.583],
[4, 1.111, 1.429, 0.189, 0.432, 0.194, 0.778],
[5, 1.389, 1.428, 0.243, 0.675, 0.194, 0.972],
[6, 1.667, 1.404, 0.3, 0.975, 0.196, 1.168],
[7, 1.944, 1.404, 0.357, 1.332, 0.198, 1.366],
[8, 2.222, 1.404, 0.412, 1.744, 0.198, 1.564],
[9, 2.5, 1.404, 0.467, 2.211, 0.198, 1.761],
[10, 2.778, 1.404, 0.522, 2.733, 0.198, 1.959],
[11, 3.056, 1.271, 0.606, 3.338, 0.208, 2.167],
[12, 3.333, 1.271, 0.698, 4.037, 0.219, 2.385],
[13, 3.611, 1.271, 0.759, 4.795, 0.219, 2.604],
[14, 3.889, 1.271, 0.82, 5.615, 0.219, 2.823],
[15, 4.167, 1.271, 0.88, 6.495, 0.219, 3.041],
[16, 4.444, 0.95, 1.077, 7.573, 0.25, 3.291],
[17, 4.722, 0.95, 1.34, 8.913, 0.292, 3.584],
[18, 5, 0.95, 1.422, 10.335, 0.292, 3.876],
[19, 5.278, 0.95, 1.503, 11.838, 0.292, 4.169],
[20, 5.556, 0.95, 1.584, 13.422, 0.292, 4.461],
[21, 5.833, 0.754, 1.857, 15.279, 0.326, 4.787],
[22, 6.111, 0.754, 2.202, 17.48, 0.369, 5.156],
[23, 6.389, 0.754, 2.304, 19.784, 0.369, 5.525],
[24, 6.667, 0.754, 2.406, 22.191, 0.369, 5.893],
[25, 6.944, 0.754, 2.509, 24.699, 0.369, 6.262],
[26, 7.222, 0.62, 2.866, 27.565, 0.405, 6.666],
[27, 7.5, 0.62, 3.3, 30.865, 0.448, 7.115],
[28, 7.778, 0.62, 3.424, 34.289, 0.448, 7.563],
[29, 8.056, 0.62, 3.549, 37.838, 0.448, 8.011],
[30, 8.333, 0.62, 3.673, 41.511, 0.448, 8.459],
[31, 8.611, 0.525, 4.113, 45.623, 0.485, 8.945],
[32, 8.889, 0.525, 4.632, 50.255, 0.529, 9.474],
[33, 9.167, 0.525, 4.779, 55.034, 0.529, 10.004],
[34, 9.444, 0.525, 4.926, 59.96, 0.529, 10.533],
[35, 9.722, 0.525, 5.073, 65.032, 0.529, 11.062],
[36, 10, 0.445, 5.647, 70.68, 0.573, 11.635],
[37, 10.278, 0.445, 6.324, 77.004, 0.624, 12.259],
[38, 10.556, 0.445, 6.497, 83.501, 0.624, 12.882],
[39, 10.833, 0.445, 6.67, 90.171, 0.624, 13.506],
[40, 11.111, 0.445, 6.844, 97.015, 0.624, 14.13],
[41, 11.389, 0.389, 7.489, 104.504, 0.666, 14.795],
[42, 11.667, 0.389, 8.226, 112.73, 0.714, 15.509],
[43, 11.944, 0.389, 8.425, 121.155, 0.714, 16.223],
[44, 12.222, 0.389, 8.623, 129.777, 0.714, 16.936],
[45, 12.5, 0.389, 8.821, 138.599, 0.714, 17.65],
[46, 12.778, 0.341, 9.617, 148.216, 0.761, 18.411],
[47, 13.056, 0.341, 10.526, 158.742, 0.815, 19.226],
[48, 13.333, 0.341, 10.753, 169.495, 0.815, 20.041],
[49, 13.611, 0.341, 10.979, 180.474, 0.815, 20.856],
[50, 13.889, 0.341, 11.206, 191.68, 0.815, 21.671],
[51, 14.167, 0.3, 12.158, 203.838, 0.867, 22.537],
[52, 14.444, 0.3, 13.24, 217.077, 0.925, 23.463],
[53, 14.722, 0.3, 13.497, 230.574, 0.925, 24.388],
[54, 15, 0.3, 13.754, 244.328, 0.925, 25.314],
[55, 15.278, 0.3, 14.011, 258.338, 0.925, 26.239],
[56, 15.556, 0.267, 15.098, 273.437, 0.979, 27.219],
[57, 15.833, 0.267, 16.32, 289.757, 1.04, 28.258],
[58, 16.111, 0.267, 16.609, 306.365, 1.04, 29.298],
[59, 16.389, 0.267, 16.898, 323.263, 1.04, 30.338],
[60, 16.667, 0.267, 17.187, 340.45, 1.04, 31.378],
[61, 16.944, 0.25, 18.067, 358.517, 1.075, 32.453],
[62, 17.222, 0.25, 19.01, 377.527, 1.113, 33.566],
[63, 17.5, 0.25, 19.319, 396.846, 1.113, 34.679],
[64, 17.778, 0.25, 19.628, 416.475, 1.113, 35.791],
[65, 18.056, 0.25, 19.937, 436.412, 1.113, 36.904],
[66, 18.333, 0.224, 21.334, 457.746, 1.173, 38.077],
[67, 18.611, 0.224, 22.888, 480.634, 1.239, 39.316],
[68, 18.889, 0.224, 23.232, 503.866, 1.239, 40.555],
[69, 19.167, 0.224, 23.576, 527.442, 1.239, 41.794],
[70, 19.444, 0.224, 23.921, 551.363, 1.239, 43.033],
[71, 19.722, 0.206, 25.265, 576.627, 1.29, 44.323],
[72, 20, 0.206, 26.724, 603.351, 1.346, 45.669],
[73, 20.278, 0.206, 27.098, 630.449, 1.346, 47.014],
[74, 20.556, 0.206, 27.472, 657.921, 1.346, 48.36],
[75, 20.833, 0.206, 27.845, 685.766, 1.346, 49.705],
[76, 21.111, 0.189, 29.495, 715.261, 1.406, 51.112],
[77, 21.389, 0.189, 31.301, 746.562, 1.473, 52.585],
[78, 21.667, 0.189, 31.71, 778.272, 1.473, 54.058],
[79, 21.944, 0.189, 32.119, 810.392, 1.473, 55.531],
[80, 22.222, 0.189, 32.529, 842.92, 1.473, 57.004],
[81, 22.5, 0.171, 34.587, 877.507, 1.547, 58.55],
[82, 22.778, 0.171, 36.861, 914.368, 1.628, 60.179],
[83, 23.056, 0.171, 37.314, 951.682, 1.628, 61.807],
[84, 23.333, 0.171, 37.766, 989.448, 1.628, 63.435],
[85, 23.611, 0.171, 38.218, 1027.667, 1.628, 65.063],
[86, 23.889, 0.153, 40.837, 1068.503, 1.719, 66.783],
[87, 24.167, 0.153, 43.766, 1112.269, 1.821, 68.604],
[88, 24.444, 0.153, 44.272, 1156.541, 1.821, 70.426],
[89, 24.722, 0.153, 44.778, 1201.319, 1.821, 72.247],
[90, 25, 0.153, 45.284, 1246.603, 1.821, 74.069],
[91, 25.278, 0.142, 47.407, 1294.01, 1.886, 75.954],
[92, 25.556, 0.142, 49.686, 1343.696, 1.955, 77.909],
[93, 25.833, 0.142, 50.229, 1393.924, 1.955, 79.864],
[94, 26.111, 0.142, 50.772, 1444.696, 1.955, 81.819],
[95, 26.389, 0.142, 51.315, 1496.011, 1.955, 83.774],
[96, 26.667, 0.132, 53.852, 1549.862, 2.03, 85.804],
[97, 26.944, 0.132, 56.591, 1606.454, 2.111, 87.915],
[98, 27.222, 0.132, 57.178, 1663.632, 2.111, 90.026],
[99, 27.5, 0.132, 57.764, 1721.396, 2.111, 92.137],
[100, 27.778, 0.132, 58.351, 1779.747, 2.111, 94.249],
[101, 28.056, 0.113, 63.382, 1843.129, 2.27, 96.519],
[102, 28.333, 0.113, 69.234, 1912.363, 2.456, 98.975],
[103, 28.611, 0.113, 69.916, 1982.279, 2.456, 101.43],
[104, 28.889, 0.113, 70.598, 2052.877, 2.456, 103.886],
[105, 29.167, 0.113, 71.28, 2124.157, 2.456, 106.341],
[106, 29.444, 0.102, 75.556, 2199.713, 2.578, 108.92],
[107, 29.722, 0.102, 80.28, 2279.993, 2.714, 111.633],
[108, 30, 0.102, 81.034, 2361.027, 2.714, 114.347],
[109, 30.278, 0.102, 81.788, 2442.815, 2.714, 117.061],
[110, 30.556, 0.102, 82.542, 2525.357, 2.714, 119.774],
[111, 30.833, 0.095, 86.232, 2611.589, 2.809, 122.584],
[112, 31.111, 0.095, 90.192, 2701.781, 2.912, 125.496],
[113, 31.389, 0.095, 91.001, 2792.783, 2.912, 128.408],
[114, 31.667, 0.095, 91.81, 2884.593, 2.912, 131.32],
[115, 31.944, 0.095, 92.619, 2977.211, 2.912, 134.232],
[116, 32.222, 0.084, 99.142, 3076.354, 3.09, 137.322],
[117, 32.5, 0.084, 106.516, 3182.869, 3.291, 140.613],
[118, 32.778, 0.084, 107.43, 3290.299, 3.291, 143.905],
[119, 33.056, 0.084, 108.344, 3398.643, 3.291, 147.196],
[120, 33.333, 0.084, 109.258, 3507.902, 3.291, 150.488]
];

let Xtrap_tuned_accel_data = [
    [0, 0, 0, 0, 0, 0, 0],
    [1, 0.277777777777778, 0.666666666666667, 0.115740740740741, 0.115740740740741, 0.833333333333333, 0.833333333333333],
    [2, 0.555555555555556, 0.942809041582063, 0.143824153601769, 0.25956489434251, 0.345177968644246, 1.17851130197758],
    [3, 0.833333333333333, 1.15470053837925, 0.183933590969781, 0.443498485312291, 0.264864370996485, 1.44337567297406],
    [4, 1.11111111111111, 1.2, 0.229380954387471, 0.672879439699762, 0.235934695941398, 1.67931036891546],
    [5, 1.38888888888889, 1.2, 0.289351851851852, 0.962231291551614, 0.231481481481481, 1.91079185039694],
    [6, 1.66666666666667, 1.2, 0.353652263374485, 1.3158835549261, 0.231481481481481, 2.14227333187843],
    [7, 1.94444444444444, 1.2, 0.417952674897119, 1.73383622982322, 0.231481481481482, 2.37375481335991],
    [8, 2.22222222222222, 1.2, 0.482253086419754, 2.21608931624297, 0.231481481481482, 2.60523629484139],
    [9, 2.5, 1.2, 0.546553497942387, 2.76264281418536, 0.231481481481481, 2.83671777632287],
    [10, 2.77777777777778, 1.2, 0.61085390946502, 3.37349672365038, 0.231481481481481, 3.06819925780435],
    [11, 3.05555555555556, 1.2, 0.675154320987654, 4.04865104463803, 0.231481481481481, 3.29968073928583],
    [12, 3.33333333333333, 1.2, 0.739454732510287, 4.78810577714832, 0.231481481481481, 3.53116222076731],
    [13, 3.61111111111111, 1.2, 0.803755144032923, 5.59186092118124, 0.231481481481482, 3.7626437022488],
    [14, 3.88888888888889, 1.2, 0.868055555555555, 6.4599164767368, 0.231481481481481, 3.99412518373028],
    [15, 4.16666666666667, 1.2, 0.932355967078191, 7.39227244381499, 0.231481481481482, 4.22560666521176],
    [16, 4.44444444444444, 1.2, 0.996656378600823, 8.38892882241581, 0.231481481481481, 4.45708814669324],
    [17, 4.72222222222222, 1.2, 1.06095679012346, 9.44988561253927, 0.231481481481481, 4.68856962817472],
    [18, 5, 1.2, 1.12525720164609, 10.5751428141854, 0.231481481481481, 4.9200511096562],
    [19, 5.27777777777778, 1.2, 1.18955761316872, 11.7647004273541, 0.231481481481481, 5.15153259113768],
    [20, 5.55555555555556, 1.2, 1.25385802469136, 13.0185584520454, 0.231481481481481, 5.38301407261916],
    [21, 5.83333333333333, 1.2, 1.31815843621399, 14.3367168882594, 0.231481481481481, 5.61449555410064],
    [22, 6.11111111111111, 1.2, 1.38245884773663, 15.7191757359961, 0.231481481481481, 5.84597703558213],
    [23, 6.38888888888889, 1.2, 1.44675925925926, 17.1659349952553, 0.231481481481481, 6.07745851706361],
    [24, 6.66666666666667, 1.2, 1.51105967078189, 18.6769946660372, 0.231481481481481, 6.30893999854509],
    [25, 6.94444444444444, 1.2, 1.57536008230453, 20.2523547483417, 0.231481481481482, 6.54042148002657],
    [26, 7.22222222222222, 1.17751272394255, 1.6551689274073, 21.907523675749, 0.233670907398677, 6.77409238742525],
    [27, 7.5, 1.13275099263672, 1.77014690725209, 23.6776705830011, 0.240472787400284, 7.01456517482553],
    [28, 7.77777777777778, 1.09115530921377, 1.90827606224353, 25.5859466452447, 0.24981068451188, 7.26437585933741],
    [29, 8.05555555555556, 1.05239739270253, 2.05180313234953, 27.6377497775942, 0.259175132507308, 7.52355099184472],
    [30, 8.33333333333333, 1.01619273292804, 2.2007593864999, 29.8385091640941, 0.268567247166089, 7.79211823901081],
    [31, 8.61111111111111, 0.982293530705607, 2.35517762073525, 32.1936867848293, 0.277988178185145, 8.07010641719595],
    [32, 8.88888888888889, 0.950482961748661, 2.5150922158301, 34.7087790006594, 0.287439110380582, 8.35754552757653],
    [33, 9.16666666666667, 0.920570483502321, 2.68053919651272, 37.3893181971722, 0.296921264844485, 8.65446679242102],
    [34, 9.44444444444444, 0.892387970182871, 2.85155629237461, 40.2408744895468, 0.306435900076078, 8.9609026924971],
    [35, 9.72222222222222, 0.86578651038188, 3.02818300056539, 43.2690574901122, 0.315984313102475, 9.27688700559957],
    [36, 10, 0.84063373840296, 3.21046065037591, 46.4795181404881, 0.325567840601501, 9.60245484620107],
    [37, 10.2777777777778, 0.816811598354743, 3.39843246981612, 49.8779506103042, 0.335187860036659, 9.93764270623773],
    [38, 10.5555555555556, 0.79421446128179, 3.59214365430109, 53.4700942646053, 0.344845790812904, 10.2824884970506],
    [39, 10.8333333333333, 0.772747531967684, 3.79164143756323, 57.2617357021685, 0.354543095460458, 10.6370315925111],
    [40, 11.1111111111111, 0.752325494717649, 3.99697516491672, 61.2587108670852, 0.36428128085317, 11.0013128733643],
    [41, 11.3888888888889, 0.732871357319327, 4.20819636900525, 65.4669072360905, 0.374061899467133, 11.3753747728314],
    [42, 11.6666666666667, 0.714315460152011, 4.42535884817173, 69.8922660842622, 0.383886550684778, 11.7592613235162],
    [43, 11.9444444444444, 0.696594623559713, 4.64851874759775, 74.54078483186, 0.393756882149456, 12.1530182056656],
    [44, 12.2222222222222, 0.679651411491535, 4.87773464336483, 79.4185194752248, 0.403674591175019, 12.5566927968407],
    [45, 12.5, 0.663433493323323, 5.11306762960301, 84.5315871048278, 0.413641426215076, 12.9703342230557],
    [46, 12.7777777777778, 0.647893088919982, 5.35458140889635, 89.8861685137242, 0.423659188396194, 13.3939934114519],
    [47, 13.0555555555556, 0.632986484540894, 5.60234238612839, 95.4885108998526, 0.433729733119619, 13.8277231445715],
    [48, 13.3333333333333, 0.618673609257156, 5.85641976595839, 101.344930665811, 0.443854971735793, 14.2715781163073],
    [49, 13.6111111111111, 0.604917663236104, 6.11688565413154, 107.461816319942, 0.454036873296362, 14.7256149896037],
    [50, 13.8888888888889, 0.591684790631688, 6.38381516283678, 113.845631482779, 0.464277466388129, 15.1898924559918],
    [51, 14.1666666666667, 0.578943790958331, 6.65728652033933, 120.502918003119, 0.474578841053893, 15.6644712970457],
    [52, 14.4444444444444, 0.566665863767808, 6.93738118512751, 127.440299188246, 0.48494315080503, 16.1494144478507],
    [53, 14.7222222222222, 0.554824382230629, 7.22418396482702, 134.664483153073, 0.495372614730996, 16.6447870625817],
    [54, 15, 0.543394691875044, 7.51778314015312, 142.182266293226, 0.505869519711238, 17.150656582293],
    [55, 15.2777777777778, 0.532353931281792, 7.81827059418348, 150.00053688741, 0.516436222735056, 17.667092805028],
    [56, 15.5555555555556, 0.521680871990133, 8.12574194725641, 158.126278834666, 0.527075153335551, 18.1941679583636],
    [57, 15.8333333333333, 0.511355775255868, 8.44029669781191, 166.566575532478, 0.537788816143768, 18.7319567745074],
    [58, 16.1111111111111, 0.501360263627504, 8.76203836951909, 175.328613901997, 0.54857979356989, 19.2805365680772],
    [59, 16.3888888888889, 0.491677205582461, 9.09107466504767, 184.419688567045, 0.55945074861832, 19.8399873166956],
    [60, 16.6666666666667, 0.482290611699664, 9.42751762687085, 193.847206193916, 0.570404427844284, 20.4103917445399],
    [61, 16.9444444444444, 0.473185541044667, 9.77148380550381, 203.618689999419, 0.581443664459731, 20.9918354089996],
    [62, 17.2222222222222, 0.464348016614279, 10.1230944356162, 213.741784435036, 0.592571381597048, 21.5844067905966],
    [63, 17.5, 0.45576494883408, 10.4824756204747, 224.22426005551, 0.603790595739342, 22.188197386336],
    [64, 17.7777777777778, 0.447424066228055, 10.8497585252133, 235.074018580724, 0.615104420327053, 22.803301806663],
    [65, 18.0555555555556, 0.439313852487942, 11.2250795794507, 246.299098160174, 0.62651606955074, 23.4298178762138],
    [66, 18.3333333333333, 0.431423489263556, 11.6085806898159, 257.90767884999, 0.638028862341026, 24.0678467385548],
    [67, 18.6111111111111, 0.423742804076363, 12.0004094629735, 269.908088312964, 0.649646226566989, 24.7174929651218],
    [68, 18.8888888888889, 0.416262222828922, 12.4007194397912, 282.308807752755, 0.66137170345553, 25.3788646685773],
    [69, 19.1666666666667, 0.408972726443932, 12.8096703413198, 295.118478094075, 0.673208952244543, 26.0520736208219],
    [70, 19.4444444444444, 0.401865811219938, 13.2274283273168, 308.345906421392, 0.685161755084036, 26.7372353759059],
    [71, 19.7222222222222, 0.394933452537257, 13.6541662680865, 322.000072689478, 0.697234022200162, 27.434469398106],
    [72, 20, 0.388168071588411, 14.0900640304632, 336.090136719941, 0.709429797338007, 28.1438991954441],
    [73, 20.2777777777778, 0.381562504843043, 14.5353087788304, 350.625445498772, 0.721753263500545, 28.8656524589446],
    [74, 20.5555555555556, 0.375109975988655, 14.9900952921207, 365.615540790892, 0.734208749001828, 29.5998612079464],
    [75, 20.8333333333333, 0.36880407011608, 15.4546262978187, 381.070167088711, 0.746800733854326, 30.3466619418008],
    [76, 21.1111111111111, 0.362638709942952, 15.9291128240557, 396.999279912767, 0.759533856511264, 31.106195798312],
    [77, 21.3888888888889, 0.356608133889882, 16.4137745709725, 413.413054483739, 0.772412920986941, 31.878608719299],
    [78, 21.6666666666667, 0.350706875843093, 16.9088403026044, 430.321894786344, 0.78544290437904, 32.664051623678],
    [79, 21.9444444444444, 0.344929746454062, 17.4145482606424, 447.736443046986, 0.79862896481927, 33.4626805884973],
    [80, 22.2222222222222, 0.33927181584169, 17.9311466015265, 465.667589648512, 0.811976449880442, 34.2746570383777],
    [81, 22.5, 0.333728397575801, 18.458893858428, 484.12648350694, 0.825490905470073, 35.1001479438478],
    [82, 22.7777777777778, 0.328295033832565, 18.9980594298166, 503.124542936757, 0.83917808524343, 35.9393260290912],
    [83, 23.0555555555556, 0.322967481623036, 19.5489240964142, 522.673467033171, 0.853043960570804, 36.792369989662],
    [84, 23.3333333333333, 0.317741700005363, 20.1117805685035, 542.785247601675, 0.867094731097159, 37.6594647207592],
    [85, 23.6111111111111, 0.312613838199662, 20.6869340656905, 563.472181667365, 0.881336835934741, 38.5408015566939],
    [86, 23.8888888888889, 0.307580224532091, 21.2747029314135, 584.746884598779, 0.895776965533202, 39.4365785222271],
    [87, 24.1666666666667, 0.302637356141398, 21.8754192846523, 606.622303883431, 0.910422074274541, 40.3470005965017],
    [88, 24.4444444444444, 0.297781889387299, 22.489429711506, 629.111733594937, 0.92527939384482, 41.2722799903465],
    [89, 24.7222222222222, 0.293010630905475, 23.1170959995217, 652.228829594459, 0.940356447438173, 42.2126364377847],
    [90, 25, 0.288320529258911, 23.7587959179002, 675.987625512359, 0.955661064854085, 43.1682975026387],
    [91, 25.2777777777778, 0.283708667139693, 24.414924046961, 700.40254955932, 0.971201398553148, 44.1394989011919],
    [92, 25.5555555555556, 0.279172254079379, 25.085892660545, 725.488442219865, 0.986985940742748, 45.1264848419346],
    [93, 25.8333333333333, 0.274708619629678, 25.7721326653408, 751.260574885206, 1.00302354157002, 46.1295083835047],
    [94, 26.1111111111111, 0.270315206978394, 26.4740946014731, 777.734669486679, 1.01932342850592, 47.1488318120106],
    [95, 26.3888888888889, 0.265989566968583, 27.1922497090716, 804.92691919575, 1.03589522701225, 48.1847270390228],
    [96, 26.6666666666667, 0.261729352491505, 27.9270910659518, 832.854010261702, 1.05274898259085, 49.2374760216137],
    [97, 26.9444444444444, 0.257532313226412, 28.6791348020132, 861.533145063715, 1.06989518432381, 50.3073712059375],
    [98, 27.2222222222222, 0.25339629070238, 29.4489213964488, 890.982066460164, 1.08734479002273, 51.3947159959602],
    [99, 27.5, 0.249319213659433, 30.237017064448, 921.219083524612, 1.10510925311688, 52.4998252490771],
    [100, 27.7777777777778, 0.245299093687993, 31.0440152406641, 952.263098765276, 1.12320055142102, 53.6230258004981],
    [101, 28.0555555555556, 0.241334021127377, 31.8705381674311, 984.133636932708, 1.14163121793783, 54.7646570184359],
    [102, 28.3333333333333, 0.237422161205556, 32.7172385964532, 1016.85087552916, 1.16041437386435, 55.9250713923003],
    [103, 28.6111111111111, 0.233561750403783, 33.5848016135383, 1050.4356771427, 1.17956376398769, 57.104635156288],
    [104, 28.8888888888889, 0.229751093030957, 34.4739465968896, 1084.90962373959, 1.19909379467442, 58.3037289509624],
    [105, 29.1666666666667, 0.22598855799373, 35.3854293204847, 1120.29505306007, 1.21901957467698, 59.5227485256394],
    [106, 29.4444444444444, 0.22227257574945, 36.3200442152509, 1156.61509727532, 1.23935695900383, 60.7621054846432],
    [107, 29.7222222222222, 0.218601635429955, 37.2786268020046, 1193.89372407733, 1.2601225961241, 62.0222280807673],
    [108, 30, 0.214974282125161, 38.2620563115818, 1232.15578038891, 1.28133397880646, 63.3035620595737],
    [109, 30.2777777777778, 0.211389114316184, 39.2712585091655, 1271.42703889808, 1.30300949892162, 64.6065715584954],
    [110, 30.5555555555556, 0.207844781448459, 40.3072087416197, 1311.7342476397, 1.3251685065738, 65.9317400650692],
    [111, 30.8333333333333, 0.204339981636058, 41.3709352286416, 1353.10518286834, 1.34783137396479, 67.279571439034],
    [112, 31.1111111111111, 0.200873459488975, 42.4635226207797, 1395.56870548912, 1.37101956443773, 68.6505910034717],
    [113, 31.3888888888889, 0.19744400405579, 43.586115849927, 1439.15482133904, 1.39475570719766, 70.0453467106694],
    [114, 31.6666666666667, 0.194050446874608, 44.7399243006875, 1483.89474563973, 1.41906367825969, 71.4644103889291],
    [115, 31.9444444444444, 0.190691660125684, 45.9262263342713, 1529.820971974, 1.44396868823909, 72.9083790771681],
    [116, 32.2222222222222, 0.187366554879612, 47.1463742001332, 1576.96734617414, 1.46949737766649, 74.3778764548346],
    [117, 32.5, 0.184074079435339, 48.401799374713, 1625.36914554885, 1.49567792059199, 75.8735543754266],
    [118, 32.7777777777778, 0.180813217742697, 49.6940183711995, 1675.06316392005, 1.52254013733038, 77.396094512757],
    [119, 33.0555555555556, 0.177582987904464, 51.0246390695348, 1726.08780298958, 1.55011561730231, 78.9462101300593],
    [120, 33.3333333333333, 0.174382440753326, 52.395367621806, 1778.48317061139, 1.57843785304185, 80.5246479831012],
    [121, 33.6111111111111, 0.1712106584994, 53.8080159949796, 1832.29118660637, 1.607542386572, 82.1321903696732],
    [122, 33.8888888888889, 0.168066753444276, 55.2645102206589, 1887.55569682703, 1.63746696950101, 83.7696573391742],
    [123, 34.1666666666667, 0.164949866757783, 56.7668994303769, 1944.3225962574, 1.66825173836211, 85.4379090775363],
    [124, 34.4444444444444, 0.16185916731395, 58.317365765126, 2002.63996202253, 1.69993940691865, 87.1378484844549],
    [125, 34.7222222222222, 0.158793850582838, 59.9182352593585, 2062.55819728189, 1.73257547737904, 88.870423961834],
    [126, 35, 0.15575313757514, 61.5719898131413, 2124.13018709503, 1.76620847272756, 90.6366324345615],
    [127, 35.2777777777778, 0.152736273836645, 63.2812803814951, 2187.41146747653, 1.80089019267497, 92.4375226272365],
    [128, 35.5555555555556, 0.149742528489838, 65.0489415277727, 2252.4604090043, 1.83667599607828, 94.2741986233148],
    [129, 35.8333333333333, 0.146771193320069, 66.8780075085141, 2319.33841651281, 1.87362511307899, 96.1478237363937],
    [130, 36.1111111111111, 0.143821581903912, 68.7717300811434, 2388.11014659396, 1.91180099067273, 98.0596247270665] 
];

let Xtrap_accel_data = [  [0, 0, 1.22, 0, 0, 0, 0],
[1, 0.278, 1.22, 0.032, 0.032, 0.228, 0.228],
[2, 0.556, 1.22, 0.095, 0.126, 0.228, 0.455],
[3, 0.833, 1.22, 0.158, 0.285, 0.228, 0.683],
[4, 1.111, 1.22, 0.221, 0.506, 0.228, 0.911],
[5, 1.389, 1.22, 0.285, 0.791, 0.228, 1.138],
[6, 1.667, 1.22, 0.348, 1.138, 0.228, 1.366],
[7, 1.944, 1.22, 0.411, 1.55, 0.228, 1.594],
[8, 2.222, 1.22, 0.474, 2.024, 0.228, 1.821],
[9, 2.5, 1.22, 0.538, 2.561, 0.228, 2.049],
[10, 2.778, 1.21, 0.603, 3.165, 0.229, 2.278],
[11, 3.056, 1.21, 0.67, 3.834, 0.23, 2.507],
[12, 3.333, 1.21, 0.733, 4.568, 0.23, 2.737],
[13, 3.611, 1.21, 0.797, 5.365, 0.23, 2.967],
[14, 3.889, 1.21, 0.861, 6.226, 0.23, 3.196],
[15, 4.167, 1.21, 0.925, 7.15, 0.23, 3.426],
[16, 4.444, 1.21, 0.988, 8.139, 0.23, 3.655],
[17, 4.722, 1.21, 1.052, 9.191, 0.23, 3.885],
[18, 5, 1.21, 1.116, 10.307, 0.23, 4.114],
[19, 5.278, 1.21, 1.18, 11.487, 0.23, 4.344],
[20, 5.556, 1.21, 1.243, 12.73, 0.23, 4.573],
[21, 5.833, 1.21, 1.307, 14.037, 0.23, 4.803],
[22, 6.111, 1.21, 1.371, 15.408, 0.23, 5.033],
[23, 6.389, 1.21, 1.435, 16.843, 0.23, 5.262],
[24, 6.667, 1.21, 1.499, 18.342, 0.23, 5.492],
[25, 6.944, 1.21, 1.562, 19.904, 0.23, 5.721],
[26, 7.222, 1.21, 1.626, 21.53, 0.23, 5.951],
[27, 7.5, 1.21, 1.69, 23.22, 0.23, 6.18],
[28, 7.778, 1.21, 1.754, 24.974, 0.23, 6.41],
[29, 8.056, 1.21, 1.817, 26.791, 0.23, 6.64],
[30, 8.333, 1.21, 1.881, 28.672, 0.23, 6.869],
[31, 8.611, 1.21, 1.945, 30.617, 0.23, 7.099],
[32, 8.889, 1.21, 2.009, 32.626, 0.23, 7.328],
[33, 9.167, 1.21, 2.072, 34.699, 0.23, 7.558],
[34, 9.444, 1.21, 2.136, 36.835, 0.23, 7.787],
[35, 9.722, 1.21, 2.2, 39.035, 0.23, 8.017],
[36, 10, 1.21, 2.264, 41.299, 0.23, 8.247],
[37, 10.278, 1.21, 2.328, 43.626, 0.23, 8.476],
[38, 10.556, 1.21, 2.391, 46.018, 0.23, 8.706],
[39, 10.833, 1.21, 2.455, 48.473, 0.23, 8.935],
[40, 11.111, 0.96, 2.809, 51.282, 0.256, 9.191],
[41, 11.389, 0.96, 3.255, 54.537, 0.289, 9.481],
[42, 11.667, 0.96, 3.336, 57.873, 0.289, 9.77],
[43, 11.944, 0.96, 3.416, 61.288, 0.289, 10.059],
[44, 12.222, 0.96, 3.496, 64.785, 0.289, 10.349],
[45, 12.5, 0.96, 3.577, 68.362, 0.289, 10.638],
[46, 12.778, 0.96, 3.657, 72.019, 0.289, 10.927],
[47, 13.056, 0.96, 3.737, 75.756, 0.289, 11.217],
[48, 13.333, 0.96, 3.818, 79.574, 0.289, 11.506],
[49, 13.611, 0.96, 3.898, 83.472, 0.289, 11.795],
[50, 13.889, 0.96, 3.979, 87.451, 0.289, 12.085],
[51, 14.167, 0.96, 4.059, 91.51, 0.289, 12.374],
[52, 14.444, 0.96, 4.139, 95.649, 0.289, 12.664],
[53, 14.722, 0.96, 4.22, 99.869, 0.289, 12.953],
[54, 15, 0.96, 4.3, 104.169, 0.289, 13.242],
[55, 15.278, 0.96, 4.38, 108.549, 0.289, 13.532],
[56, 15.556, 0.96, 4.461, 113.01, 0.289, 13.821],
[57, 15.833, 0.96, 4.541, 117.551, 0.289, 14.11],
[58, 16.111, 0.96, 4.622, 122.173, 0.289, 14.4],
[59, 16.389, 0.96, 4.702, 126.875, 0.289, 14.689],
[60, 16.667, 0.732, 5.427, 132.302, 0.328, 15.017],
[61, 16.944, 0.732, 6.377, 138.679, 0.379, 15.397],
[62, 17.222, 0.732, 6.483, 145.162, 0.379, 15.776],
[63, 17.5, 0.732, 6.588, 151.75, 0.379, 16.156],
[64, 17.778, 0.732, 6.694, 158.443, 0.379, 16.535],
[65, 18.056, 0.732, 6.799, 165.242, 0.379, 16.915],
[66, 18.333, 0.732, 6.904, 172.147, 0.379, 17.294],
[67, 18.611, 0.732, 7.01, 179.157, 0.379, 17.674],
[68, 18.889, 0.732, 7.115, 186.272, 0.379, 18.053],
[69, 19.167, 0.732, 7.221, 193.492, 0.379, 18.433],
[70, 19.444, 0.732, 7.326, 200.819, 0.379, 18.812],
[71, 19.722, 0.59, 8.23, 209.048, 0.42, 19.232],
[72, 20, 0.59, 9.351, 218.399, 0.471, 19.703],
[73, 20.278, 0.59, 9.482, 227.881, 0.471, 20.174],
[74, 20.556, 0.59, 9.612, 237.493, 0.471, 20.645],
[75, 20.833, 0.59, 9.743, 247.236, 0.471, 21.116],
[76, 21.111, 0.59, 9.874, 257.11, 0.471, 21.586],
[77, 21.389, 0.59, 10.005, 267.115, 0.471, 22.057],
[78, 21.667, 0.59, 10.135, 277.25, 0.471, 22.528],
[79, 21.944, 0.59, 10.266, 287.516, 0.471, 22.999],
[80, 22.222, 0.59, 10.397, 297.914, 0.471, 23.47],
[81, 22.5, 0.5, 11.397, 309.311, 0.51, 23.979],
[82, 22.778, 0.5, 12.577, 321.888, 0.556, 24.535],
[83, 23.056, 0.5, 12.731, 334.619, 0.556, 25.09],
[84, 23.333, 0.5, 12.886, 347.505, 0.556, 25.646],
[85, 23.611, 0.5, 13.04, 360.545, 0.556, 26.202],
[86, 23.889, 0.5, 13.194, 373.74, 0.556, 26.757],
[87, 24.167, 0.5, 13.349, 387.088, 0.556, 27.313],
[88, 24.444, 0.5, 13.503, 400.591, 0.556, 27.868],
[89, 24.722, 0.5, 13.657, 414.249, 0.556, 28.424],
[90, 25, 0.5, 13.812, 428.061, 0.556, 28.979],
[91, 25.278, 0.32, 17.032, 445.092, 0.678, 29.657],
[92, 25.556, 0.32, 22.063, 467.155, 0.868, 30.525],
[93, 25.833, 0.32, 22.304, 489.46, 0.868, 31.393],
[94, 26.111, 0.32, 22.545, 512.005, 0.868, 32.261],
[95, 26.389, 0.32, 22.786, 534.791, 0.868, 33.129],
[96, 26.667, 0.32, 23.028, 557.819, 0.868, 33.997],
[97, 26.944, 0.32, 23.269, 581.088, 0.868, 34.865],
[98, 27.222, 0.32, 23.51, 604.598, 0.868, 35.733],
[99, 27.5, 0.32, 23.751, 628.349, 0.868, 36.601],
[100, 27.778, 0.267, 26.158, 654.507, 0.946, 37.548],
[101, 28.056, 0.267, 29.044, 683.55, 1.04, 38.588],
[102, 28.333, 0.267, 29.333, 712.883, 1.04, 39.628],
[103, 28.611, 0.267, 29.622, 742.505, 1.04, 40.669],
[104, 28.889, 0.267, 29.911, 772.415, 1.04, 41.709],
[105, 29.167, 0.267, 30.2, 802.615, 1.04, 42.75],
[106, 29.444, 0.267, 30.489, 833.103, 1.04, 43.79],
[107, 29.722, 0.267, 30.778, 863.881, 1.04, 44.83],
[108, 30, 0.267, 31.066, 894.947, 1.04, 45.871],
[109, 30.278, 0.267, 31.355, 926.303, 1.04, 46.911],
[110, 30.556, 0.175, 38.231, 964.534, 1.257, 48.168],
[111, 30.833, 0.175, 48.721, 1013.255, 1.587, 49.755],
[112, 31.111, 0.175, 49.162, 1062.417, 1.587, 51.343],
[113, 31.389, 0.175, 49.603, 1112.02, 1.587, 52.93],
[114, 31.667, 0.175, 50.044, 1162.065, 1.587, 54.517],
[115, 31.944, 0.175, 50.485, 1212.55, 1.587, 56.104],
[116, 32.222, 0.12, 60.421, 1272.97, 1.883, 57.988],
[117, 32.5, 0.12, 74.91, 1347.88, 2.315, 60.302],
[118, 32.778, 0.12, 75.553, 1423.433, 2.315, 62.617],
[119, 33.056, 0.12, 76.196, 1499.629, 2.315, 64.932],
[120, 33.333, 0.12, 76.839, 1576.468, 2.315, 67.247],
[121, 33.611, 0.096, 86.291, 1662.759, 2.578, 69.825],
[122, 33.889, 0.096, 98.168, 1760.926, 2.909, 72.734],
[123, 34.167, 0.096, 98.976, 1859.902, 2.909, 75.642],
[124, 34.444, 0.096, 99.783, 1959.685, 2.909, 78.551],
[125, 34.722, 0.096, 100.591, 2060.277, 2.909, 81.46],
[126, 35, 0.096, 101.399, 2161.676, 2.909, 84.368],
[127, 35.278, 0.096, 102.207, 2263.884, 2.909, 87.277],
[128, 35.556, 0.096, 103.015, 2366.899, 2.909, 90.186],
[129, 35.833, 0.096, 103.823, 2470.722, 2.909, 93.094],
[130, 36.111, 0.096, 104.631, 2575.353, 2.909, 96.003]
];

let Sprinter_accel_data = [  [0, 0, 0.926, 0, 0, 0, 0],
[1, 0.278, 0.926, 0.042, 0.042, 0.3, 0.3],
[2, 0.556, 0.926, 0.125, 0.167, 0.3, 0.6],
[3, 0.833, 0.926, 0.208, 0.375, 0.3, 0.9],
[4, 1.111, 0.926, 0.292, 0.667, 0.3, 1.2],
[5, 1.389, 0.926, 0.375, 1.042, 0.3, 1.5],
[6, 1.667, 0.926, 0.458, 1.5, 0.3, 1.8],
[7, 1.944, 0.926, 0.542, 2.042, 0.3, 2.1],
[8, 2.222, 0.926, 0.625, 2.666, 0.3, 2.4],
[9, 2.5, 0.926, 0.708, 3.375, 0.3, 2.7],
[10, 2.778, 0.926, 0.792, 4.166, 0.3, 3],
[11, 3.056, 0.68, 1.009, 5.175, 0.346, 3.346],
[12, 3.333, 0.68, 1.305, 6.48, 0.408, 3.754],
[13, 3.611, 0.68, 1.418, 7.899, 0.408, 4.163],
[14, 3.889, 0.68, 1.532, 9.43, 0.408, 4.571],
[15, 4.167, 0.68, 1.645, 11.076, 0.408, 4.98],
[16, 4.444, 0.68, 1.759, 12.835, 0.408, 5.388],
[17, 4.722, 0.68, 1.872, 14.707, 0.408, 5.797],
[18, 5, 0.68, 1.986, 16.693, 0.408, 6.205],
[19, 5.278, 0.68, 2.099, 18.792, 0.408, 6.614],
[20, 5.556, 0.68, 2.213, 21.005, 0.408, 7.022],
[21, 5.833, 0.55, 2.572, 23.577, 0.452, 7.474],
[22, 6.111, 0.55, 3.016, 26.593, 0.505, 7.979],
[23, 6.389, 0.55, 3.157, 29.749, 0.505, 8.484],
[24, 6.667, 0.55, 3.297, 33.046, 0.505, 8.989],
[25, 6.944, 0.55, 3.437, 36.483, 0.505, 9.494],
[26, 7.222, 0.55, 3.577, 40.061, 0.505, 9.999],
[27, 7.5, 0.55, 3.718, 43.779, 0.505, 10.504],
[28, 7.778, 0.55, 3.858, 47.637, 0.505, 11.009],
[29, 8.056, 0.55, 3.998, 51.635, 0.505, 11.514],
[30, 8.333, 0.55, 4.139, 55.774, 0.505, 12.019],
[31, 8.611, 0.46, 4.66, 60.434, 0.55, 12.569],
[32, 8.889, 0.46, 5.284, 65.718, 0.604, 13.173],
[33, 9.167, 0.46, 5.452, 71.169, 0.604, 13.777],
[34, 9.444, 0.46, 5.619, 76.788, 0.604, 14.381],
[35, 9.722, 0.46, 5.787, 82.575, 0.604, 14.985],
[36, 10, 0.46, 5.955, 88.53, 0.604, 15.589],
[37, 10.278, 0.46, 6.123, 94.653, 0.604, 16.193],
[38, 10.556, 0.46, 6.29, 100.943, 0.604, 16.796],
[39, 10.833, 0.46, 6.458, 107.401, 0.604, 17.4],
[40, 11.111, 0.46, 6.626, 114.027, 0.604, 18.004],
[41, 11.389, 0.34, 7.813, 121.839, 0.694, 18.699],
[42, 11.667, 0.34, 9.418, 131.257, 0.817, 19.516],
[43, 11.944, 0.34, 9.645, 140.902, 0.817, 20.333],
[44, 12.222, 0.34, 9.872, 150.774, 0.817, 21.15],
[45, 12.5, 0.34, 10.099, 160.873, 0.817, 21.967],
[46, 12.778, 0.34, 10.326, 171.199, 0.817, 22.784],
[47, 13.056, 0.34, 10.553, 181.752, 0.817, 23.601],
[48, 13.333, 0.34, 10.78, 192.532, 0.817, 24.418],
[49, 13.611, 0.34, 11.007, 203.539, 0.817, 25.235],
[50, 13.889, 0.34, 11.234, 214.772, 0.817, 26.052],
[51, 14.167, 0.347, 11.344, 226.116, 0.809, 26.86],
[52, 14.444, 0.347, 11.452, 237.568, 0.801, 27.661],
[53, 14.722, 0.347, 11.674, 249.242, 0.801, 28.461],
[54, 15, 0.347, 11.897, 261.138, 0.801, 29.262],
[55, 15.278, 0.347, 12.119, 273.257, 0.801, 30.062],
[56, 15.556, 0.347, 12.341, 285.599, 0.801, 30.863],
[57, 15.833, 0.347, 12.564, 298.162, 0.801, 31.663],
[58, 16.111, 0.347, 12.786, 310.948, 0.801, 32.464],
[59, 16.389, 0.347, 13.008, 323.956, 0.801, 33.264],
[60, 16.667, 0.347, 13.231, 337.187, 0.801, 34.065],
[61, 16.944, 0.277, 14.962, 352.149, 0.89, 34.955],
[62, 17.222, 0.277, 17.131, 369.281, 1.003, 35.958],
[63, 17.5, 0.277, 17.41, 386.69, 1.003, 36.961],
[64, 17.778, 0.277, 17.688, 404.379, 1.003, 37.964],
[65, 18.056, 0.277, 17.967, 422.346, 1.003, 38.966],
[66, 18.333, 0.277, 18.246, 440.591, 1.003, 39.969],
[67, 18.611, 0.277, 18.524, 459.116, 1.003, 40.972],
[68, 18.889, 0.277, 18.803, 477.918, 1.003, 41.975],
[69, 19.167, 0.277, 19.081, 496.999, 1.003, 42.978],
[70, 19.444, 0.277, 19.36, 516.359, 1.003, 43.98],
[71, 19.722, 0.228, 21.544, 537.903, 1.1, 45.08],
[72, 20, 0.228, 24.197, 562.1, 1.218, 46.299],
[73, 20.278, 0.228, 24.536, 586.636, 1.218, 47.517],
[74, 20.556, 0.228, 24.874, 611.51, 1.218, 48.735],
[75, 20.833, 0.228, 25.213, 636.723, 1.218, 49.954],
[76, 21.111, 0.228, 25.551, 662.273, 1.218, 51.172],
[77, 21.389, 0.228, 25.889, 688.163, 1.218, 52.39],
[78, 21.667, 0.228, 26.228, 714.391, 1.218, 53.609],
[79, 21.944, 0.228, 26.566, 740.957, 1.218, 54.827],
[80, 22.222, 0.228, 26.905, 767.862, 1.218, 56.045],
[81, 22.5, 0.213, 28.17, 796.031, 1.26, 57.305],
[82, 22.778, 0.213, 29.524, 825.555, 1.304, 58.609],
[83, 23.056, 0.213, 29.886, 855.441, 1.304, 59.913],
[84, 23.333, 0.213, 30.248, 885.69, 1.304, 61.218],
[85, 23.611, 0.213, 30.611, 916.3, 1.304, 62.522],
[86, 23.889, 0.213, 30.973, 947.273, 1.304, 63.826],
[87, 24.167, 0.213, 31.335, 978.608, 1.304, 65.13],
[88, 24.444, 0.213, 31.697, 1010.306, 1.304, 66.434],
[89, 24.722, 0.213, 32.06, 1042.365, 1.304, 67.738],
[90, 25, 0.213, 32.422, 1074.787, 1.304, 69.042],
[91, 25.278, 0.136, 40.017, 1114.804, 1.592, 70.634],
[92, 25.556, 0.136, 51.913, 1166.718, 2.042, 72.677],
[93, 25.833, 0.136, 52.48, 1219.198, 2.042, 74.719],
[94, 26.111, 0.136, 53.048, 1272.246, 2.042, 76.762],
[95, 26.389, 0.136, 53.615, 1325.861, 2.042, 78.804],
[96, 26.667, 0.136, 54.183, 1380.044, 2.042, 80.847],
[97, 26.944, 0.136, 54.75, 1434.794, 2.042, 82.889],
[98, 27.222, 0.136, 55.317, 1490.111, 2.042, 84.931],
[99, 27.5, 0.136, 55.885, 1545.995, 2.042, 86.974],
[100, 27.778, 0.136, 56.452, 1602.447, 2.042, 89.016],
[101, 28.056, 0.132, 57.87, 1660.318, 2.073, 91.089],
[102, 28.333, 0.132, 59.332, 1719.65, 2.104, 93.194],
[103, 28.611, 0.132, 59.916, 1779.566, 2.104, 95.298],
[104, 28.889, 0.132, 60.501, 1840.067, 2.104, 97.403],
[105, 29.167, 0.132, 61.085, 1901.152, 2.104, 99.507],
[106, 29.444, 0.132, 61.67, 1962.822, 2.104, 101.611],
[107, 29.722, 0.132, 62.254, 2025.076, 2.104, 103.716],
[108, 30, 0.132, 62.839, 2087.916, 2.104, 105.82],
[109, 30.278, 0.132, 63.424, 2151.339, 2.104, 107.924],
[110, 30.556, 0.132, 64.008, 2215.347, 2.104, 110.029],
[111, 30.833, 0.094, 75.453, 2290.801, 2.458, 112.487],
[112, 31.111, 0.094, 91.525, 2382.326, 2.955, 115.442],
[113, 31.389, 0.094, 92.346, 2474.672, 2.955, 118.397],
[114, 31.667, 0.094, 93.167, 2567.84, 2.955, 121.352],
[115, 31.944, 0.094, 93.988, 2661.828, 2.955, 124.307],
[116, 32.222, 0.094, 94.809, 2756.637, 2.955, 127.262],
[117, 32.5, 0.094, 95.63, 2852.266, 2.955, 130.218],
[118, 32.778, 0.094, 96.451, 2948.717, 2.955, 133.173],
[119, 33.056, 0.094, 97.271, 3045.988, 2.955, 136.128],
[120, 33.333, 0.094, 98.092, 3144.081, 2.955, 139.083],
[121, 33.611, 0.072, 111.82, 3255.901, 3.341, 142.423],
[122, 33.889, 0.072, 129.668, 3385.569, 3.842, 146.265],
[123, 34.167, 0.072, 130.735, 3516.304, 3.842, 150.107],
[124, 34.444, 0.072, 131.803, 3648.107, 3.842, 153.949],
[125, 34.722, 0.072, 132.87, 3780.976, 3.842, 157.792],
[126, 35, 0.072, 133.937, 3914.913, 3.842, 161.634],
[127, 35.278, 0.072, 135.004, 4049.918, 3.842, 165.476],
[128, 35.556, 0.072, 136.071, 4185.989, 3.842, 169.318],
[129, 35.833, 0.072, 137.139, 4323.128, 3.842, 173.16],
[130, 36.111, 0.072, 138.206, 4461.333, 3.842, 177.002]
];

let Vlocity_accel_data = [  [0, 0, 0.842, 0, 0, 0, 0],
[1, 0.278, 0.842, 0.046, 0.046, 0.33, 0.33],
[2, 0.556, 0.842, 0.138, 0.183, 0.33, 0.66],
[3, 0.833, 0.842, 0.229, 0.413, 0.33, 0.99],
[4, 1.111, 0.842, 0.321, 0.733, 0.33, 1.32],
[5, 1.389, 0.842, 0.413, 1.146, 0.33, 1.65],
[6, 1.667, 0.842, 0.504, 1.65, 0.33, 1.98],
[7, 1.944, 0.842, 0.596, 2.246, 0.33, 2.31],
[8, 2.222, 0.842, 0.688, 2.933, 0.33, 2.64],
[9, 2.5, 0.842, 0.779, 3.713, 0.33, 2.97],
[10, 2.778, 0.842, 0.871, 4.583, 0.33, 3.3],
[11, 3.056, 0.747, 1.02, 5.603, 0.35, 3.65],
[12, 3.333, 0.747, 1.188, 6.792, 0.372, 4.022],
[13, 3.611, 0.747, 1.292, 8.083, 0.372, 4.394],
[14, 3.889, 0.747, 1.395, 9.478, 0.372, 4.766],
[15, 4.167, 0.747, 1.498, 10.977, 0.372, 5.138],
[16, 4.444, 0.747, 1.602, 12.578, 0.372, 5.51],
[17, 4.722, 0.747, 1.705, 14.283, 0.372, 5.882],
[18, 5, 0.747, 1.808, 16.092, 0.372, 6.254],
[19, 5.278, 0.747, 1.912, 18.003, 0.372, 6.626],
[20, 5.556, 0.747, 2.015, 20.018, 0.372, 6.998],
[21, 5.833, 0.691, 2.2, 22.219, 0.386, 7.384],
[22, 6.111, 0.691, 2.401, 24.62, 0.402, 7.786],
[23, 6.389, 0.691, 2.513, 27.132, 0.402, 8.188],
[24, 6.667, 0.691, 2.624, 29.756, 0.402, 8.59],
[25, 6.944, 0.691, 2.736, 32.492, 0.402, 8.992],
[26, 7.222, 0.691, 2.848, 35.34, 0.402, 9.394],
[27, 7.5, 0.691, 2.959, 38.299, 0.402, 9.796],
[28, 7.778, 0.691, 3.071, 41.37, 0.402, 10.198],
[29, 8.056, 0.691, 3.183, 44.552, 0.402, 10.6],
[30, 8.333, 0.691, 3.294, 47.846, 0.402, 11.002],
[31, 8.611, 0.644, 3.526, 51.373, 0.416, 11.418],
[32, 8.889, 0.644, 3.776, 55.148, 0.432, 11.85],
[33, 9.167, 0.644, 3.895, 59.044, 0.431, 12.281],
[34, 9.444, 0.644, 4.015, 63.059, 0.432, 12.713],
[35, 9.722, 0.644, 4.135, 67.194, 0.431, 13.144],
[36, 10, 0.644, 4.255, 71.449, 0.432, 13.576],
[37, 10.278, 0.644, 4.375, 75.824, 0.431, 14.007],
[38, 10.556, 0.644, 4.495, 80.319, 0.432, 14.439],
[39, 10.833, 0.644, 4.615, 84.934, 0.432, 14.87],
[40, 11.111, 0.644, 4.735, 89.668, 0.431, 15.302],
[41, 11.389, 0.518, 5.379, 95.047, 0.478, 15.78],
[42, 11.667, 0.518, 6.179, 101.226, 0.536, 16.316],
[43, 11.944, 0.518, 6.328, 107.554, 0.536, 16.852],
[44, 12.222, 0.518, 6.477, 114.03, 0.536, 17.388],
[45, 12.5, 0.518, 6.626, 120.656, 0.536, 17.924],
[46, 12.778, 0.518, 6.774, 127.43, 0.536, 18.46],
[47, 13.056, 0.518, 6.923, 134.354, 0.536, 18.996],
[48, 13.333, 0.518, 7.072, 141.426, 0.536, 19.532],
[49, 13.611, 0.518, 7.221, 148.647, 0.536, 20.068],
[50, 13.889, 0.518, 7.37, 156.017, 0.536, 20.604],
[51, 14.167, 0.43, 8.219, 164.236, 0.586, 21.19],
[52, 14.444, 0.43, 9.241, 173.477, 0.646, 21.836],
[53, 14.722, 0.43, 9.421, 182.898, 0.646, 22.482],
[54, 15, 0.43, 9.6, 192.498, 0.646, 23.128],
[55, 15.278, 0.43, 9.78, 202.278, 0.646, 23.774],
[56, 15.556, 0.43, 9.959, 212.237, 0.646, 24.42],
[57, 15.833, 0.43, 10.139, 222.376, 0.646, 25.066],
[58, 16.111, 0.43, 10.318, 232.694, 0.646, 25.712],
[59, 16.389, 0.43, 10.498, 243.191, 0.646, 26.358],
[60, 16.667, 0.43, 10.677, 253.868, 0.646, 27.004],
[61, 16.944, 0.395, 11.315, 265.183, 0.673, 27.677],
[62, 17.222, 0.395, 12.01, 277.193, 0.703, 28.38],
[63, 17.5, 0.395, 12.205, 289.398, 0.703, 29.083],
[64, 17.778, 0.395, 12.4, 301.798, 0.703, 29.786],
[65, 18.056, 0.395, 12.595, 314.393, 0.703, 30.489],
[66, 18.333, 0.395, 12.791, 327.184, 0.703, 31.192],
[67, 18.611, 0.395, 12.986, 340.17, 0.703, 31.895],
[68, 18.889, 0.395, 13.181, 353.351, 0.703, 32.598],
[69, 19.167, 0.395, 13.377, 366.728, 0.703, 33.301],
[70, 19.444, 0.395, 13.572, 380.3, 0.703, 34.004],
[71, 19.722, 0.273, 16.287, 396.586, 0.832, 34.836],
[72, 20, 0.273, 20.219, 416.805, 1.018, 35.854],
[73, 20.278, 0.273, 20.501, 437.306, 1.018, 36.872],
[74, 20.556, 0.273, 20.784, 458.091, 1.018, 37.89],
[75, 20.833, 0.273, 21.067, 479.158, 1.018, 38.908],
[76, 21.111, 0.273, 21.35, 500.507, 1.018, 39.926],
[77, 21.389, 0.273, 21.633, 522.14, 1.018, 40.944],
[78, 21.667, 0.273, 21.915, 544.055, 1.018, 41.962],
[79, 21.944, 0.273, 22.198, 566.253, 1.018, 42.98],
[80, 22.222, 0.273, 22.481, 588.734, 1.018, 43.998],
[81, 22.5, 0.262, 23.245, 611.979, 1.04, 45.037],
[82, 22.778, 0.262, 24.043, 636.022, 1.062, 46.099],
[83, 23.056, 0.262, 24.337, 660.359, 1.062, 47.161],
[84, 23.333, 0.262, 24.633, 684.992, 1.062, 48.223],
[85, 23.611, 0.262, 24.928, 709.919, 1.062, 49.285],
[86, 23.889, 0.262, 25.223, 735.142, 1.062, 50.347],
[87, 24.167, 0.262, 25.517, 760.659, 1.062, 51.409],
[88, 24.444, 0.262, 25.813, 786.472, 1.062, 52.471],
[89, 24.722, 0.262, 26.108, 812.579, 1.062, 53.533],
[90, 25, 0.262, 26.403, 838.982, 1.062, 54.595],
[91, 25.278, 0.222, 28.879, 867.861, 1.149, 55.744],
[92, 25.556, 0.222, 31.796, 899.657, 1.251, 56.995],
[93, 25.833, 0.222, 32.144, 931.801, 1.251, 58.246],
[94, 26.111, 0.222, 32.491, 964.292, 1.251, 59.497],
[95, 26.389, 0.222, 32.839, 997.131, 1.251, 60.748],
[96, 26.667, 0.222, 33.186, 1030.317, 1.251, 61.999],
[97, 26.944, 0.222, 33.534, 1063.851, 1.251, 63.25],
[98, 27.222, 0.222, 33.881, 1097.732, 1.251, 64.501],
[99, 27.5, 0.222, 34.229, 1131.961, 1.251, 65.752],
[100, 27.778, 0.222, 34.576, 1166.537, 1.251, 67.003],
[101, 28.056, 0.21, 35.901, 1202.437, 1.286, 68.289],
[102, 28.333, 0.21, 37.301, 1239.739, 1.323, 69.612],
[103, 28.611, 0.21, 37.669, 1277.407, 1.323, 70.935],
[104, 28.889, 0.21, 38.036, 1315.444, 1.323, 72.258],
[105, 29.167, 0.21, 38.404, 1353.847, 1.323, 73.581],
[106, 29.444, 0.21, 38.771, 1392.619, 1.323, 74.904],
[107, 29.722, 0.21, 39.139, 1431.757, 1.323, 76.227],
[108, 30, 0.21, 39.506, 1471.264, 1.323, 77.55],
[109, 30.278, 0.21, 39.874, 1511.137, 1.323, 78.873],
[110, 30.556, 0.21, 40.241, 1551.379, 1.323, 80.196],
[111, 30.833, 0.214, 40.237, 1591.616, 1.311, 81.507],
[112, 31.111, 0.214, 40.233, 1631.849, 1.299, 82.806],
[113, 31.389, 0.214, 40.594, 1672.442, 1.299, 84.105],
[114, 31.667, 0.214, 40.955, 1713.397, 1.299, 85.404],
[115, 31.944, 0.214, 41.315, 1754.712, 1.299, 86.703],
[116, 32.222, 0.214, 41.676, 1796.389, 1.299, 88.002],
[117, 32.5, 0.214, 42.037, 1838.426, 1.299, 89.301],
[118, 32.778, 0.214, 42.398, 1880.824, 1.299, 90.6],
[119, 33.056, 0.214, 42.759, 1923.582, 1.299, 91.899],
[120, 33.333, 0.214, 43.12, 1966.702, 1.299, 93.198],
[121, 33.611, 0.186, 46.458, 2013.16, 1.388, 94.586],
[122, 33.889, 0.186, 50.288, 2063.448, 1.49, 96.076],
[123, 34.167, 0.186, 50.701, 2114.149, 1.49, 97.566],
[124, 34.444, 0.186, 51.115, 2165.264, 1.49, 99.056],
[125, 34.722, 0.186, 51.529, 2216.793, 1.49, 100.546],
[126, 35, 0.186, 51.943, 2268.737, 1.49, 102.036],
[127, 35.278, 0.186, 52.357, 2321.093, 1.49, 103.526],
[128, 35.556, 0.186, 52.771, 2373.864, 1.49, 105.016],
[129, 35.833, 0.186, 53.185, 2427.049, 1.49, 106.506],
[130, 36.111, 0.186, 53.599, 2480.648, 1.49, 107.996],
[131, 36.389, 0.162, 57.757, 2538.405, 1.593, 109.589],
[132, 36.667, 0.162, 62.536, 2600.94, 1.712, 111.301],
[133, 36.944, 0.162, 63.011, 2663.952, 1.712, 113.013],
[134, 37.222, 0.162, 63.487, 2727.438, 1.712, 114.725],
[135, 37.5, 0.162, 63.962, 2791.4, 1.712, 116.437],
[136, 37.778, 0.162, 64.438, 2855.838, 1.712, 118.149],
[137, 38.056, 0.162, 64.913, 2920.752, 1.712, 119.861],
[138, 38.333, 0.162, 65.389, 2986.14, 1.712, 121.573],
[139, 38.611, 0.162, 65.864, 3052.005, 1.712, 123.285],
[140, 38.889, 0.162, 66.34, 3118.345, 1.712, 124.997],
[141, 39.167, 0.119, 77.115, 3195.46, 1.976, 126.973],
[142, 39.444, 0.119, 91.818, 3287.278, 2.336, 129.309],
[143, 39.722, 0.119, 92.467, 3379.745, 2.336, 131.645],
[144, 40, 0.119, 93.116, 3472.86, 2.336, 133.981],
[145, 40.278, 0.119, 93.764, 3566.625, 2.336, 136.317],
[146, 40.556, 0.119, 94.413, 3661.038, 2.336, 138.653],
[147, 40.833, 0.119, 95.062, 3756.1, 2.336, 140.989],
[148, 41.111, 0.119, 95.711, 3851.811, 2.336, 143.325],
[149, 41.389, 0.119, 96.36, 3948.171, 2.336, 145.661],
[150, 41.667, 0.119, 97.009, 4045.18, 2.336, 147.997],
[151, 41.944, 0.095, 108.739, 4153.919, 2.601, 150.598],
[152, 42.222, 0.095, 123.473, 4277.392, 2.934, 153.532],
[153, 42.5, 0.095, 124.288, 4401.679, 2.934, 156.466],
[154, 42.778, 0.095, 125.103, 4526.782, 2.934, 159.4],
[155, 43.056, 0.095, 125.918, 4652.699, 2.934, 162.334],
[156, 43.333, 0.095, 126.733, 4779.432, 2.934, 165.268],
[157, 43.611, 0.095, 127.547, 4906.979, 2.934, 168.202],
[158, 43.889, 0.095, 128.362, 5035.342, 2.934, 171.136],
[159, 44.167, 0.095, 129.178, 5164.519, 2.934, 174.07],
[160, 44.444, 0.095, 129.993, 5294.512, 2.934, 177.004]
];

let HCMT_accel_data = [ [0, 0, 0, 0, 0, 0, 0],
[1, 0.278, 0.667, 0.116, 0.116, 0.833, 0.833],
[2, 0.556, 0.943, 0.144, 0.26, 0.345, 1.179],
[3, 0.833, 1.1, 0.189, 0.448, 0.272, 1.45],
[4, 1.111, 1.1, 0.246, 0.694, 0.253, 1.703],
[5, 1.389, 1.1, 0.316, 1.01, 0.253, 1.956],
[6, 1.667, 1.1, 0.386, 1.395, 0.253, 2.208],
[7, 1.944, 1.1, 0.456, 1.851, 0.253, 2.461],
[8, 2.222, 1.1, 0.526, 2.377, 0.253, 2.713],
[9, 2.5, 1.1, 0.596, 2.974, 0.253, 2.966],
[10, 2.778, 1.1, 0.666, 3.64, 0.253, 3.218],
[11, 3.056, 1.1, 0.737, 4.377, 0.253, 3.471],
[12, 3.333, 1.1, 0.807, 5.183, 0.253, 3.723],
[13, 3.611, 1.1, 0.877, 6.06, 0.253, 3.976],
[14, 3.889, 1.1, 0.947, 7.007, 0.253, 4.228],
[15, 4.167, 1.1, 1.017, 8.024, 0.253, 4.481],
[16, 4.444, 1.1, 1.087, 9.111, 0.253, 4.733],
[17, 4.722, 1.1, 1.157, 10.269, 0.253, 4.986],
[18, 5, 1.1, 1.228, 11.496, 0.253, 5.238],
[19, 5.278, 1.1, 1.298, 12.794, 0.253, 5.491],
[20, 5.556, 1.1, 1.368, 14.162, 0.253, 5.743],
[21, 5.833, 1.1, 1.438, 15.6, 0.253, 5.996],
[22, 6.111, 1.1, 1.508, 17.108, 0.253, 6.248],
[23, 6.389, 1.1, 1.578, 18.686, 0.253, 6.501],
[24, 6.667, 1.1, 1.648, 20.335, 0.253, 6.753],
[25, 6.944, 1.1, 1.719, 22.053, 0.253, 7.006],
[26, 7.222, 1.1, 1.789, 23.842, 0.253, 7.259],
[27, 7.5, 1.1, 1.859, 25.701, 0.253, 7.511],
[28, 7.778, 1.1, 1.929, 27.63, 0.253, 7.764],
[29, 8.056, 1.1, 1.999, 29.629, 0.253, 8.016],
[30, 8.333, 1.1, 2.069, 31.698, 0.253, 8.269],
[31, 8.611, 1.049, 2.19, 33.888, 0.258, 8.527],
[32, 8.889, 1.016, 2.354, 36.242, 0.269, 8.796],
[33, 9.167, 0.984, 2.507, 38.75, 0.278, 9.074],
[34, 9.444, 0.955, 2.666, 41.416, 0.287, 9.36],
[35, 9.722, 0.927, 2.83, 44.245, 0.295, 9.656],
[36, 10, 0.9, 2.998, 47.244, 0.304, 9.96],
[37, 10.278, 0.875, 3.172, 50.416, 0.313, 10.273],
[38, 10.556, 0.852, 3.351, 53.767, 0.322, 10.594],
[39, 10.833, 0.829, 3.535, 57.302, 0.331, 10.925],
[40, 11.111, 0.808, 3.724, 61.026, 0.339, 11.264],
[41, 11.389, 0.787, 3.918, 64.944, 0.348, 11.613],
[42, 11.667, 0.768, 4.118, 69.062, 0.357, 11.97],
[43, 11.944, 0.749, 4.322, 73.384, 0.366, 12.336],
[44, 12.222, 0.732, 4.532, 77.917, 0.375, 12.711],
[45, 12.5, 0.715, 4.748, 82.664, 0.384, 13.095],
[46, 12.778, 0.699, 4.968, 87.632, 0.393, 13.488],
[47, 13.056, 0.683, 5.194, 92.826, 0.402, 13.89],
[48, 13.333, 0.668, 5.425, 98.251, 0.411, 14.301],
[49, 13.611, 0.654, 5.661, 103.912, 0.42, 14.722],
[50, 13.889, 0.64, 5.903, 109.816, 0.429, 15.151],
[51, 14.167, 0.627, 6.151, 115.967, 0.438, 15.589],
[52, 14.444, 0.614, 6.404, 122.37, 0.448, 16.037],
[53, 14.722, 0.602, 6.662, 129.033, 0.457, 16.494],
[54, 15, 0.59, 6.926, 135.959, 0.466, 16.96],
[55, 15.278, 0.579, 7.196, 143.154, 0.475, 17.435],
[56, 15.556, 0.568, 7.471, 150.625, 0.485, 17.92],
[57, 15.833, 0.557, 7.752, 158.377, 0.494, 18.414],
[58, 16.111, 0.547, 8.038, 166.416, 0.503, 18.917],
[59, 16.389, 0.537, 8.331, 174.746, 0.513, 19.43],
[60, 16.667, 0.527, 8.629, 183.375, 0.522, 19.952],
[61, 16.944, 0.518, 8.933, 192.309, 0.532, 20.483],
[62, 17.222, 0.509, 9.243, 201.552, 0.541, 21.024],
[63, 17.5, 0.5, 9.559, 211.111, 0.551, 21.575],
[64, 17.778, 0.492, 9.881, 220.992, 0.56, 22.135],
[65, 18.056, 0.483, 10.209, 231.2, 0.57, 22.705],
[66, 18.333, 0.475, 10.543, 241.743, 0.579, 23.284],
[67, 18.611, 0.468, 10.883, 252.627, 0.589, 23.874],
[68, 18.889, 0.46, 11.23, 263.856, 0.599, 24.473],
[69, 19.167, 0.453, 11.582, 275.439, 0.609, 25.081],
[70, 19.444, 0.445, 11.942, 287.38, 0.619, 25.7],
[71, 19.722, 0.439, 12.307, 299.687, 0.628, 26.328],
[72, 20, 0.432, 12.679, 312.366, 0.638, 26.967],
[73, 20.278, 0.425, 13.058, 325.424, 0.648, 27.615],
[74, 20.556, 0.419, 13.443, 338.867, 0.658, 28.273],
[75, 20.833, 0.412, 13.834, 352.701, 0.669, 28.942],
[76, 21.111, 0.406, 14.233, 366.934, 0.679, 29.621],
[77, 21.389, 0.4, 14.638, 381.572, 0.689, 30.309],
[78, 21.667, 0.394, 15.05, 396.623, 0.699, 31.009],
[79, 21.944, 0.389, 15.47, 412.092, 0.709, 31.718],
[80, 22.222, 0.383, 15.896, 427.988, 0.72, 32.438],
[81, 22.5, 0.378, 16.329, 444.317, 0.73, 33.168],
[82, 22.778, 0.372, 16.77, 461.087, 0.741, 33.909],
[83, 23.056, 0.367, 17.218, 478.305, 0.751, 34.66],
[84, 23.333, 0.362, 17.673, 495.978, 0.762, 35.422],
[85, 23.611, 0.357, 18.136, 514.114, 0.773, 36.195],
[86, 23.889, 0.352, 18.606, 532.72, 0.783, 36.978],
[87, 24.167, 0.347, 19.084, 551.805, 0.794, 37.772],
[88, 24.444, 0.343, 19.57, 571.375, 0.805, 38.578],
[89, 24.722, 0.338, 20.064, 591.439, 0.816, 39.394],
[90, 25, 0.334, 20.566, 612.004, 0.827, 40.221],
[91, 25.278, 0.329, 21.076, 633.08, 0.838, 41.059],
[92, 25.556, 0.325, 21.594, 654.674, 0.85, 41.909],
[93, 25.833, 0.321, 22.12, 676.794, 0.861, 42.77],
[94, 26.111, 0.316, 22.655, 699.449, 0.872, 43.642],
[95, 26.389, 0.312, 23.198, 722.647, 0.884, 44.526],
[96, 26.667, 0.308, 23.751, 746.398, 0.895, 45.421],
[97, 26.944, 0.304, 24.312, 770.71, 0.907, 46.328],
[98, 27.222, 0.3, 24.882, 795.591, 0.919, 47.247],
[99, 27.5, 0.297, 25.461, 821.052, 0.931, 48.177],
[100, 27.778, 0.293, 26.049, 847.102, 0.942, 49.12],
[101, 28.056, 0.289, 26.647, 873.749, 0.955, 50.074],
[102, 28.333, 0.286, 27.255, 901.004, 0.967, 51.041],
[103, 28.611, 0.282, 27.872, 928.875, 0.979, 52.02],
[104, 28.889, 0.278, 28.499, 957.374, 0.991, 53.011],
[105, 29.167, 0.275, 29.136, 986.51, 1.004, 54.015],
[106, 29.444, 0.272, 29.783, 1016.293, 1.016, 55.031],
[107, 29.722, 0.268, 30.441, 1046.734, 1.029, 56.06],
[108, 30, 0.265, 31.109, 1077.843, 1.042, 57.102],
[109, 30.278, 0.262, 31.788, 1109.631, 1.055, 58.157],
[110, 30.556, 0.259, 32.478, 1142.11, 1.068, 59.225],
[111, 30.833, 0.255, 33.179, 1175.289, 1.081, 60.306],
[112, 31.111, 0.252, 33.892, 1209.181, 1.094, 61.4],
[113, 31.389, 0.249, 34.616, 1243.797, 1.108, 62.508],
[114, 31.667, 0.246, 35.352, 1279.149, 1.121, 63.629],
[115, 31.944, 0.243, 36.1, 1315.25, 1.135, 64.764],
[116, 32.222, 0.24, 36.86, 1352.11, 1.149, 65.913],
[117, 32.5, 0.237, 37.633, 1389.743, 1.163, 67.076],
[118, 32.778, 0.235, 38.419, 1428.162, 1.177, 68.253],
[119, 33.056, 0.232, 39.217, 1467.379, 1.191, 69.444],
[120, 33.333, 0.229, 40.029, 1507.409, 1.206, 70.65],
[121, 33.611, 0.226, 40.855, 1548.263, 1.221, 71.871],
[122, 33.889, 0.223, 41.694, 1589.957, 1.235, 73.106],
[123, 34.167, 0.221, 42.547, 1632.504, 1.25, 74.356],
[124, 34.444, 0.218, 43.415, 1675.919, 1.266, 75.622],
[125, 34.722, 0.216, 44.297, 1720.216, 1.281, 76.903],
[126, 35, 0.213, 45.195, 1765.411, 1.296, 78.199],
[127, 35.278, 0.21, 46.108, 1811.519, 1.312, 79.511],
[128, 35.556, 0.208, 47.037, 1858.555, 1.328, 80.839],
[129, 35.833, 0.205, 47.981, 1906.537, 1.344, 82.184],
[130, 36.111, 0.203, 48.943, 1955.479, 1.361, 83.544],
];

let siemens_tuned_accel_data = [
    [0, 0, 0, 0, 0, 0, 0],
    [1, 0.277777777777778, 0.666666666666667, 0.115740740740741, 0.115740740740741, 0.833333333333333, 0.833333333333333],
    [2, 0.555555555555556, 0.942809041582063, 0.143824153601769, 0.25956489434251, 0.345177968644246, 1.17851130197758],
    [3, 0.833333333333333, 1, 0.198579716728947, 0.458144611071456, 0.285954792089683, 1.46446609406726],
    [4, 1.11111111111111, 1, 0.270061728395062, 0.728206339466518, 0.277777777777778, 1.74224387184504],
    [5, 1.38888888888889, 1, 0.347222222222222, 1.07542856168874, 0.277777777777778, 2.02002164962282],
    [6, 1.66666666666667, 1, 0.424382716049382, 1.49981127773812, 0.277777777777778, 2.2977994274006],
    [7, 1.94444444444444, 1, 0.501543209876543, 2.00135448761467, 0.277777777777778, 2.57557720517837],
    [8, 2.22222222222222, 1, 0.578703703703704, 2.58005819131837, 0.277777777777778, 2.85335498295615],
    [9, 2.5, 1, 0.655864197530864, 3.23592238884923, 0.277777777777778, 3.13113276073393],
    [10, 2.77777777777778, 1, 0.733024691358025, 3.96894708020726, 0.277777777777778, 3.40891053851171],
    [11, 3.05555555555556, 1, 0.810185185185185, 4.77913226539244, 0.277777777777778, 3.68668831628948],
    [12, 3.33333333333333, 1, 0.887345679012345, 5.66647794440479, 0.277777777777778, 3.96446609406726],
    [13, 3.61111111111111, 1, 0.964506172839507, 6.6309841172443, 0.277777777777778, 4.24224387184504],
    [14, 3.88888888888889, 1, 1.04166666666667, 7.67265078391096, 0.277777777777778, 4.52002164962282],
    [15, 4.16666666666667, 1, 1.11882716049383, 8.79147794440479, 0.277777777777778, 4.79779942740059],
    [16, 4.44444444444444, 1, 1.19598765432099, 9.98746559872578, 0.277777777777778, 5.07557720517837],
    [17, 4.72222222222222, 1, 1.27314814814815, 11.2606137468739, 0.277777777777778, 5.35335498295615],
    [18, 5, 1, 1.35030864197531, 12.6109223888492, 0.277777777777778, 5.63113276073393],
    [19, 5.27777777777778, 1, 1.42746913580247, 14.0383915246517, 0.277777777777778, 5.90891053851171],
    [20, 5.55555555555556, 0.958218391285618, 1.53673322273498, 15.5751247473867, 0.283704594966458, 6.19261513347816],
    [21, 5.83333333333333, 0.911331284738402, 1.69216164057303, 17.2672863879597, 0.297160092978678, 6.48977522645684],
    [22, 6.11111111111111, 0.868672703550988, 1.8639852811546, 19.1312716691143, 0.312109163356118, 6.80188438981296],
    [23, 6.38888888888889, 0.829690134777525, 2.04445254209607, 21.1757242112104, 0.327112406735371, 7.12899679654833],
    [24, 6.66666666666667, 0.793923150963136, 2.23362499046205, 23.4093492016724, 0.342172338964399, 7.47116913551273],
    [25, 6.94444444444444, 0.760984993045726, 2.43156755728545, 25.8409167589579, 0.357291559437861, 7.82846069495059],
    [26, 7.22222222222222, 0.730548403357366, 2.63834869180608, 28.479265450764, 0.372472756490271, 8.20093345144086],
    [27, 7.5, 0.702334606847601, 2.85404052090374, 31.3333059716677, 0.387718712273716, 8.58865216371458],
    [28, 7.77777777777778, 0.676104653473181, 3.07871901407264, 34.4120249857403, 0.403032307296783, 8.99168447101136],
    [29, 8.05555555555556, 0.651652551817512, 3.31246415430692, 37.7244891400473, 0.418416524754558, 9.41010099576592],
    [30, 8.33333333333333, 0.628799775986215, 3.55536011528912, 41.2798492553364, 0.433874454747147, 9.84397545051307],
    [31, 8.61111111111111, 0.607390835684181, 3.80749544529929, 45.0873447006357, 0.449409298461555, 10.2933847489746],
    [32, 8.88888888888889, 0.587289676903194, 4.06896325828836, 49.156307958924, 0.465024372375812, 10.7584091213504],
    [33, 9.16666666666667, 0.568376737029971, 4.33986143258765, 53.4961693915117, 0.480723112532785, 11.2391322338832],
    [34, 9.44444444444444, 0.550546519641028, 4.62029281775832, 58.11646220927, 0.496509078923282, 11.7356413128065],
    [35, 9.72222222222222, 0.533705585046992, 4.91036545011457, 63.0268276593846, 0.512385960011955, 12.2480272728185],
    [36, 10, 0.5177708757462, 5.21019277749283, 68.2370204368774, 0.528357577435893, 12.7763848502543],
    [37, 10.2777777777778, 0.502668313426356, 5.51989389387338, 73.7569143307508, 0.54442789090258, 13.3208127411569],
    [38, 10.5555555555556, 0.488331617492251, 5.83959378450487, 79.5965081152556, 0.560601003312468, 13.8814137444694],
    [39, 10.8333333333333, 0.474701305358436, 6.16942358222218, 85.7659316974778, 0.576881166129866, 14.4582949105993],
    [40, 11.1111111111111, 0.461723842698012, 6.50952083569866, 92.2754525331765, 0.593272785025701, 15.051567695625],
    [41, 11.3888888888889, 0.449350918045238, 6.86002979042171, 99.1354823235982, 0.609780425815262, 15.6613481214402],
    [42, 11.6666666666667, 0.437538821026349, 7.22110168323566, 106.356584006834, 0.626408820714421, 16.2877569421546],
    [43, 11.9444444444444, 0.42624790734886, 7.59289505135779, 113.949479058192, 0.643162874938542, 16.9309198170932],
    [44, 12.2222222222222, 0.415442136746877, 7.97557605683097, 121.925055115023, 0.660047673668768, 17.590967490762],
    [45, 12.5, 0.405088672533694, 8.3693188274532, 130.294373942476, 0.677068489411945, 18.2680359801739],
    [46, 12.7777777777778, 0.39515753338667, 8.77430581529098, 139.068679757767, 0.694230789781263, 18.9622667699552],
    [47, 13.0555555555556, 0.385621289585087, 9.19072817397033, 148.259407931737, 0.711540245726738, 19.6738070156819],
    [48, 13.3333333333333, 0.37645479721829, 9.61878615602262, 157.87819408776, 0.729002740245925, 20.4028097559278],
    [49, 13.6111111111111, 0.367634964939758, 10.0586895316601, 167.93688361942, 0.746624377607758, 21.1494341335356],
    [50, 13.8888888888889, 0.35914054871069, 10.5106580304561, 178.447541649876, 0.764411493124078, 21.9138456266597],
    [51, 14.1666666666667, 0.350951970691409, 10.9749218075204, 189.422463457396, 0.782370663506403, 22.6962162901661],
    [52, 14.4444444444444, 0.343051159029905, 11.451721935878, 200.874185393274, 0.800508717847782, 23.4967250080138],
    [53, 14.7222222222222, 0.335421405787526, 11.9413109268935, 212.815496320168, 0.818832749272695, 24.3155577572865],
    [54, 15, 0.328047240650707, 12.4439532807295, 225.259449600897, 0.837350127301423, 25.152907884588],
    [55, 15.2777777777778, 0.320914318419595, 12.959926068979, 238.219375669876, 0.85606851097843, 26.0089763955664],
    [56, 15.5555555555556, 0.314009318551471, 13.48951955179, 251.708895221666, 0.874995862818813, 26.8839722583852],
    [57, 15.8333333333333, 0.307319855278543, 14.0330378319794, 265.741933053646, 0.894140463630546, 27.7781127220158],
    [58, 16.1111111111111, 0.300834397023902, 14.5907995488463, 280.332732602492, 0.913510928275595, 28.6916236502914],
    [59, 16.3888888888889, 0.294542194012461, 15.1631386146091, 295.495871217101, 0.933116222437484, 29.6247398727288],
    [60, 16.6666666666667, 0.288433213120807, 15.7504049966436, 311.246276213745, 0.952965680469189, 30.577705553198],
    [61, 16.9444444444444, 0.282498079135261, 16.3529655489593, 327.599241762704, 0.973069024400887, 31.5507745775989],
    [62, 17.2222222222222, 0.276728021694635, 16.9712048966535, 344.570446659358, 0.99343638419435, 32.5442109617933],
    [63, 17.5, 0.271114827286075, 17.6055263773913, 362.175973036749, 1.01407831933774, 33.558289281131],
    [64, 17.7777777777778, 0.265650795741276, 18.2563530443344, 380.432326081083, 1.03500584188352, 34.5932951230145],
    [65, 18.0555555555556, 0.260328700748448, 18.9241287353071, 399.35645481639, 1.0562304410404, 35.6495255640549],
    [66, 18.3333333333333, 0.25514175395409, 19.609319213438, 418.965774029828, 1.07776410944086, 36.7272896734958],
    [67, 18.6111111111111, 0.250083572279534, 20.3124133849674, 439.278187414796, 1.09961937121628, 37.8269090447121],
    [68, 18.8888888888889, 0.245148148121332, 21.0339246004575, 460.312112015253, 1.1218093120244, 38.9487183567365],
    [69, 19.1666666666667, 0.240329822142901, 21.774392046188, 482.086504061441, 1.14434761118652, 40.093065967923],
    [70, 19.4444444444444, 0.235623258398319, 22.5343822331797, 504.620886294621, 1.16724857610715, 41.2603145440301],
    [71, 19.7222222222222, 0.231023421558336, 23.3144905919832, 527.935376886604, 1.1905271791651, 42.4508417231952],
    [72, 20, 0.226525556034217, 24.115343182145, 552.050720068749, 1.21419909728282, 43.6650408204781],
    [73, 20.2777777777778, 0.222125166817431, 24.937598526143, 576.988318594892, 1.23828075440159, 44.9033215748797],
    [74, 20.5555555555556, 0.21781800187288, 25.7819495785304, 602.770268173422, 1.26278936711169, 46.1661109419913],
    [75, 20.8333333333333, 0.213600035940673, 26.6491258421039, 629.419394015526, 1.28774299371241, 47.4538539357038],
    [76, 21.1111111111111, 0.209467455616702, 27.5398956441, 656.959289659626, 1.31316058700344, 48.7670145227072],
    [77, 21.3888888888889, 0.205416645595773, 28.455068586756, 685.414358246382, 1.33906205114146, 50.1060765738487],
    [78, 21.6666666666667, 0.201444175972959, 29.3954981880444, 714.809856434427, 1.36546830292851, 51.4715448767772],
    [79, 21.9444444444444, 0.197546790509406, 30.3620847300548, 745.171941164481, 1.39240133793882, 52.863946214716],
    [80, 22.2222222222222, 0.193721395778202, 31.355778334353, 776.527719498835, 1.41988430193296, 54.283830516649],
    [81, 22.5, 0.189965051114257, 32.3775822857115, 808.905301784546, 1.44794156805667, 55.7317720847056],
    [82, 22.7777777777778, 0.186274959299559, 33.4285566279726, 842.333858412519, 1.4765988203767, 57.2083709050823],
    [83, 23.0555555555556, 0.182648457921785, 34.5098220583887, 876.843680470908, 1.50588314436606, 58.7142540494484],
    [84, 23.3333333333333, 0.179083011350149, 35.622564149786, 912.466244620693, 1.53582312502072, 60.2500771744691],
    [85, 23.6111111111111, 0.175576203277668, 36.7680379331879, 949.234282553881, 1.56644895336658, 61.8165261278357],
    [86, 23.8888888888889, 0.172125729783729, 37.9475728773547, 987.181855431236, 1.59779254220441, 63.4143186700401],
    [87, 24.1666666666667, 0.168729392875105, 39.1625783059146, 1026.34443373715, 1.62988765203805, 65.0442063220782],
    [88, 24.4444444444444, 0.165385094467352, 40.414549297627, 1066.75898303478, 1.66277002824523, 66.7069763503234],
    [89, 24.7222222222222, 0.162090830771954, 41.7050731208015, 1108.46405615558, 1.69647755067668, 68.4034539010001],
    [90, 25, 0.158844687057665, 43.0358362591524, 1151.49989241473, 1.73105039701618, 70.1345042980163],
    [91, 25.2777777777778, 0.155644832757248, 44.4086320934812, 1195.90852450821, 1.76653122139815, 71.9010355194144],
    [92, 25.5555555555556, 0.152489516893347, 45.8253693117366, 1241.73389381995, 1.80296534996995, 73.7040008693844],
    [93, 25.8333333333333, 0.14937706379946, 47.2880811292963, 1289.02197494925, 1.84040099530234, 75.5444018646867],
    [94, 26.1111111111111, 0.14630586911404, 48.798935412008, 1337.82091036125, 1.87888949179925, 77.4232913564859],
    [95, 26.3888888888889, 0.14327439602761, 50.3602458068054, 1388.18115616806, 1.91848555454497, 79.3417769110309],
    [96, 26.6666666666667, 0.140281171764416, 51.9744839988361, 1440.15564016689, 1.95924756435403, 81.3010244753849],
    [97, 26.9444444444444, 0.137324784281729, 53.6442932303895, 1493.79993339728, 2.00123788216997, 83.3022623575549],
    [98, 27.2222222222222, 0.134403879171214, 55.372503235758, 1549.17243663304, 2.04452319639722, 85.3467855539521],
    [99, 27.5, 0.131517156748108, 57.1621467681196, 1606.33458340116, 2.08917490726122, 87.4359604612134],
    [100, 27.7777777777778, 0.128663369315035, 59.0164779199444, 1665.35106132111, 2.13526955288241, 89.5712300140958],
    [101, 28.0555555555556, 0.125841318588379, 60.9389924681662, 1726.29005378927, 2.18288928244177, 91.7541192965376],
    [102, 28.3333333333333, 0.123049853276039, 62.9334505100336, 1789.22350429931, 2.23212238262188, 93.9862416791594],
    [103, 28.6111111111111, 0.120287866796284, 65.0039016962379, 1854.22740599554, 2.28306386445324, 96.2693055436127],
    [104, 28.8888888888889, 0.117554295128221, 67.154713415749, 1921.38211941129, 2.33581611880866, 98.6051216624213],
    [105, 29.1666666666667, 0.114848114785086, 69.3906023431175, 1990.77272175441, 2.39048965009782, 100.995611312519],
    [106, 29.4444444444444, 0.112168340902256, 71.7166698257049, 2062.48939158012, 2.44720389926577, 103.442815211785],
    [107, 29.7222222222222, 0.109514025432478, 74.1384416673384, 2136.62783324745, 2.50608816903679, 105.948903380822],
    [108, 30, 0.10688425544136, 76.6619129590562, 2213.28974620651, 2.56728266653583, 108.516186047358],
    [109, 30.2777777777778, 0.104278151496691, 79.2935987199939, 2292.5833449265, 2.63093968103206, 111.14712572839],
    [110, 30.5555555555556, 0.101694866145609, 82.0405912462471, 2374.62393617275, 2.69722491768484, 113.844350646074],
    [111, 30.8333333333333, 0.0991335824740982, 84.910625227671, 2459.53456140042, 2.76631901194222, 116.610669658017],
    [112, 31.1111111111111, 0.0965935127436413, 87.9121518883978, 2547.44671328882, 2.83841925379581, 119.449088911812],
    [113, 31.3888888888889, 0.0940738971002708, 91.0544236444167, 2638.50113693324, 2.91374155662133, 122.362830468434],
    [114, 31.6666666666667, 0.0915740023515617, 94.3475910607312, 2732.84872799397, 2.99252271205844, 125.355353180492],
    [115, 31.9444444444444, 0.0890931208074343, 97.8028142445685, 2830.65154223854, 3.07502298061524, 128.430376161107],
    [116, 32.2222222222222, 0.0866305691809151, 101.432391245915, 2932.08393348445, 3.16152907779475, 131.591905238902],
    [117, 32.5, 0.084185687545269, 105.249906573866, 3037.33384005832, 3.25235762803364, 134.844262866936],
    [118, 32.7777777777778, 0.0817578383441588, 109.270403603844, 3146.60424366216, 3.34785917424544, 138.192122041181],
    [119, 33.0555555555556, 0.0793464054517123, 113.510585482825, 3260.11482914499, 3.44842285011114, 141.640544891292],
    [120, 33.3333333333333, 0.0769507932795864, 117.98905018378, 3378.10387932877, 3.55448184654065, 145.195026737833],
    [121, 33.6111111111111, 0.0745704259283089, 122.726566678631, 3500.8304460074, 3.66651983438234, 148.861546572215],
    [122, 33.8888888888889, 0.0722047463803573, 127.746400873364, 3628.57684688076, 3.78507854439599, 152.646625116611],
    [123, 34.1666666666667, 0.0698532157326004, 133.074702089718, 3761.65154897048, 3.91076675528969, 156.557391871901],
    [124, 34.4444444444444, 0.0675153124658788, 138.740963634491, 3900.39251260497, 4.04427100473009, 160.601662876631],
    [125, 34.7222222222222, 0.0651905317496461, 144.778574572493, 4045.17108717746, 4.18636842137329, 164.788031298005],
    [126, 35, 0.0628783847797227, 151.225484492765, 4196.39657167023, 4.33794218465303, 169.125973482658],
    [127, 35.2777777777778, 0.060578398147336, 158.125009217237, 4354.52158088747, 4.50000026230874, 173.625973744966],
    [128, 35.5555555555556, 0.0582901132377377, 165.526813591415, 4520.04839447888, 4.67369826611052, 178.299672011077],
    [129, 35.8333333333333, 0.0560130856567917, 173.488118489827, 4693.53651296871, 4.86036752189397, 183.160039532971],
    [130, 36.1111111111111, 0.0537468846840279, 182.075194072841, 4875.61170704155, 5.06154979661954, 188.22158932959]   
]

let comeng_accel_data = [ [ 0, 0, 0, 0, 0, 0, 0],
[ 1, 0.277777777777778, 0.52704627669473, 0.146401743526314, 0.146401743526314, 1.05409255338946, 1.05409255338946],
[ 2, 0.555555555555556, 0.74535599249993, 0.181924763171, 0.328326506697314, 0.4366194316104, 1.49071198499986],
[ 3, 0.833333333333333, 0.8, 0.249652812043449, 0.577979318740763, 0.359500049342566, 1.85021203434243],
[ 4, 1.11111111111111, 0.8, 0.337577160493827, 0.91555647923459, 0.347222222222222, 2.19743425656465],
[ 5, 1.38888888888889, 0.8, 0.434027777777778, 1.34958425701237, 0.347222222222222, 2.54465647878687],
[ 6, 1.66666666666667, 0.8, 0.530478395061728, 1.8800626520741, 0.347222222222222, 2.89187870100909],
[ 7, 1.94444444444444, 0.8, 0.626929012345679, 2.50699166441977, 0.347222222222222, 3.23910092323132],
[ 8, 2.22222222222222, 0.8, 0.72337962962963, 3.23037129404941, 0.347222222222222, 3.58632314545354],
[ 9, 2.5, 0.8, 0.81983024691358, 4.05020154096299, 0.347222222222222, 3.93354536767576],
[ 10, 2.77777777777778, 0.8, 0.916280864197531, 4.96648240516052, 0.347222222222222, 4.28076758989798],
[ 11, 3.05555555555556, 0.8, 1.01273148148148, 5.979213886642, 0.347222222222222, 4.6279898121202],
[ 12, 3.33333333333333, 0.8, 1.10918209876543, 7.08839598540743, 0.347222222222222, 4.97521203434243],
[ 13, 3.61111111111111, 0.8, 1.20563271604938, 8.29402870145681, 0.347222222222223, 5.32243425656465],
[ 14, 3.88888888888889, 0.8, 1.30208333333333, 9.59611203479014, 0.347222222222222, 5.66965647878687],
[ 15, 4.16666666666667, 0.8, 1.39853395061729, 10.9946459854074, 0.347222222222223, 6.01687870100909],
[ 16, 4.44444444444444, 0.8, 1.49498456790123, 12.4896305533087, 0.347222222222222, 6.36410092323132],
[ 17, 4.72222222222222, 0.8, 1.59143518518518, 14.0810657384938, 0.347222222222222, 6.71132314545354],
[ 18, 5, 0.8, 1.68788580246914, 15.768951540963, 0.347222222222222, 7.05854536767576],
[ 19, 5.27777777777778, 0.8, 1.78433641975309, 17.5532879607161, 0.347222222222222, 7.40576758989798],
[ 20, 5.55555555555556, 0.8, 1.88078703703704, 19.4340749977531, 0.347222222222222, 7.75298981212021],
[ 21, 5.83333333333333, 0.8, 1.97723765432098, 21.4113126520741, 0.347222222222222, 8.10021203434243],
[ 22, 6.11111111111111, 0.8, 2.07368827160494, 23.485000923679, 0.347222222222222, 8.44743425656465],
[ 23, 6.38888888888889, 0.8, 2.17013888888889, 25.6551398125679, 0.347222222222222, 8.79465647878687],
[ 24, 6.66666666666667, 0.8, 2.26658950617284, 27.9217293187408, 0.347222222222222, 9.14187870100909],
[ 25, 6.94444444444444, 0.8, 2.3630401234568, 30.2847694421976, 0.347222222222223, 9.48910092323131],
[ 26, 7.22222222222222, 0.8, 2.45949074074074, 32.7442601829383, 0.347222222222222, 9.83632314545354],
[ 27, 7.5, 0.8, 2.55594135802469, 35.300201540963, 0.347222222222222, 10.1835453676758],
[ 28, 7.77777777777778, 0.8, 2.65239197530864, 37.9525935162716, 0.347222222222222, 10.530767589898],
[ 29, 8.05555555555556, 0.8, 2.7488425925926, 40.7014361088642, 0.347222222222222, 10.8779898121202],
[ 30, 8.33333333333333, 0.8, 2.84529320987655, 43.5467293187408, 0.347222222222223, 11.2252120343424],
[ 31, 8.61111111111111, 0.763222195446339, 3.0109540007605, 46.5576833195013, 0.355391291893043, 11.5806033262355],
[ 32, 8.88888888888889, 0.738303118742678, 3.23744865649278, 49.795131975994, 0.369994132170603, 11.9505974584061],
[ 33, 9.16666666666667, 0.714865988074848, 3.45137539412005, 53.2465073701141, 0.382306197502528, 12.3329036559086],
[ 34, 9.44444444444444, 0.692779442456025, 3.67262449356303, 56.9191318636771, 0.394670094830655, 12.7275737507393],
[ 35, 9.72222222222222, 0.671927133583593, 3.90125919193893, 60.820391055616, 0.407087915680584, 13.1346616664198],
[ 36, 10, 0.652205640744116, 4.13734571633869, 64.9577367719547, 0.41956181912167, 13.5542234855415],
[ 37, 10.2777777777778, 0.633522723841826, 4.38095339927937, 69.3386901712341, 0.432094033901528, 13.986317519443],
[ 38, 10.5555555555556, 0.615795852264722, 4.63215479839588, 73.97084496963, 0.444686860646004, 14.431004380089],
[ 39, 10.8333333333333, 0.598950960078955, 4.89102582062216, 78.8618707902522, 0.457342674136097, 14.8883470542251],
[ 40, 11.1111111111111, 0.582921387944061, 5.15764585112956, 84.0195166413817, 0.470063925672567, 15.3584109798977],
[ 41, 11.3888888888889, 0.567646979869867, 5.43209788730329, 89.451614528685, 0.482853145538069, 15.8412641254358],
[ 42, 11.6666666666667, 0.553073309008118, 5.71446867805525, 95.1660832067402, 0.49571294556624, 16.336977071002],
[ 43, 11.9444444444444, 0.539151011473191, 6.00484886879141, 101.170932075532, 0.508646021827037, 16.845623092829],
[ 44, 12.2222222222222, 0.525835211005427, 6.30333315236643, 107.474265227898, 0.52165515743722, 17.3672782502663],
[ 45, 12.5, 0.513085020346024, 6.61002042638459, 114.084285654283, 0.534743225505271, 17.9020214757715],
[ 46, 12.7777777777778, 0.500863107649992, 6.92501395722206, 121.009299611505, 0.547913192219767, 18.4499346679913],
[ 47, 13.0555555555556, 0.489135318250636, 7.24842155117347, 128.257721162678, 0.561168120090851, 19.0111027880822],
[ 48, 13.3333333333333, 0.477870343703486, 7.58035573314771, 135.838076895826, 0.574511171354353, 19.5856139594365],
[ 49, 13.6111111111111, 0.467039431355457, 7.92093393336702, 143.759010829193, 0.587945611548893, 20.1735595709854],
[ 50, 13.8888888888889, 0.456616128765712, 8.27027868255003, 152.029289511743, 0.601474813276365, 20.7750343842618],
[ 51, 14.1666666666667, 0.446576058194656, 8.62851781609262, 160.657807327836, 0.615102260157097, 21.3901366444189],
[ 52, 14.4444444444444, 0.436896717113429, 8.99578468779197, 169.653592015628, 0.628831550991284, 22.0189681954101],
[ 53, 14.7222222222222, 0.42755730129724, 9.37221839369476, 179.025810409322, 0.64266640413907, 22.6616345995492],
[ 54, 15, 0.418538547574984, 9.75796400669144, 188.783774416014, 0.656610662132508, 23.3182452616817],
[ 55, 15.2777777777778, 0.409822593733456, 10.1531728225151, 198.936947238529, 0.670668296533109, 23.9889135582148],
[ 56, 15.5555555555556, 0.40139285343182, 10.5580026178543, 209.494949856383, 0.68484341305001, 24.6737569712648],
[ 57, 15.8333333333333, 0.393233904282986, 10.9726179213291, 220.467567777712, 0.699140256934242, 25.3728972281991],
[ 58, 16.1111111111111, 0.385331387512766, 11.3971902981405, 231.864758075853, 0.713563218666189, 26.0864604468653],
[ 59, 16.3888888888889, 0.377671917823186, 11.8318986492501, 243.696656725103, 0.728116839953852, 26.8145772868191],
[ 60, 16.6666666666667, 0.370243002269473, 12.2769295260143, 255.973586251117, 0.742805820061364, 27.5573831068805],
[ 61, 16.9444444444444, 0.363032967116346, 12.732477461257, 268.706063712374, 0.75763502248802, 28.3150181293685],
[ 62, 17.2222222222222, 0.356030891772736, 13.1987453178407, 281.904809030215, 0.772609482019946, 29.0876276113885],
[ 63, 17.5, 0.349226549018435, 13.6759446558622, 295.580753686077, 0.787734412177665, 29.8753620235661],
[ 64, 17.7777777777778, 0.342610350834498, 14.164296119696, 309.745049805773, 0.803015213085127, 30.6783772366512],
[ 65, 18.0555555555556, 0.336173299233917, 14.664029846182, 324.409079651955, 0.818457479786903, 31.4968347164382],
[ 66, 18.3333333333333, 0.329906941562227, 15.1753858953634, 339.584465547319, 0.834067011042874, 32.330901727481],
[ 67, 18.6111111111111, 0.323803329801052, 15.6986147052742, 355.283080252593, 0.849849818631386, 33.1807515461124],
[ 68, 18.8888888888889, 0.317854983462509, 16.2339775724031, 371.517057824996, 0.865812137194835, 34.0465636833072],
[ 69, 19.1666666666667, 0.312054855710187, 16.7817471595691, 388.298804984565, 0.881960434663485, 34.9285241179707],
[ 70, 19.4444444444444, 0.306396302384038, 17.3422080330896, 405.641013017655, 0.898301423296725, 35.8268255412675],
[ 71, 19.7222222222222, 0.300873053642894, 17.9156572312651, 423.55667024892, 0.914842071383754, 36.7416676126512],
[ 72, 20, 0.295479187970095, 18.5024048663585, 442.059075115278, 0.93158961564882, 37.6732572283],
[ 73, 20.2777777777778, 0.290209108315646, 19.1027747624307, 461.161849877709, 0.948551574410353, 38.6218088027104],
[ 74, 20.5555555555556, 0.285057520172796, 19.7171051315736, 480.878955009282, 0.965735761546459, 39.5875445642568],
[ 75, 20.8333333333333, 0.280019411408488, 20.3457492912948, 501.224704300577, 0.983150301324311, 40.5706948655811],
[ 76, 21.1111111111111, 0.275090033686141, 20.9890764260282, 522.213780726605, 1.00080364415499, 41.5714985097361],
[ 77, 21.3888888888889, 0.270264885336008, 21.6474723960015, 543.861253122607, 1.01870458334125, 42.5902030930774],
[ 78, 21.6666666666667, 0.265539695543204, 22.3213405969481, 566.182593719555, 1.03686227289049, 43.6270653659679],
[ 79, 21.9444444444444, 0.260910409736633, 23.0111028744588, 589.193696594014, 1.055286246472, 44.6823516124399],
[ 80, 22.2222222222222, 0.256373176073755, 23.7172004970899, 612.910897091104, 1.07398643760407, 45.7563380500439],
[ 81, 22.5, 0.251924332926476, 24.44009519269, 637.350992283794, 1.09297320116378, 46.8493112512077],
[ 82, 22.7777777777778, 0.247560397282706, 25.1802702528263, 662.53126253662, 1.11225733632116, 47.9615685875289],
[ 83, 23.0555555555556, 0.243278053986361, 25.9382317105841, 688.469494247204, 1.13185011100731, 49.0934186985362],
[ 84, 23.3333333333333, 0.239074145745931, 26.7145095975254, 715.18400384473, 1.15176328803703, 50.2451819865732],
[ 85, 23.6111111111111, 0.23494566384833, 27.5096592860791, 742.693663130809, 1.17200915301638, 51.4171911395896],
[ 86, 23.8888888888889, 0.230889739520616, 28.3242629242465, 771.017926055055, 1.1926005441788, 52.6097916837684],
[ 87, 24.1666666666667, 0.226903635887455, 29.1589309701125, 800.176857025168, 1.21355088430525, 53.8233425680736],
[ 88, 24.4444444444444, 0.222984740476934, 30.0143038343721, 830.19116085954, 1.23487421489988, 55.0582167829735],
[ 89, 24.7222222222222, 0.219130558231611, 30.8910536398578, 861.082214499398, 1.25658523280778, 56.3148020157813],
[ 90, 25, 0.215338704985483, 31.7898861079164, 892.872100607314, 1.27869932948044, 57.5935013452617],
[ 91, 25.2777777777778, 0.211606901371056, 32.7115425824364, 925.58364318975, 1.30123263311349, 58.8947339783752],
[ 92, 25.5555555555556, 0.207932967123768, 33.656802203399, 959.240445393149, 1.32420205390421, 60.2189360322794],
[ 93, 25.8333333333333, 0.204314815753878, 34.6264842430005, 993.86692963615, 1.34762533270056, 61.56656136498],
[ 94, 26.1111111111111, 0.200750449558442, 35.6214506187137, 1029.48838025486, 1.37152109334086, 62.9380824583209],
[ 95, 26.3888888888889, 0.197237954948324, 36.6426085991293, 1066.13098885399, 1.39590889901445, 64.3339913573353],
[ 96, 26.6666666666667, 0.193775498067269, 37.6909137200448, 1103.82190257404, 1.42080931300692, 65.7548006703422],
[ 97, 26.9444444444444, 0.190361320681961, 38.7673729301218, 1142.58927550416, 1.44624396423252, 67.2010446345748],
[ 98, 27.2222222222222, 0.186993736323708, 39.8730479874562, 1182.46232349162, 1.47223561799839, 68.6732802525731],
[ 99, 27.5, 0.183671126663967, 41.009059130744, 1223.47138262236, 1.49880825249419, 70.1720885050673],
[ 100, 27.7777777777778, 0.180391938107339, 42.1765890512692, 1265.64797167363, 1.52598714155346, 71.6980756466208],
[ 101, 28.0555555555556, 0.177154678586952, 43.3768871948796, 1309.02485886851, 1.55379894429419, 73.251874590915],
[ 102, 28.3333333333333, 0.173957914548364, 44.6112744263689, 1353.63613329488, 1.58227180231456, 74.8341463932295],
[ 103, 28.6111111111111, 0.170800268109148, 45.8811480923764, 1399.51728138725, 1.61143544519567, 76.4455818384252],
[ 104, 28.8888888888889, 0.167680414382356, 47.1879875231084, 1446.70526891036, 1.64132130515159, 78.0869031435768],
[ 105, 29.1666666666667, 0.164597078952922, 48.5333600178701, 1495.23862892823, 1.67196264176394, 79.7588657853407],
[ 106, 29.4444444444444, 0.161549035496916, 49.9189273647927, 1545.15755629302, 1.70339467785076, 81.4622604631915],
[ 107, 29.7222222222222, 0.158535103534294, 51.3464529511807, 1596.50400924421, 1.73565474764555, 83.197915210837],
[ 108, 30, 0.155554146306494, 52.8178095278613, 1649.32181877207, 1.76878245860744, 84.9666976694445],
[ 109, 30.2777777777778, 0.152605068770864, 54.3349876987798, 1703.65680647085, 1.80281986834661, 86.7695175377911],
[ 110, 30.5555555555556, 0.149686815704486, 55.900105216109, 1759.55691168696, 1.83781167833784, 88.6073292161289],
[ 111, 30.8333333333333, 0.146798369910492, 57.5154171714577, 1817.07232885841, 1.87380544630993, 90.4811346624388],
[ 112, 31.1111111111111, 0.143938750520475, 59.1833271855714, 1876.25565604399, 1.91085181944446, 92.3919864818833],
[ 113, 31.3888888888889, 0.141107011387032, 60.9063997125648, 1937.16205575655, 1.94900479080207, 94.3409912726854],
[ 114, 31.6666666666667, 0.138302239560916, 62.6873735903192, 1999.84942934687, 1.98832198171938, 96.3293132544048],
[ 115, 31.9444444444444, 0.135523553847634, 64.5291769868315, 2064.3786063337, 2.02886495329775, 98.3581782077025],
];


//THIS is Comeng train braking!
let emu_service_braking_data = [  [0, 0, -0.035, 0, 0, 0, 0],
[1, 0.278, -0.035, 1.1, 1.1, 7.92, 7.92],
[2, 0.556, -0.062, 1.4, 2.5, 1.08, 9],
[3, 0.833, -0.089, 1.4, 3.9, 0.36, 9.36],
[4, 1.111, -0.116, 1.4, 5.3, 0.18, 9.54],
[5, 1.389, -0.144, 1.4, 6.7, 0.108, 9.648],
[6, 1.667, -0.163, 1.8, 8.5, 0.552, 10.2],
[7, 1.944, -0.182, 1.9, 10.4, 0.497, 10.697],
[8, 2.222, -0.204, 1.7, 12.1, 0.193, 10.89],
[9, 2.5, -0.223, 1.9, 14, 0.31, 11.2],
[10, 2.778, -0.241, 2, 16, 0.32, 11.52],
[11, 3.056, -0.259, 2, 18, 0.262, 11.782],
[12, 3.333, -0.278, 2, 20, 0.218, 12],
[13, 3.611, -0.296, 2, 22, 0.185, 12.185],
[14, 3.889, -0.315, 2, 24, 0.158, 12.343],
[15, 4.167, -0.334, 2, 26, 0.137, 12.48],
[16, 4.444, -0.353, 2, 28, 0.12, 12.6],
[17, 4.722, -0.372, 2, 30, 0.106, 12.706],
[18, 5, -0.391, 2, 32, 0.094, 12.8],
[19, 5.278, -0.41, 2, 34, 0.084, 12.884],
[20, 5.556, -0.429, 2, 36, 0.076, 12.96],
[21, 5.833, -0.442, 2.5, 38.5, 0.24, 13.2],
[22, 6.111, -0.455, 2.5, 41, 0.218, 13.418],
[23, 6.389, -0.469, 2.5, 43.5, 0.199, 13.617],
[24, 6.667, -0.483, 2.5, 46, 0.183, 13.8],
[25, 6.944, -0.492, 3, 49, 0.312, 14.112],
[26, 7.222, -0.502, 3, 52, 0.288, 14.4],
[27, 7.5, -0.511, 3, 55, 0.267, 14.667],
[28, 7.778, -0.521, 3, 58, 0.248, 14.914],
[29, 8.056, -0.532, 3, 61, 0.231, 15.145],
[30, 8.333, -0.543, 3, 64, 0.215, 15.36],
[31, 8.611, -0.553, 3, 67, 0.201, 15.561],
[32, 8.889, -0.56, 3.5, 70.5, 0.301, 15.863],
[33, 9.167, -0.568, 3.5, 74, 0.283, 16.145],
[34, 9.444, -0.575, 3.5, 77.5, 0.266, 16.412],
[35, 9.722, -0.583, 3.5, 81, 0.251, 16.663],
[36, 10, -0.588, 4, 85, 0.337, 17],
[37, 10.278, -0.597, 3.5, 88.5, 0.222, 17.222],
[38, 10.556, -0.609, 3, 91.5, 0.115, 17.337],
[39, 10.833, -0.618, 3.5, 95, 0.202, 17.538],
[40, 11.111, -0.63, 3, 98, 0.102, 17.64],
[41, 11.389, -0.63, 5, 103, 0.448, 18.088],
[42, 11.667, -0.636, 4, 107, 0.255, 18.343],
[43, 11.944, -0.637, 5, 112, 0.411, 18.753],
[44, 12.222, -0.644, 4, 116, 0.228, 18.982],
[45, 12.5, -0.646, 5, 121, 0.378, 19.36],
[46, 12.778, -0.648, 5, 126, 0.362, 19.722],
[47, 13.056, -0.651, 5, 131, 0.346, 20.068],
[48, 13.333, -0.654, 5, 136, 0.332, 20.4],
[49, 13.611, -0.657, 5, 141, 0.318, 20.718],
[50, 13.889, -0.656, 6, 147, 0.45, 21.168],
[51, 14.167, -0.66, 5, 152, 0.291, 21.459],
[52, 14.444, -0.66, 6, 158, 0.418, 21.877],
[53, 14.722, -0.665, 5, 163, 0.266, 22.143],
[54, 15, -0.666, 6, 169, 0.39, 22.533],
[55, 15.278, -0.667, 6, 175, 0.376, 22.909],
[56, 15.556, -0.668, 6, 181, 0.362, 23.271],
[57, 15.833, -0.67, 6, 187, 0.35, 23.621],
[58, 16.111, -0.669, 7, 194, 0.462, 24.083],
[59, 16.389, -0.671, 6, 200, 0.324, 24.407],
[60, 16.667, -0.671, 7, 207, 0.433, 24.84],
[61, 16.944, -0.674, 6, 213, 0.301, 25.141],
[62, 17.222, -0.674, 7, 220, 0.407, 25.548],
[63, 17.5, -0.675, 7, 227, 0.394, 25.943],
[64, 17.778, -0.675, 7, 234, 0.382, 26.325],
[65, 18.056, -0.676, 7, 241, 0.37, 26.695],
[66, 18.333, -0.678, 7, 248, 0.359, 27.055],
[67, 18.611, -0.677, 8, 256, 0.456, 27.51],
[68, 18.889, -0.678, 7, 263, 0.337, 27.847],
[69, 19.167, -0.678, 8, 271, 0.431, 28.278],
[70, 19.444, -0.678, 8, 279, 0.419, 28.697],
[71, 19.722, -0.68, 7, 286, 0.306, 29.003],
[72, 20, -0.68, 8, 294, 0.397, 29.4],
[73, 20.278, -0.681, 8, 302, 0.386, 29.786],
[74, 20.556, -0.679, 9, 311, 0.473, 30.259],
[75, 20.833, -0.68, 8, 319, 0.365, 30.624],
[76, 21.111, -0.679, 9, 328, 0.45, 31.074],
[77, 21.389, -0.681, 8, 336, 0.344, 31.418],
[78, 21.667, -0.68, 9, 345, 0.428, 31.846],
[79, 21.944, -0.68, 9, 354, 0.417, 32.263],
[80, 22.222, -0.68, 9, 363, 0.407, 32.67],
[81, 22.5, -0.68, 9, 372, 0.397, 33.067],
[82, 22.778, -0.681, 9, 381, 0.387, 33.454],
[83, 23.056, -0.68, 10, 391, 0.464, 33.918],
[84, 23.333, -0.681, 9, 400, 0.368, 34.286],
[85, 23.611, -0.68, 10, 410, 0.444, 34.729],
[86, 23.889, -0.679, 10, 420, 0.433, 35.163],
[87, 24.167, -0.681, 9, 429, 0.341, 35.503],
[88, 24.444, -0.681, 10, 439, 0.415, 35.918],
[89, 24.722, -0.681, 10, 449, 0.405, 36.324],
[90, 25, -0.679, 11, 460, 0.476, 36.8],
[91, 25.278, -0.68, 10, 470, 0.387, 37.187],
[92, 25.556, -0.68, 10, 480, 0.378, 37.565],
[93, 25.833, -0.68, 11, 491, 0.448, 38.013],
[94, 26.111, -0.68, 10, 501, 0.362, 38.374],
[95, 26.389, -0.68, 11, 512, 0.43, 38.804],
[96, 26.667, -0.68, 11, 523, 0.421, 39.225],
[97, 26.944, -0.68, 11, 534, 0.412, 39.637],
[98, 27.222, -0.68, 11, 545, 0.404, 40.041],
[99, 27.5, -0.68, 11, 556, 0.396, 40.436],
[100, 27.778, -0.68, 11, 567, 0.388, 40.824],
[101, 28.056, -0.68, 12, 579, 0.451, 41.275],
[102, 28.333, -0.68, 11, 590, 0.372, 41.647],
[103, 28.611, -0.68, 12, 602, 0.434, 42.082],
[104, 28.889, -0.68, 12, 614, 0.426, 42.508],
[105, 29.167, -0.679, 12, 626, 0.418, 42.926],
[106, 29.444, -0.681, 11, 637, 0.342, 43.268],
[107, 29.722, -0.68, 13, 650, 0.47, 43.738],
[108, 30, -0.68, 12, 662, 0.395, 44.133],
[109, 30.278, -0.68, 12, 674, 0.388, 44.521],
[110, 30.556, -0.68, 13, 687, 0.446, 44.967],
[111, 30.833, -0.68, 12, 699, 0.373, 45.341],
[112, 31.111, -0.68, 13, 712, 0.431, 45.771],
[113, 31.389, -0.68, 12, 724, 0.36, 46.131],
[114, 31.667, -0.68, 13, 737, 0.416, 46.547],
[115, 31.944, -0.68, 13, 750, 0.409, 46.957],
[116, 32.222, -0.68, 13, 763, 0.402, 47.359],
[117, 32.5, -0.68, 14, 777, 0.457, 47.815],
[118, 32.778, -0.68, 13, 790, 0.388, 48.203],
[119, 33.056, -0.68, 13, 803, 0.381, 48.585],
[120, 33.333, -0.68, 14, 817, 0.435, 49.02],
];
let emu_emergency_braking_data = [  [0, 0, -0.039, 0, 0, 0, 0],
[1, 0.278, -0.039, 1, 1, 7.2, 7.2],
[2, 0.556, -0.07, 1.2, 2.2, 0.72, 7.92],
[3, 0.833, -0.102, 1.2, 3.4, 0.24, 8.16],
[4, 1.111, -0.133, 1.25, 4.65, 0.21, 8.37],
[5, 1.389, -0.161, 1.35, 6, 0.27, 8.64],
[6, 1.667, -0.186, 1.45, 7.45, 0.3, 8.94],
[7, 1.944, -0.21, 1.55, 9, 0.317, 9.257],
[8, 2.222, -0.229, 1.8, 10.8, 0.463, 9.72],
[9, 2.5, -0.244, 2, 12.8, 0.52, 10.24],
[10, 2.778, -0.259, 2.1, 14.9, 0.488, 10.728],
[11, 3.056, -0.275, 2.1, 17, 0.399, 11.127],
[12, 3.333, -0.292, 2, 19, 0.273, 11.4],
[13, 3.611, -0.31, 2, 21, 0.231, 11.631],
[14, 3.889, -0.329, 2, 23, 0.198, 11.829],
[15, 4.167, -0.347, 2, 25, 0.171, 12],
[16, 4.444, -0.366, 2, 27, 0.15, 12.15],
[17, 4.722, -0.384, 2, 29, 0.132, 12.282],
[18, 5, -0.403, 2, 31, 0.118, 12.4],
[19, 5.278, -0.422, 2, 33, 0.105, 12.505],
[20, 5.556, -0.441, 2, 35, 0.095, 12.6],
[21, 5.833, -0.46, 2, 37, 0.086, 12.686],
[22, 6.111, -0.479, 2, 39, 0.078, 12.764],
[23, 6.389, -0.498, 2, 41, 0.071, 12.835],
[24, 6.667, -0.517, 2, 43, 0.065, 12.9],
[25, 6.944, -0.536, 2, 45, 0.06, 12.96],
[26, 7.222, -0.555, 2, 47, 0.055, 13.015],
[27, 7.5, -0.574, 2, 49, 0.051, 13.067],
[28, 7.778, -0.593, 2, 51, 0.048, 13.114],
[29, 8.056, -0.612, 2, 53, 0.044, 13.159],
[30, 8.333, -0.62, 3, 56, 0.281, 13.44],
[31, 8.611, -0.632, 2.7, 58.7, 0.194, 13.634],
[32, 8.889, -0.643, 2.7, 61.4, 0.181, 13.815],
[33, 9.167, -0.656, 2.6, 64, 0.149, 13.964],
[34, 9.444, -0.666, 3, 67, 0.225, 14.188],
[35, 9.722, -0.675, 3, 70, 0.212, 14.4],
[36, 10, -0.685, 3, 73, 0.2, 14.6],
[37, 10.278, -0.695, 3, 76, 0.189, 14.789],
[38, 10.556, -0.7, 3.6, 79.6, 0.293, 15.082],
[39, 10.833, -0.707, 3.4, 83, 0.241, 15.323],
[40, 11.111, -0.71, 4, 87, 0.337, 15.66],
[41, 11.389, -0.713, 4, 91, 0.32, 15.98],
[42, 11.667, -0.721, 3.4, 94.4, 0.202, 16.183],
[43, 11.944, -0.728, 3.6, 98, 0.226, 16.409],
[44, 12.222, -0.732, 4, 102, 0.282, 16.691],
[45, 12.5, -0.737, 4, 106, 0.269, 16.96],
[46, 12.778, -0.742, 4, 110, 0.257, 17.217],
[47, 13.056, -0.744, 4.5, 114.5, 0.323, 17.54],
[48, 13.333, -0.747, 4.5, 119, 0.31, 17.85],
[49, 13.611, -0.747, 5, 124, 0.37, 18.22],
[50, 13.889, -0.754, 4, 128, 0.212, 18.432],
[51, 14.167, -0.754, 5, 133, 0.344, 18.776],
[52, 14.444, -0.756, 5, 138, 0.331, 19.108],
[53, 14.722, -0.758, 5, 143, 0.319, 19.426],
[54, 15, -0.76, 5, 148, 0.307, 19.733],
[55, 15.278, -0.763, 5, 153, 0.296, 20.029],
[56, 15.556, -0.766, 5, 158, 0.285, 20.314],
[57, 15.833, -0.764, 6, 164, 0.402, 20.716],
[58, 16.111, -0.768, 5, 169, 0.264, 20.979],
[59, 16.389, -0.767, 6, 175, 0.377, 21.356],
[60, 16.667, -0.772, 5, 180, 0.244, 21.6],
[61, 16.944, -0.772, 6, 186, 0.354, 21.954],
[62, 17.222, -0.772, 6, 192, 0.343, 22.297],
[63, 17.5, -0.773, 6, 198, 0.332, 22.629],
[64, 17.778, -0.775, 6, 204, 0.321, 22.95],
[65, 18.056, -0.776, 6, 210, 0.312, 23.262],
[66, 18.333, -0.774, 7, 217, 0.411, 23.673],
[67, 18.611, -0.777, 6, 223, 0.291, 23.964],
[68, 18.889, -0.779, 6, 229, 0.283, 24.247],
[69, 19.167, -0.778, 7, 236, 0.379, 24.626],
[70, 19.444, -0.778, 7, 243, 0.368, 24.994],
[71, 19.722, -0.778, 7, 250, 0.358, 25.352],
[72, 20, -0.778, 7, 257, 0.348, 25.7],
[73, 20.278, -0.779, 7, 264, 0.338, 26.038],
[74, 20.556, -0.78, 7, 271, 0.329, 26.368],
[75, 20.833, -0.781, 7, 278, 0.32, 26.688],
[76, 21.111, -0.782, 7, 285, 0.312, 27],
[77, 21.389, -0.781, 8, 293, 0.397, 27.397],
[78, 21.667, -0.782, 7, 300, 0.295, 27.692],
[79, 21.944, -0.782, 8, 308, 0.379, 28.071],
[80, 22.222, -0.781, 8, 316, 0.369, 28.44],
[81, 22.5, -0.781, 8, 324, 0.36, 28.8],
[82, 22.778, -0.781, 8, 332, 0.351, 29.151],
[83, 23.056, -0.782, 8, 340, 0.343, 29.494],
[84, 23.333, -0.782, 8, 348, 0.335, 29.829],
[85, 23.611, -0.783, 8, 356, 0.327, 30.155],
[86, 23.889, -0.782, 9, 365, 0.403, 30.558],
[87, 24.167, -0.783, 8, 373, 0.311, 30.869],
[88, 24.444, -0.782, 9, 382, 0.386, 31.255],
[89, 24.722, -0.782, 9, 391, 0.377, 31.631],
[90, 25, -0.781, 9, 400, 0.369, 32],
[91, 25.278, -0.783, 8, 408, 0.281, 32.281],
[92, 25.556, -0.781, 10, 418, 0.432, 32.713],
[93, 25.833, -0.781, 9, 427, 0.345, 33.058],
[94, 26.111, -0.782, 9, 436, 0.338, 33.396],
[95, 26.389, -0.782, 9, 445, 0.331, 33.726],
[96, 26.667, -0.781, 10, 455, 0.399, 34.125],
[97, 26.944, -0.782, 9, 464, 0.316, 34.441],
[98, 27.222, -0.782, 10, 474, 0.383, 34.824],
[99, 27.5, -0.781, 10, 484, 0.376, 35.2],
[100, 27.778, -0.781, 10, 494, 0.368, 35.568],
[101, 28.056, -0.781, 10, 504, 0.361, 35.929],
[102, 28.333, -0.781, 10, 514, 0.354, 36.282],
[103, 28.611, -0.781, 10, 524, 0.347, 36.629],
[104, 28.889, -0.781, 10, 534, 0.34, 36.969],
[105, 29.167, -0.78, 11, 545, 0.402, 37.371],
[106, 29.444, -0.781, 10, 555, 0.327, 37.698],
[107, 29.722, -0.78, 11, 566, 0.388, 38.086],
[108, 30, -0.78, 11, 577, 0.381, 38.467],
[109, 30.278, -0.78, 11, 588, 0.374, 38.84],
[110, 30.556, -0.779, 11, 599, 0.367, 39.207],
[111, 30.833, -0.779, 11, 610, 0.36, 39.568],
[112, 31.111, -0.779, 11, 621, 0.354, 39.921],
[113, 31.389, -0.779, 11, 632, 0.348, 40.269],
[114, 31.667, -0.78, 11, 643, 0.341, 40.611],
[115, 31.944, -0.779, 12, 655, 0.398, 41.009],
[116, 32.222, -0.779, 11, 666, 0.329, 41.338],
[117, 32.5, -0.779, 12, 678, 0.385, 41.723],
[118, 32.778, -0.779, 12, 690, 0.379, 42.102],
[119, 33.056, -0.778, 12, 702, 0.372, 42.474],
[120, 33.333, -0.778, 12, 714, 0.366, 42.84],
];

let HCMT_service_braking_data = [  [ 0, 0, -0.2, 0, 0, 0, 0],
[ 1, 0.278, -0.2, 0.193, 0.193, 1.388, 1.388],
[ 2, 0.556, -0.4, 0.193, 0.386, 0, 1.388],
[ 3, 0.833, -0.353, 0.598, 0.984, 0.973, 2.361],
[ 4, 1.111, -0.374, 0.668, 1.652, 0.612, 2.973],
[ 5, 1.389, -0.404, 0.738, 2.39, 0.469, 3.442],
[ 6, 1.667, -0.434, 0.809, 3.199, 0.396, 3.838],
[ 7, 1.944, -0.464, 0.878, 4.077, 0.356, 4.194],
[ 8, 2.222, -0.491, 0.95, 5.027, 0.33, 4.524],
[ 9, 2.5, -0.517, 1.019, 6.046, 0.313, 4.837],
[ 10, 2.778, -0.551, 0.954, 7, 0.203, 5.04],
[ 11, 3.056, -0.563, 1.295, 8.295, 0.39, 5.43],
[ 12, 3.333, -0.583, 1.23, 9.525, 0.285, 5.715],
[ 13, 3.611, -0.602, 1.3, 10.825, 0.281, 5.996],
[ 14, 3.889, -0.62, 1.371, 12.196, 0.276, 6.272],
[ 15, 4.167, -0.637, 1.44, 13.636, 0.273, 6.545],
[ 16, 4.444, -0.652, 1.511, 15.147, 0.271, 6.816],
[ 17, 4.722, -0.667, 1.581, 16.728, 0.269, 7.085],
[ 18, 5, -0.68, 1.652, 18.38, 0.267, 7.352],
[ 19, 5.278, -0.693, 1.721, 20.101, 0.248, 7.6],
[ 20, 5.556, -0.735, 0.899, 21, -0.04, 7.56],
[ 21, 5.833, -0.716, 2.755, 23.755, 0.584, 8.144],
[ 22, 6.111, -0.727, 1.932, 25.687, 0.263, 8.407],
[ 23, 6.389, -0.737, 2.002, 27.689, 0.261, 8.668],
[ 24, 6.667, -0.747, 2.073, 29.762, 0.26, 8.928],
[ 25, 6.944, -0.756, 2.142, 31.904, 0.26, 9.188],
[ 26, 7.222, -0.764, 2.213, 34.117, 0.26, 9.448],
[ 27, 7.5, -0.773, 2.283, 36.4, 0.259, 9.707],
[ 28, 7.778, -0.78, 2.354, 38.754, 0.258, 9.965],
[ 29, 8.056, -0.788, 2.423, 41.177, 0.258, 10.223],
[ 30, 8.333, -0.807, 1.823, 43, 0.097, 10.32],
[ 31, 8.611, -0.802, 3.234, 46.234, 0.418, 10.738],
[ 32, 8.889, -0.808, 2.634, 48.868, 0.257, 10.995],
[ 33, 9.167, -0.815, 2.705, 51.573, 0.257, 11.252],
[ 34, 9.444, -0.821, 2.774, 54.347, 0.257, 11.509],
[ 35, 9.722, -0.826, 2.844, 57.191, 0.256, 11.765],
[ 36, 10, -0.832, 2.915, 60.106, 0.256, 12.021],
[ 37, 10.278, -0.837, 2.985, 63.091, 0.256, 12.277],
[ 38, 10.556, -0.842, 3.055, 66.146, 0.256, 12.533],
[ 39, 10.833, -0.847, 3.125, 69.271, 0.256, 12.789],
[ 40, 11.111, -0.846, 3.729, 73, 0.351, 13.14],
[ 41, 11.389, -0.856, 2.732, 75.732, 0.159, 13.299],
[ 42, 11.667, -0.861, 3.336, 79.068, 0.255, 13.554],
[ 43, 11.944, -0.865, 3.405, 82.473, 0.255, 13.809],
[ 44, 12.222, -0.869, 3.476, 85.949, 0.255, 14.064],
[ 45, 12.5, -0.873, 3.546, 89.495, 0.255, 14.319],
[ 46, 12.778, -0.877, 3.617, 93.112, 0.255, 14.574],
[ 47, 13.056, -0.88, 3.686, 96.798, 0.255, 14.829],
[ 48, 13.333, -0.884, 3.756, 100.554, 0.254, 15.083],
[ 49, 13.611, -0.887, 3.827, 104.381, 0.255, 15.338],
[ 50, 13.889, -0.885, 4.619, 109, 0.358, 15.696],
[ 51, 14.167, -0.894, 3.245, 112.245, 0.15, 15.846],
[ 52, 14.444, -0.897, 4.037, 116.282, 0.255, 16.101],
[ 53, 14.722, -0.9, 4.107, 120.389, 0.254, 16.355],
[ 54, 15, -0.903, 4.177, 124.566, 0.254, 16.609],
[ 55, 15.278, -0.906, 4.248, 128.814, 0.254, 16.863],
[ 56, 15.556, -0.909, 4.317, 133.131, 0.254, 17.117],
[ 57, 15.833, -0.911, 4.388, 137.519, 0.254, 17.371],
[ 58, 16.111, -0.914, 4.458, 141.977, 0.254, 17.625],
[ 59, 16.389, -0.917, 4.527, 146.504, 0.254, 17.879],
[ 60, 16.667, -0.92, 4.496, 151, 0.241, 18.12],
[ 61, 16.944, -0.922, 4.77, 155.77, 0.266, 18.386],
[ 62, 17.222, -0.924, 4.739, 160.509, 0.254, 18.64],
[ 63, 17.5, -0.926, 4.808, 165.317, 0.253, 18.893],
[ 64, 17.778, -0.928, 4.878, 170.195, 0.254, 19.147],
[ 65, 18.056, -0.931, 4.949, 175.144, 0.254, 19.401],
[ 66, 18.333, -0.933, 5.018, 180.162, 0.253, 19.654],
[ 67, 18.611, -0.935, 5.089, 185.251, 0.254, 19.908],
[ 68, 18.889, -0.937, 5.159, 190.41, 0.253, 20.161],
[ 69, 19.167, -0.939, 5.229, 195.639, 0.253, 20.414],
[ 70, 19.444, -0.941, 5.361, 201, 0.26, 20.674],
[ 71, 19.722, -0.943, 5.307, 206.307, 0.247, 20.921],
[ 72, 20, -0.945, 5.439, 211.746, 0.254, 21.175],
[ 73, 20.278, -0.946, 5.509, 217.255, 0.253, 21.428],
[ 74, 20.556, -0.948, 5.579, 222.834, 0.253, 21.681],
[ 75, 20.833, -0.95, 5.65, 228.484, 0.253, 21.934],
[ 76, 21.111, -0.951, 5.719, 234.203, 0.254, 22.188],
[ 77, 21.389, -0.953, 5.79, 239.993, 0.253, 22.441],
[ 78, 21.667, -0.955, 5.859, 245.852, 0.253, 22.694],
[ 79, 21.944, -0.956, 5.93, 251.782, 0.253, 22.947],
[ 80, 22.222, -0.957, 6.218, 258, 0.273, 23.22],
[ 81, 22.5, -0.959, 5.851, 263.851, 0.233, 23.453],
[ 82, 22.778, -0.961, 6.14, 269.991, 0.254, 23.707],
[ 83, 23.056, -0.962, 6.21, 276.201, 0.253, 23.96],
[ 84, 23.333, -0.964, 6.28, 282.481, 0.253, 24.213],
[ 85, 23.611, -0.965, 6.35, 288.831, 0.253, 24.466],
[ 86, 23.889, -0.966, 6.42, 295.251, 0.253, 24.719],
[ 87, 24.167, -0.968, 6.49, 301.741, 0.253, 24.972],
[ 88, 24.444, -0.969, 6.56, 308.301, 0.253, 25.225],
[ 89, 24.722, -0.97, 6.63, 314.931, 0.253, 25.478],
[ 90, 25, -0.97, 7.069, 322, 0.282, 25.76],
[ 91, 25.278, -0.973, 6.401, 328.401, 0.223, 25.983],
[ 92, 25.556, -0.974, 6.841, 335.242, 0.253, 26.236],
[ 93, 25.833, -0.975, 6.91, 342.152, 0.253, 26.489],
[ 94, 26.111, -0.976, 6.98, 349.132, 0.253, 26.742],
[ 95, 26.389, -0.978, 7.051, 356.183, 0.253, 26.995],
[ 96, 26.667, -0.979, 7.12, 363.303, 0.253, 27.248],
[ 97, 26.944, -0.98, 7.19, 370.493, 0.253, 27.501],
[ 98, 27.222, -0.981, 7.261, 377.754, 0.252, 27.753],
[ 99, 27.5, -0.982, 7.33, 385.084, 0.253, 28.006],
[ 100, 27.778, -0.984, 6.916, 392, 0.218, 28.224],
[ 101, 28.056, -0.984, 7.955, 399.955, 0.288, 28.512],
[ 102, 28.333, -0.985, 7.54, 407.495, 0.252, 28.764],
[ 103, 28.611, -0.986, 7.611, 415.106, 0.253, 29.017],
[ 104, 28.889, -0.987, 7.68, 422.786, 0.253, 29.27],
[ 105, 29.167, -0.988, 7.751, 430.537, 0.253, 29.523],
[ 106, 29.444, -0.989, 7.82, 438.357, 0.252, 29.775],
[ 107, 29.722, -0.99, 7.891, 446.248, 0.253, 30.028],
[ 108, 30, -0.991, 7.96, 454.208, 0.253, 30.281],
[ 109, 30.278, -0.992, 8.031, 462.239, 0.252, 30.533],
[ 110, 30.556, -0.993, 7.761, 470, 0.231, 30.764],
[ 111, 30.833, -0.993, 8.509, 478.509, 0.274, 31.038],
[ 112, 31.111, -0.994, 8.241, 486.75, 0.253, 31.291],
[ 113, 31.389, -0.995, 8.31, 495.06, 0.253, 31.544],
[ 114, 31.667, -0.996, 8.381, 503.441, 0.252, 31.796],
[ 115, 31.944, -0.997, 8.45, 511.891, 0.253, 32.049],
[ 116, 32.222, -0.998, 8.52, 520.411, 0.252, 32.301],
[ 117, 32.5, -0.998, 8.59, 529.001, 0.253, 32.554],
[ 118, 32.778, -0.999, 8.661, 537.662, 0.252, 32.806],
[ 119, 33.056, -1, 8.73, 546.392, 0.253, 33.059],
[ 120, 33.333, -1.001, 8.608, 555, 0.241, 33.3],
[ 121, 33.611, -1.001, 9.062, 564.062, 0.264, 33.564],
[ 122, 33.889, -1.002, 8.94, 573.002, 0.253, 33.817],
[ 123, 34.167, -1.003, 9.011, 582.013, 0.252, 34.069],
[ 124, 34.444, -1.004, 9.08, 591.093, 0.253, 34.322],
[ 125, 34.722, -1.004, 9.15, 600.243, 0.252, 34.574],
[ 126, 35, -1.005, 9.22, 609.463, 0.252, 34.826],
[ 127, 35.278, -1.006, 9.289, 618.752, 0.253, 35.079],
[ 128, 35.556, -1.006, 9.36, 628.112, 0.252, 35.331],
[ 129, 35.833, -1.007, 9.43, 637.542, 0.253, 35.584],
[ 130, 36.111, -1.008, 9.458, 647, 0.25, 35.834],
[ 131, 36.389, -1.008, 9.611, 656.611, 0.255, 36.089],
[ 132, 36.667, -1.009, 9.64, 666.251, 0.252, 36.341],
[ 133, 36.944, -1.01, 9.71, 675.961, 0.252, 36.593],
[ 134, 37.222, -1.01, 9.779, 685.74, 0.253, 36.846],
[ 135, 37.5, -1.011, 9.85, 695.59, 0.252, 37.098],
[ 136, 37.778, -1.011, 9.919, 705.509, 0.252, 37.35],
[ 137, 38.056, -1.012, 9.989, 715.498, 0.253, 37.603],
[ 138, 38.333, -1.013, 10.059, 725.557, 0.252, 37.855],
[ 139, 38.611, -1.013, 10.129, 735.686, 0.252, 38.107],
[ 140, 38.889, -1.014, 10.314, 746, 0.259, 38.366],
[ 141, 39.167, -1.014, 10.154, 756.154, 0.246, 38.612],
[ 142, 39.444, -1.015, 10.339, 766.493, 0.252, 38.864],
[ 143, 39.722, -1.015, 10.507, 777, 0.258, 39.122],
];

let HCMT_emergency_braking_data = [  [ 0, 0, -0.083, 0, 0, 0, 0],
[ 1, 0.278, -0.083, 0.464, 0.464, 3, 3],
[ 2, 0.556, -0.188, 0.358, 0.822, -0.04, 2.96],
[ 3, 0.833, -0.281, 0.415, 1.237, 0.01, 2.97],
[ 4, 1.111, -0.361, 0.473, 1.71, 0.108, 3.078],
[ 5, 1.389, -0.431, 0.529, 2.239, 0.147, 3.225],
[ 6, 1.667, -0.491, 0.587, 2.826, 0.167, 3.392],
[ 7, 1.944, -0.545, 0.644, 3.47, 0.178, 3.57],
[ 8, 2.222, -0.592, 0.702, 4.172, 0.184, 3.754],
[ 9, 2.5, -0.634, 0.758, 4.93, 0.19, 3.944],
[ 10, 2.778, -0.643, 1.07, 6, 0.376, 4.32],
[ 11, 3.056, -0.705, 0.619, 6.619, 0.012, 4.332],
[ 12, 3.333, -0.736, 0.93, 7.549, 0.197, 4.529],
[ 13, 3.611, -0.764, 0.987, 8.536, 0.199, 4.728],
[ 14, 3.889, -0.789, 1.045, 9.581, 0.199, 4.927],
[ 15, 4.167, -0.813, 1.102, 10.683, 0.201, 5.128],
[ 16, 4.444, -0.834, 1.158, 11.841, 0.201, 5.329],
[ 17, 4.722, -0.854, 1.217, 13.058, 0.201, 5.53],
[ 18, 5, -0.872, 1.273, 14.331, 0.202, 5.732],
[ 19, 5.278, -0.889, 1.331, 15.662, 0.203, 5.935],
[ 20, 5.556, -0.908, 1.338, 17, 0.185, 6.12],
[ 21, 5.833, -0.92, 1.495, 18.495, 0.221, 6.341],
[ 22, 6.111, -0.934, 1.502, 19.997, 0.203, 6.544],
[ 23, 6.389, -0.947, 1.559, 21.556, 0.204, 6.748],
[ 24, 6.667, -0.959, 1.617, 23.173, 0.204, 6.952],
[ 25, 6.944, -0.97, 1.674, 24.847, 0.204, 7.156],
[ 26, 7.222, -0.981, 1.731, 26.578, 0.204, 7.36],
[ 27, 7.5, -0.991, 1.788, 28.366, 0.204, 7.564],
[ 28, 7.778, -1.001, 1.846, 30.212, 0.205, 7.769],
[ 29, 8.056, -1.01, 1.903, 32.115, 0.204, 7.973],
[ 30, 8.333, -1.021, 1.885, 34, 0.187, 8.16],
[ 31, 8.611, -1.027, 2.092, 36.092, 0.223, 8.383],
[ 32, 8.889, -1.035, 2.074, 38.166, 0.204, 8.587],
[ 33, 9.167, -1.043, 2.132, 40.298, 0.205, 8.792],
[ 34, 9.444, -1.05, 2.189, 42.487, 0.205, 8.997],
[ 35, 9.722, -1.057, 2.246, 44.733, 0.205, 9.202],
[ 36, 10, -1.063, 2.303, 47.036, 0.205, 9.407],
[ 37, 10.278, -1.069, 2.36, 49.396, 0.205, 9.612],
[ 38, 10.556, -1.075, 2.418, 51.814, 0.205, 9.817],
[ 39, 10.833, -1.081, 2.475, 54.289, 0.206, 10.023],
[ 40, 11.111, -1.083, 2.711, 57, 0.237, 10.26],
[ 41, 11.389, -1.092, 2.41, 59.41, 0.173, 10.433],
[ 42, 11.667, -1.097, 2.647, 62.057, 0.205, 10.638],
[ 43, 11.944, -1.102, 2.704, 64.761, 0.206, 10.844],
[ 44, 12.222, -1.106, 2.761, 67.522, 0.205, 11.049],
[ 45, 12.5, -1.111, 2.818, 70.34, 0.205, 11.254],
[ 46, 12.778, -1.115, 2.875, 73.215, 0.206, 11.46],
[ 47, 13.056, -1.119, 2.933, 76.148, 0.205, 11.665],
[ 48, 13.333, -1.123, 2.99, 79.138, 0.206, 11.871],
[ 49, 13.611, -1.127, 3.047, 82.185, 0.205, 12.076],
[ 50, 13.889, -1.135, 2.815, 85, 0.164, 12.24],
[ 51, 14.167, -1.135, 3.45, 88.45, 0.247, 12.487],
[ 52, 14.444, -1.138, 3.219, 91.669, 0.206, 12.693],
[ 53, 14.722, -1.141, 3.276, 94.945, 0.205, 12.898],
[ 54, 15, -1.145, 3.333, 98.278, 0.206, 13.104],
[ 55, 15.278, -1.148, 3.39, 101.668, 0.205, 13.309],
[ 56, 15.556, -1.151, 3.448, 105.116, 0.206, 13.515],
[ 57, 15.833, -1.154, 3.505, 108.621, 0.206, 13.721],
[ 58, 16.111, -1.157, 3.562, 112.183, 0.205, 13.926],
[ 59, 16.389, -1.16, 3.619, 115.802, 0.206, 14.132],
[ 60, 16.667, -1.157, 4.198, 120, 0.268, 14.4],
[ 61, 16.944, -1.165, 3.212, 123.212, 0.143, 14.543],
[ 62, 17.222, -1.168, 3.791, 127.003, 0.206, 14.749],
[ 63, 17.5, -1.17, 3.848, 130.851, 0.205, 14.954],
[ 64, 17.778, -1.173, 3.905, 134.756, 0.206, 15.16],
[ 65, 18.056, -1.175, 3.962, 138.718, 0.206, 15.366],
[ 66, 18.333, -1.177, 4.02, 142.738, 0.205, 15.571],
[ 67, 18.611, -1.18, 4.077, 146.815, 0.206, 15.777],
[ 68, 18.889, -1.182, 4.134, 150.949, 0.206, 15.983],
[ 69, 19.167, -1.184, 4.191, 155.14, 0.206, 16.189],
[ 70, 19.444, -1.189, 3.86, 159, 0.165, 16.354],
[ 71, 19.722, -1.188, 4.695, 163.695, 0.246, 16.6],
[ 72, 20, -1.19, 4.363, 168.058, 0.206, 16.806],
[ 73, 20.278, -1.192, 4.42, 172.478, 0.206, 17.012],
[ 74, 20.556, -1.194, 4.477, 176.955, 0.205, 17.217],
[ 75, 20.833, -1.196, 4.535, 181.49, 0.206, 17.423],
[ 76, 21.111, -1.198, 4.592, 186.082, 0.206, 17.629],
[ 77, 21.389, -1.199, 4.649, 190.731, 0.206, 17.835],
[ 78, 21.667, -1.201, 4.706, 195.437, 0.205, 18.04],
[ 79, 21.944, -1.203, 4.763, 200.2, 0.206, 18.246],
[ 80, 22.222, -1.204, 4.8, 205, 0.204, 18.45],
[ 81, 22.5, -1.206, 4.899, 209.899, 0.208, 18.658],
[ 82, 22.778, -1.208, 4.935, 214.834, 0.205, 18.863],
[ 83, 23.056, -1.209, 4.992, 219.826, 0.206, 19.069],
[ 84, 23.333, -1.211, 5.05, 224.876, 0.206, 19.275],
[ 85, 23.611, -1.212, 5.106, 229.982, 0.206, 19.481],
[ 86, 23.889, -1.213, 5.164, 235.146, 0.206, 19.687],
[ 87, 24.167, -1.215, 5.222, 240.368, 0.205, 19.892],
[ 88, 24.444, -1.216, 5.278, 245.646, 0.206, 20.098],
[ 89, 24.722, -1.218, 5.335, 250.981, 0.206, 20.304],
[ 90, 25, -1.221, 5.019, 256, 0.176, 20.48],
[ 91, 25.278, -1.22, 5.824, 261.824, 0.236, 20.716],
[ 92, 25.556, -1.221, 5.508, 267.332, 0.206, 20.922],
[ 93, 25.833, -1.223, 5.564, 272.896, 0.205, 21.127],
[ 94, 26.111, -1.224, 5.622, 278.518, 0.206, 21.333],
[ 95, 26.389, -1.225, 5.679, 284.197, 0.206, 21.539],
[ 96, 26.667, -1.226, 5.736, 289.933, 0.206, 21.745],
[ 97, 26.944, -1.227, 5.793, 295.726, 0.206, 21.951],
[ 98, 27.222, -1.229, 5.85, 301.576, 0.206, 22.157],
[ 99, 27.5, -1.23, 5.908, 307.484, 0.205, 22.362],
[ 100, 27.778, -1.229, 6.516, 314, 0.246, 22.608],
[ 101, 28.056, -1.232, 5.471, 319.471, 0.166, 22.774],
[ 102, 28.333, -1.233, 6.08, 325.551, 0.206, 22.98],
[ 103, 28.611, -1.234, 6.136, 331.687, 0.206, 23.186],
[ 104, 28.889, -1.235, 6.194, 337.881, 0.206, 23.392],
[ 105, 29.167, -1.236, 6.251, 344.132, 0.206, 23.598],
[ 106, 29.444, -1.237, 6.308, 350.44, 0.205, 23.803],
[ 107, 29.722, -1.238, 6.366, 356.806, 0.206, 24.009],
[ 108, 30, -1.239, 6.422, 363.228, 0.206, 24.215],
[ 109, 30.278, -1.24, 6.48, 369.708, 0.206, 24.421],
[ 110, 30.556, -1.242, 6.292, 376, 0.19, 24.611],
[ 111, 30.833, -1.242, 6.84, 382.84, 0.222, 24.833],
[ 112, 31.111, -1.243, 6.651, 389.491, 0.206, 25.039],
[ 113, 31.389, -1.243, 6.709, 396.2, 0.206, 25.245],
[ 114, 31.667, -1.244, 6.766, 402.966, 0.205, 25.45],
[ 115, 31.944, -1.245, 6.823, 409.789, 0.206, 25.656],
[ 116, 32.222, -1.246, 6.88, 416.669, 0.206, 25.862],
[ 117, 32.5, -1.247, 6.938, 423.607, 0.206, 26.068],
[ 118, 32.778, -1.248, 6.995, 430.602, 0.206, 26.274],
[ 119, 33.056, -1.248, 7.052, 437.654, 0.206, 26.48],
[ 120, 33.333, -1.248, 7.346, 445, 0.22, 26.7],
[ 121, 33.611, -1.25, 6.929, 451.929, 0.192, 26.892],
[ 122, 33.889, -1.251, 7.224, 459.153, 0.206, 27.098],
[ 123, 34.167, -1.251, 7.281, 466.434, 0.205, 27.303],
[ 124, 34.444, -1.252, 7.338, 473.772, 0.206, 27.509],
[ 125, 34.722, -1.253, 7.395, 481.167, 0.206, 27.715],
[ 126, 35, -1.254, 7.453, 488.62, 0.206, 27.921],
[ 127, 35.278, -1.254, 7.509, 496.129, 0.206, 28.127],
[ 128, 35.556, -1.255, 7.567, 503.696, 0.206, 28.333],
[ 129, 35.833, -1.256, 7.624, 511.32, 0.206, 28.539],
[ 130, 36.111, -1.256, 7.68, 519, 0.206, 28.745],
[ 131, 36.389, -1.257, 7.74, 526.74, 0.206, 28.951],
[ 132, 36.667, -1.258, 7.796, 534.536, 0.206, 29.157],
[ 133, 36.944, -1.258, 7.853, 542.389, 0.205, 29.362],
[ 134, 37.222, -1.259, 7.91, 550.299, 0.206, 29.568],
[ 135, 37.5, -1.259, 7.968, 558.267, 0.206, 29.774],
[ 136, 37.778, -1.26, 8.024, 566.291, 0.206, 29.98],
[ 137, 38.056, -1.261, 8.082, 574.373, 0.206, 30.186],
[ 138, 38.333, -1.261, 8.139, 582.512, 0.206, 30.392],
[ 139, 38.611, -1.262, 8.196, 590.708, 0.206, 30.598],
[ 140, 38.889, -1.262, 8.292, 599, 0.208, 30.806],
[ 141, 39.167, -1.263, 8.273, 607.273, 0.204, 31.01],
[ 142, 39.444, -1.264, 8.368, 615.641, 0.206, 31.216],
[ 143, 39.722, -1.264, 8.359, 624, 0.202, 31.418],
];

let Xtrap_emergency_brake_rate = -1.35;
let Xtrap_service_brake_rate = -1.1;
let Nclass_emergency_brake_rate = -0.60;
let Nclass_service_brake_rate = -0.56;
let Sprinter_service_brake_rate = -0.73;
let Sprinter_emergency_brake_rate = -0.83;
let Vlocity_service_brake_rate = -0.95;
let Vlocity_emergency_brake_rate = -1.12;

const initial_run = setTimeout(run_initial, 300);
//initialise desmos stuff
let elt = document.getElementById('calculator');
let calculator = Desmos.GraphingCalculator(elt);
//set variables (these will come from user inputs later)
let linespeed = 80 //km/h
let decel = -0.71
let total_time = 10; //this should be estimated by the program but for now its ok for user input.
let stop_chainages = [9050, 9720, 10768, 11720] //m 
let accel_rate = 0.69 //m/s/s
// let train_type = [];
let starting_phase = 'accel' //this was originally set to decel but is now at accel, i think it should always be at accel.

let med_speed =40/3.6;

//this data will keep a log of every second of the journey, it will then be able to help with headways and output journey to a csv file!
let journey_data = {
    time: [],
    distance: [],
    accel_rate: [],
    local_gradient: [],
    local_speed: []
}


let dwell_time = 30 //s




let input_vars = {
    grad: [0.51,0.88,0.54,0.93,1.56,1.95,-2.31,2.5,2.43,-0.84,-1.65,-2.66,-0.93,1.35,2.77,2.01,0.96,0.21,-0.25,-1.25,-2.15,-2.56,-1.76,-1.39,-0.63,0.22,1.37,1.54,-0.33,-2.25,0.12,2.5,1.08,-0.33,-1.38,-2.44,0.03,2.5,1.29,-0.34,-0.26,-0.77,-0.25,-0.8],
    grad_chainages: [26000,26202,26310,26325,26372,26428,26509,26690,26869,26950,27062,27117,27341,27401,27480,27715,27801,27856,27963,28120,28195,28290,29182,29520,29600,29670,30250,30322,30369,30439,30512,30642,30710,30760,30923,30959,31081,31212,31355,31400,31510,31650,31900,32080],
    station_names: ['HMT','BAY', 'L1019'],
    station_chainages: [28206,30923,32110],
    speed_restrictions: [80, 40, 80],
    speed_restriction_chainages: [1000, 26104, 28200], //km/h
    signal_names: ['RWD328','L855','L879','BAY302','BAY304','BAY310','BAY210'],
    signal_chainages: [26634,27570,28229,29787,30304,30943,31583],
    overlap_names: [], //this should be filled automatically based on signal name appended to o/lap type.
    overlap_chainages: [28036,29308,30313,30436,31592,32110], 
    overlap_type: ['a','a','a','b','a','a'], //this will be a or b overlap type. //THE REST : ,'b','b','b','a','a','a','a','a','b'
    start_chainage: 25000,
    end_chainage: 32080,
    // train_type: EMU,
    starting_phase: "accel",
    linespeed: 80
}

let start_chainage = input_vars["start_chainage"];
let end_chainage = input_vars["end_chainage"];

let calculated_vars = {
    signal_to_signal_av_gradients: [],
    signal_to_signal_distance: [],
    signal_to_next_signal_av_gradient: [],
    signal_to_next_signal_distance: [],
    signal_to_olap_gradient: [],
    signal_to_olap_distance: []
}

calculator.setMathBounds({
    left: start_chainage-10,
    right: end_chainage+100,
    bottom: -total_time,
    top: 20
});


//initialise all coutners
let phase_count = 0;
let decel_count = 0;
let accel_count = 0;
let dwell_count = 0;
let constant_count = 0;

//lists accumulated time for each phase
let time_accumulated = [0]
let distance_accumulated = [start_chainage]

//initialise more counters for adding HTML input elements
let call_count = 0;

let grad_input_count = 0; //initialises counting the input gradient values
let signal_overlap_count = 0;
let station_count = 0;
let speed_restriction_count = 0; //initialise the number of restrictions

//set up constants for all train types!
EMU = {
    accel: 0.69,
    decel: -0.71,
    emerg_decel: -0.81,
    length: 150
}

vlocity = {
    accel: 0.9,
    decel: -0.95,
    emerg_decel: -1.12,
    length: 75.8
}
//BELOW ARE NEW GLOBAL VARIABLES THAT MAY NEED TO BE DELETED AFTER TESTING
let train_type = "EMU"
let current_temp_gloabal_grad = 0;

let signal_spacing_table_data_object = {
    calc_type: "Service Braking",
    train_type: train_type,
    initial_speed:0,
    final_speed: 0,
    time:0,
    accel:0,
    av_grad:0,
    th_distance:0,
    actual_distance:0,
    start_chainage:0,
    from_sig:"",
    end_chainage:0,
    exit_signal:"",
    margin:0,
    safety_status:"",
    last_green_aspect: []
}
let olap_spacing_table_data_object = {
    calc_type: "Emergency Braking",
    train_type: train_type,
    initial_speed:0,
    final_speed: 0,
    time:0,
    accel:0,
    av_grad:0,
    th_distance:0,
    actual_distance:0,
    start_chainage:0,
    from_sig:"",
    end_chainage:0,
    exit_signal:"",
    margin:0,
    safety_status:""
}

let signal_spacing_linespeed_to_medspeed_table_data_object = {
    calc_type: [],
    train_type: [],
    initial_speed:[],
    final_speed: [],
    time:[],
    accel:[],
    av_grad:[],
    th_distance:[],
    actual_distance:[],
    last_green_aspect: [],
    start_chainage:[],
    from_sig:[],
    end_chainage:[],
    exit_signal:[],
    margin:[],
    safety_status:[],
}

let signal_spacing_linespeed_to_0_table_data_object = {
    calc_type: [],
    train_type: [],
    initial_speed:[],
    final_speed: [],
    time:[],
    accel:[],
    av_grad:[],
    th_distance:[],
    actual_distance:[],
    last_green_aspect: [],
    start_chainage:[],
    from_sig:[],
    end_chainage:[],
    exit_signal:[],
    margin:[],
    safety_status:[],
}





let train_specs_clean_temp = ""

//IN HERE ARE FUNCTIONS and DATA THAT SHOULD BE PUT IN A GLOBAL FILE! KEEP THESE COLLAPSTED

function find_values(train_dynamics_data, input_values){

    //initialise arrya for new train dynamics data 
    let new_adjusted_train_dynamics_data = [];
    // for (let i=0; i < train_dynamics_data.length; i++){
    //     new_adjusted_train_dynamics_data.push([])
    //     for (let j = 0; j< 7; j++){
    //         new_adjusted_train_dynamics_data[i].push(0);
    //     }
    // }

    //duplicates the train dynamics data
    for (var i = 0; i < train_dynamics_data.length; i++){
        new_adjusted_train_dynamics_data[i] = train_dynamics_data[i].slice();
    }
    // console.log(new_adjusted_train_dynamics_data);
    // console.log(train_dynamics_data)

    //deals with case of a given gradient
    if (input_values['grad'] !== "" & input_values['grad'] !== 0){
        //Need to create this new train dynamics data set which is adjusted for the gradient!
        for (let i=0; i < train_dynamics_data.length; i++){
            new_adjusted_train_dynamics_data[i][0] = train_dynamics_data[i][0];
            new_adjusted_train_dynamics_data[i][1] = train_dynamics_data[i][1];
            new_adjusted_train_dynamics_data[i][2] = train_dynamics_data[i][2]-(9.81*input_values['grad']/100);
            new_adjusted_train_dynamics_data[i][3] = 0;
            new_adjusted_train_dynamics_data[i][4] = 0;
            new_adjusted_train_dynamics_data[i][5] = 0;
            new_adjusted_train_dynamics_data[i][6] = 0;
        }

        if(train_dynamics_data[1][2] > 0){ //accel calc{
            console.log("accel calc!")
            for (let i = 1; i < train_dynamics_data.length-1; i++){
                new_adjusted_train_dynamics_data[i][3] = (new_adjusted_train_dynamics_data[i][1]**2 - new_adjusted_train_dynamics_data[i-1][1]**2)/(2*(new_adjusted_train_dynamics_data[i][2]+new_adjusted_train_dynamics_data[i-1][2])/2); //x = v^2-u^2/2a
                new_adjusted_train_dynamics_data[i][4] = new_adjusted_train_dynamics_data[i-1][4] + new_adjusted_train_dynamics_data[i][3];
                new_adjusted_train_dynamics_data[i][5] = (new_adjusted_train_dynamics_data[i][1]- new_adjusted_train_dynamics_data[i-1][1])/((new_adjusted_train_dynamics_data[i][2]+new_adjusted_train_dynamics_data[i-1][2])/2); // t = v-u/a
                new_adjusted_train_dynamics_data[i][6] = new_adjusted_train_dynamics_data[i][5] + new_adjusted_train_dynamics_data[i-1][6];
            }
        }
        
        //u will now be i+1 in the data rather than i-1
        else if(train_dynamics_data[1][2] < 0){ //braking calc
            console.log("braking calc!")
            for (let i = 0; i < train_dynamics_data.length-1; i++){
                new_adjusted_train_dynamics_data[i][3] = (new_adjusted_train_dynamics_data[i][1]**2 - new_adjusted_train_dynamics_data[i+1][1]**2)/(2*(new_adjusted_train_dynamics_data[i][2]+new_adjusted_train_dynamics_data[i+1][2])/2); //x = v^2-u^2/2a
                new_adjusted_train_dynamics_data[i][4] = new_adjusted_train_dynamics_data[i][1]**2/(-2*new_adjusted_train_dynamics_data[i][2]);
                new_adjusted_train_dynamics_data[i][5] = (new_adjusted_train_dynamics_data[i][1]- new_adjusted_train_dynamics_data[i+1][1])/((new_adjusted_train_dynamics_data[i][2]+new_adjusted_train_dynamics_data[i+1][2])/2); // t = v-u/a
                new_adjusted_train_dynamics_data[i][6] = -new_adjusted_train_dynamics_data[i][1]/new_adjusted_train_dynamics_data[i+1][2];
                }
            }            
        }

    let time_accumulation = 0; //initiaise
    //let sum_av_accel = 0; //initialise
    let distance_accumulation = 0; //initialise
    i = 0;

    if (input_values['initial_vel'] !== "" && input_values['final_vel'] !== ""){
        //initial & final velocity given. 
        //assuming m/s 
        //IF m/s
        let initial_vel = Math.round(input_values['initial_vel'] * 3.6); //round to nearest table value(integer)
        let final_vel = Math.round(input_values['final_vel']*3.6); 
        if (initial_vel < final_vel){ //acceleration calc
            time_accumulation = new_adjusted_train_dynamics_data[final_vel][6] - new_adjusted_train_dynamics_data[initial_vel][6];
            distance_accumulation = new_adjusted_train_dynamics_data[final_vel][4] - new_adjusted_train_dynamics_data[initial_vel][4];
        }

        if (initial_vel > final_vel){ //deceleration calc
            time_accumulation = new_adjusted_train_dynamics_data[initial_vel][6] - new_adjusted_train_dynamics_data[final_vel][6];
            distance_accumulation =  new_adjusted_train_dynamics_data[initial_vel][4] - new_adjusted_train_dynamics_data[final_vel][4];
        }
        eff_accel = Math.round(((input_values['final_vel'] - input_values['initial_vel'])/time_accumulation)*100)/100;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [input_values['initial_vel'], input_values['final_vel'], time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        // console.log(vals_array);
        // console.log(input_values)
        //vals_array = take_gradient(vals_array, input_values);
        return vals_array;
        }

    if (input_values['initial_vel'] !== "" && input_values['distance'] !== ""){
        //initial vel give & distance given. this is an exageration and is the reason interpolation needs to be done!
        //need to work out the factor of safety here especially for high speeds
        i= Math.round(input_values['initial_vel'] * 3.6)
        while (distance_accumulation <= input_values['distance']){
            if(i>=new_adjusted_train_dynamics_data.length){alert("This calculation exceeds maximum speed of the loco");}
            distance_accumulation += new_adjusted_train_dynamics_data[i][3];
            time_accumulation += new_adjusted_train_dynamics_data[i][5];
            //sum_av_accel += new_adjusted_train_dynamics_data[i][2] * new_adjusted_train_dynamics_data[i][3];
            i++;
        }
        initial_vel = Math.round(input_values['initial_vel']); //round to nearest table value(integer);
        final_vel = new_adjusted_train_dynamics_data[i][0]/3.6
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*100)/100;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        // console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        // console.log("THIS IS A DISTANCE VELOCITY CALC, ATM THESE ARE ROUNDED TO NEAREST TABLE VAL SO YOU WILL NOT GET ACCURATE RESULTS.")
        //vals_array = take_gradient(vals_array, input_values);
        return vals_array;
    }

    if (input_values['initial_vel'] !== "" && input_values['time'] !== ""){
        //initial & time is given. 
        i= Math.round(input_values['initial_vel'] * 3.6)
        while (time_accumulation <= input_values['time']){
            if(i>=new_adjusted_train_dynamics_data.length){alert("This calculation exceeds maximum acceleration of the loco");}
            distance_accumulation += new_adjusted_train_dynamics_data[i][3];
            time_accumulation += new_adjusted_train_dynamics_data[i][5];
            //sum_av_accel += new_adjusted_train_dynamics_data[i][2] * new_adjusted_train_dynamics_data[i][3];
            i++;
        }
        initial_vel = Math.round(input_values['initial_vel']); //round to nearest table value(integer);
        final_vel = new_adjusted_train_dynamics_data[i][0]/3.6
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*10)/10;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        //vals_array = take_gradient(vals_array, input_values);
        return vals_array;
    }

    if (input_values['final_vel'] !== "" && input_values['time'] !== ""){
        //initial & final velocity given. 
        i = Math.round(input_values['final_vel'] * 3.6);
        while (time_accumulation <= input_values['time']){
            i--;
            if (i<0 && document.getElementById("accel").disabled === false){alert("It looks like the train is changing directions. This calculation is not supported.");}
            distance_accumulation += new_adjusted_train_dynamics_data[i][3];
            time_accumulation += new_adjusted_train_dynamics_data[i][5];
            //sum_av_accel += new_adjusted_train_dynamics_data[i][2] * new_adjusted_train_dynamics_data[i][3];
        }
        final_vel = Math.round(input_values['final_vel']); //round to nearest table value(integer);
        initial_vel = new_adjusted_train_dynamics_data[i][0]/3.6;
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*10)/10;
        //eff_accel = sum_av_accel/distance_accumulation;
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        //vals_array = take_gradient(vals_array, input_values);
        return vals_array;
    }
    if (input_values[final_vel] !== "" && input_values[distance] !== ""){
        //initial & final velocity given. 
        i = Math.round(input_values['final_vel'] * 3.6);
        while (distance_accumulation <= input_values['distance']){
            i--;
            if (i<0){alert("It looks like the train is changing directions. This calculation is not supported.");}
            distance_accumulation += new_adjusted_train_dynamics_data[i][3];
            time_accumulation += new_adjusted_train_dynamics_data[i][5];
            //sum_av_accel += new_adjusted_train_dynamics_data[i][2] * new_adjusted_train_dynamics_data[i][3];
        }
        final_vel = Math.round(input_values['final_vel']); //round to nearest table value(integer);
        initial_vel = new_adjusted_train_dynamics_data[i][0]/3.6;
        eff_accel = Math.round(((final_vel - initial_vel)/time_accumulation)*10)/10;
        //eff_accel = sum_av_accel/distance_accumulation;
        console.log("THIS IS A DISTANCE VELOCITY CALC, ATM THESE ARE ROUNDED TO NEAREST TABLE VAL SO YOU WILL NOT GET ACCURATE RESULTS.")
        vals_array = [initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad']]
        console.log(initial_vel, final_vel, time_accumulation, distance_accumulation, eff_accel, input_values['grad'])
        //vals_array = take_gradient(vals_array, input_values);
        return vals_array;

    }

}
        //THIS FUNCTION SHOULD BE IDENDICAL TO THE ONE INS TRAINSTOP_CALC HOWEVER IS ROUNDED.
function calculate_vals(input_values){
            //accel_adjust adjusts the acceleration value by a factor to compensate for a gradient.
            function accel_adjust(accel,grad){
                if (!isNaN(parseFloat(grad))){
                    accel = parseFloat(accel) - (9.81*parseFloat(grad)/100);
                    return accel;
                }
                else {
                    return parseFloat(accel);
                }
            }
            
                let initial_vel = input_values['initial_vel'];
                let final_vel = input_values['final_vel'];
                let time = input_values['time'];
                let distance = input_values['distance'];
                let accel = input_values['accel'];
                let grad = input_values['grad'];
                //console.log(input_values);
                accel = accel_adjust(accel,grad);
            //     console.log("accel: " + accel);
            //     console.log(input_values);
            // console.log(accel)
            // console.log(time)
                if (accel === '' || isNaN(accel)) {
                    console.log("no accel calc")
                    if (distance === '' || isNaN(distance)){
                        distance = (time*(initial_vel + final_vel))/2; //f3
                        accel = (final_vel-initial_vel)/time; //f1
                       // accel = accel_adjust(accel);
                    }
                    else if(time === '' || isNaN(time)){
                        time = (2*distance)/(initial_vel+final_vel);
                        accel = (final_vel**2-initial_vel**2)/(2*distance);
                        //accel = accel_adjust(accel);
            
                    }
                    else if(initial_vel === '' || isNaN(initial_vel)){
                        initial_vel = ((distance*2)/time)-final_vel;
                        accel = (final_vel-initial_vel)/time; 
                        //accel = accel_adjust(accel);
                    }
                    else if(final_vel === '' || isNaN(final_vel)){
                        final_vel = ((distance*2)/time)-initial_vel;
                        accel = (final_vel-initial_vel)/time;
                       // accel = accel_adjust(accel); 
                    }  
                }
                if (distance === ''|| isNaN(distance)){
                    console.log("no distance cal");
                    if (!time){
                        time = (final_vel-initial_vel)/(accel);
                        distance = (final_vel**2 - initial_vel**2)/(2*accel);
                    }
                    if (initial_vel === ''|| isNaN(initial_vel)){
                        initial_vel = final_vel-(accel*time);
                        distance = time*(initial_vel + final_vel)/2;
                        console.log("no initial vel, no distance calc");
                    }
                    if (final_vel === ''|| isNaN(final_vel)){
                        final_vel = initial_vel + (accel*time);
                        distance = (time*(initial_vel + final_vel))/2;
                        console.log("No distance, no final vel"+ time +"*"+initial_vel+"+"+final_vel+"/2"+"="+ distance);
                    }
                }
            
                if (time === ''|| isNaN(time)){
                    console.log("no tiem calc");
                    console.log(initial_vel)
                    if (initial_vel===''){
                        console.log(initial_vel)
                        initial_vel = Math.sqrt(final_vel**2 - (2*accel*distance));
                        time = (final_vel-initial_vel)/accel;
                    }
                    if (final_vel==='' || isNaN(time)){
                        console.log("no tiem calc, no final vel")
                        final_vel = Math.sqrt(initial_vel**2 + 2*accel*distance);
                        console.log(initial_vel)
                        time = (final_vel-initial_vel)/accel;
                        //vals_array = [initial_vel, final_vel, time, distance, accel, grad];
                    }
                }
                if ((initial_vel === ''|| isNaN(initial_vel)) && (final_vel === ''|| isNaN(final_vel))){
                    initial_vel = (distance - (0.5*accel*time**2))/time;
                }
            let vals_array = [initial_vel, final_vel, time, distance, accel, grad];
            console.log(vals_array);
            return vals_array;
            
}

//not sure if "round_array" is even needed in this program
function round_array(num_array){
    let rounded_num_array = [];
    for(let i =0; i< num_array.length;i++){
    rounded_num_array[i] = Math.round(num_array[i]*100)/100;
    }
    return rounded_num_array;
    
    }


function take_gradient(vals_array, input_values){
    //only do this function if calc done from find vals not calc vals
    //need to multiply grad with acceleration -> then take velocities and accel and redo calcs.
    grad = vals_array[vals_array.length-1];
    accel = vals_array[vals_array.length-2];

    new_input = input_values;

    if (!isNaN(parseFloat(grad)) && grad !== 0 && grad !== ""){
    //    accel = parseFloat(accel) - (9.81*parseFloat(grad)/100); //not needed because already part of calculate_vals
        new_input["accel"] = accel;
        console.log(`new_input=${new_input}, original input_values=${input_values}`)
        return calculate_vals(new_input);
    }
    return vals_array
}

function get_headway_info(linespeed_local){

    linespeed_local = linespeed_local/3.6
    // let linespeed_local = linespeed/3.6

    // function get_grad(grad_input){
    //     let grad = 0;

    //     if (grad_input == ""){
    //         grad = 0;

    //     }
    //     if (grad_input > 5 || grad_input < -5){
    //         alert("Enter a reasonable gradient (between -5% and 5%)")
    //     }
    //     else{
    //         grad = document.getElementById("gradient_input").value;
    //     }
    //     console.log(grad)

    //     return grad;
    // }
    let grad = current_temp_gloabal_grad;
    console.log(grad)
    console.log(train_select())
    const input_values =  {
        initial_vel: linespeed_local,
        final_vel:  0,
        time:  "",
        distance: "",
        accel: "",
        grad: grad,
        };

    const input_values_accel =  {
        initial_vel: 0,
        final_vel:  linespeed_local,
        time:  "",
        distance: "",
        accel: "",
        grad: grad,
        };
    const input_values_emerg_decel = {
        initial_vel: (linespeed_local),
        final_vel:  0,
        time:  "",
        distance: "",
        accel: "",
        grad: grad,
        };
    const input_values_med_speed_braking = {
        initial_vel: 40/3.6,
        final_vel:  0,
        time:  "",
        distance: "",
        accel: "",
        grad: grad,
        };
        // }
    // if (document.getElementById("med_speed").value != ""){
    //     input_values_med_speed_braking = {
    //         initial_vel: 0,
    //         final_vel:  (document.getElementById("med_speed").value/3.6),
    //         time:  "",
    //         distance: "",
    //         accel: "",
    //         grad: grad,
    //         };
    //     }
    //this should be coppied for all trains that use accel/decel data
    const input_values_line_to_med_speed_braking = {
        initial_vel: linespeed_local,
        final_vel:  40/3.6,
        time:  "",
        distance: "",
        accel: "",
        grad: grad,
    };

    //this should be coppied for all trains that use accel/decel data
    if(train_select() === "EMU"){
        train_specs = {
            serv_braking: find_values(emu_service_braking_data, input_values),
            emerg_braking: find_values(emu_emergency_braking_data, input_values),
            accel: find_values(Xtrap_accel_data, input_values_accel),
            med_speed_emerg_braking: find_values(emu_emergency_braking_data, input_values_med_speed_braking),
            med_speed_serv_braking: find_values(emu_service_braking_data, input_values_med_speed_braking),
            line_to_med_speed_braking: find_values(emu_service_braking_data, input_values_line_to_med_speed_braking),
            train_length: 150, //m
            notes: "VIC EMU uses X'trapolis for acceleration calculation and Comeng for braking",
        };
    }
    if(train_select() === "HCMT"){
        train_specs = {
            serv_braking: find_values(HCMT_service_braking_data, input_values),
            emerg_braking: find_values(HCMT_emergency_braking_data, input_values),
            accel: find_values(HCMT_accel_data, input_values_accel),
            med_speed_emerg_braking: find_values(HCMT_emergency_braking_data, input_values_med_speed_braking),
            med_speed_serv_braking: find_values(HCMT_service_braking_data, input_values_med_speed_braking),
            line_to_med_speed_braking: find_values(HCMT_service_braking_data, input_values_line_to_med_speed_braking),
            train_length: 150, //m
            notes: "HCMT train data is unofficial, Marcus, check length of train is standard!",
        };
    }
    if(train_select() === "Xtrap"){
        input_values["accel"] = Xtrap_service_brake_rate;
        //THESES FOR STATEMENTS NEED TO MAKE "" into NaN (IDK why it is how the calculate_vals function needs the inputs.)
        for (const variable in input_values){
            if (input_values[variable] != ""){
                input_values[variable] = parseFloat(input_values[variable]);
            }
        }
        input_values_emerg_decel["accel"] = Xtrap_emergency_brake_rate;
        for (const variable in input_values_emerg_decel){
            if (input_values[variable] != ""){
                input_values[variable] = parseFloat(input_values[variable]);
            }
        }
        //need to change brake rates for these calculations
        let local_input_vals_med_speed_emerg = Object.assign({}, input_values_med_speed_braking)
        let local_input_vals_med_speed_service_brake = Object.assign({}, input_values_med_speed_braking)
        let local_input_vals_line_to_med_speed_braking = Object.assign({}, input_values_line_to_med_speed_braking)
        local_input_vals_med_speed_emerg["accel"] = Xtrap_emergency_brake_rate;
        local_input_vals_med_speed_service_brake["accel"] = Xtrap_service_brake_rate;
        local_input_vals_line_to_med_speed_braking["accel"] = Xtrap_service_brake_rate;
        train_specs = {
            serv_braking: calculate_vals(input_values),
            emerg_braking: calculate_vals(input_values_emerg_decel),
            accel: find_values(Xtrap_accel_data, input_values_accel),
            med_speed_emerg_braking: calculate_vals(local_input_vals_med_speed_emerg),
            med_speed_serv_braking: calculate_vals(local_input_vals_med_speed_service_brake),
            line_to_med_speed_braking: calculate_vals(local_input_vals_line_to_med_speed_braking),
            train_length: 150, //m
            notes: "X'trap calculations are not accurate for braking calculations at low speeds (uses constant brake rate). Train Length may not be accurate, check this Marcus!",
        }
        console.log(train_specs);
    }
    //this should be coppied for all trains that use accel data, this should be coppied for alltrain that use constant rates
    if(train_select() === "Vlocity"){
        input_values["accel"] = Vlocity_service_brake_rate;
        //THESES FOR STATEMENTS NEED TO MAKE "" into NaN (IDK why it is how the calculate_vals function needs the inputs.)
        for (const variable in input_values){
            if (input_values[variable] != ""){
                input_values[variable] = parseFloat(input_values[variable]);
            }
        }
        input_values_emerg_decel["accel"] = Vlocity_emergency_brake_rate;
        for (const variable in input_values_emerg_decel){
            if (input_values[variable] != ""){
                input_values[variable] = parseFloat(input_values[variable]);
            }
        }

                //need to change brake rates for these calculations
                let local_input_vals_med_speed_emerg = Object.assign({}, input_values_med_speed_braking)
                let local_input_vals_med_speed_service_brake = Object.assign({}, input_values_med_speed_braking)
                let local_input_vals_line_to_med_speed_braking = Object.assign({}, input_values_line_to_med_speed_braking)
                local_input_vals_med_speed_emerg["accel"] = Vlocity_emergency_brake_rate;
                local_input_vals_med_speed_service_brake["accel"] = Vlocity_service_brake_rate;
                local_input_vals_line_to_med_speed_braking["accel"] = Vlocity_service_brake_rate;

        train_specs = {
            serv_braking: calculate_vals(input_values),
            emerg_braking: calculate_vals(input_values_emerg_decel),
            accel: find_values(Vlocity_accel_data, input_values_accel),
            med_speed_emerg_braking: calculate_vals(local_input_vals_med_speed_emerg),
            med_speed_serv_braking: calculate_vals(local_input_vals_med_speed_service_brake),
            line_to_med_speed_braking: calculate_vals(local_input_vals_line_to_med_speed_braking),
            train_length: 150, //m
            notes: "Velocity calculations are not accurate for braking calculations at low speeds.",
        }
        console.log(train_specs);
    }


    train_specs_clean_temp = {
        min_signal_space: train_specs["serv_braking"][3],
        overlap_distance: train_specs["emerg_braking"][3],
        min_signal_time: parseFloat(train_specs["serv_braking"][2]),
        emerg_braking_time: parseFloat(train_specs["emerg_braking"][2]),
        serv_brake_rate: train_specs["serv_braking"][4],
        serv_brake_time: train_specs["serv_braking"][2],
        serv_brake_distance: train_specs["serv_braking"][3],
        emerg_brake_rate: train_specs["emerg_braking"][4],
        med_speed_emerg_braking_distance: train_specs["med_speed_emerg_braking"][3],
        med_speed_emerg_braking_time: train_specs["med_speed_emerg_braking"][2],
        med_speed_emerg_braking_rate: train_specs["med_speed_emerg_braking"][4],
        med_speed_serv_braking_distance: train_specs["med_speed_serv_braking"][3],
        med_speed_serv_braking_time: train_specs["med_speed_serv_braking"][2],
        med_speed_serv_braking_rate: train_specs["med_speed_serv_braking"][4],
        line_to_med_speed_braking_distance: train_specs["line_to_med_speed_braking"][3],
        line_to_med_speed_braking_time: train_specs["line_to_med_speed_braking"][2],
        line_to_med_speed_braking_rate: train_specs["line_to_med_speed_braking"][4],
        accel_rate: train_specs["accel"][4],
        accel_time: train_specs["accel"][2],
        accel_distance: train_specs["accel"][3],
        grad: train_specs["accel"][5],
    // train_length: train_specs["train_length"],
    // sighting_time: parseFloat(document.getElementById("sighting_time").value),
    // sighting_distance: (linespeed)*(document.getElementById("sighting_time").value),
    // dwell_time: parseFloat(document.getElementById("dwell_time").value),
    // linespeed: parseFloat(document.getElementById("linespeed").value),
    //gradient: grad
}
console.log(train_specs_clean_temp);

    return train_specs; // note this is returning an object that contains a list which will need to be interperated for distance and time!
}
//NOTE THIS train_select function is modified from general_headways.js
function train_select(){
    let selected_train = document.getElementById("preset_select_menu").value;



    //declare trains based on train select html


    if (selected_train=="emu"){
        train_type = "EMU"
    }
    if (selected_train=="vlocity"){
        train_type = "Vlocity"
    }
    if (selected_train=="HCMT"){
        train_type = "HCMT"
    }

    console.log(train_type)
    return train_type;
}
///ABOVE ARE FUNCS AND DATA THAT SHOULD BE PUT IN A GLOBAL FILE






// train_type = EMU;

const input_values_accel =  {
    initial_vel: 0,
    final_vel:  linespeed/3.6,//80km/h
    time:  "",
    distance: "",
    accel: EMU['accel'],
    grad: "",
    };

const input_values_decel =  {
    initial_vel: linespeed/3.6,
    final_vel:  0,
    time:  "",
    distance: "",
    accel: EMU['decel'],
    grad: "",
    };

const input_values_constant =  {
    initial_vel: linespeed/3.6,
    final_vel:  linespeed/3.6,
    time:  "",
    distance: "",
    accel: "",
    grad: 0,
    };

    const dwell_phase =  {
        initial_vel: 0,
        final_vel:  0,
        time:  dwell_time,
        distance: "",
        accel: "",
        grad: "",
        };
          
    //start_chainage = document.getElementById("start_chaianage").value;

    //sets up domain and range of default graph
// calculator.setMathBounds({
//     left: start_chainage-10,
//     right: end_chainage+100,
//     bottom: -total_time,
//     top: 20
//   });



  function update_time_distance(input_values){

    //go back to vals array to check this
    time_accumulated.push(calculate_vals(input_values)[2] + time_accumulated[time_accumulated.length-1])
    //verify that this does not go ever end_chainage.
    console.log(calculate_vals(input_values)[3] + distance_accumulated[distance_accumulated.length-1])
    if (calculate_vals(input_values)[3] + distance_accumulated[distance_accumulated.length-1] < end_chainage){
        distance_accumulated.push(calculate_vals(input_values)[3] + distance_accumulated[distance_accumulated.length-1]);
        console.log("DISTANCE_ACCUMULATED")
    }
    // else {
    //     distance_accumulated.push(distance_accumulated[distance_accumulated.length-1])
    // }
    console.log("DISTANCE TIME UPDATED")
    phase_count++;
  }


// function map_station_stops(stop_chainages){
//     for (const stop of stop_chainages){
//         calculator.setExpression({id:`Station${stop_chainages.indexOf(stop)}`, latex: `x = ${stop}\\left \\{${0}>=y>=-${total_time} \\right \\}`, lineStyle: Desmos.Styles.DASHED, color: '#000000'}); //color black
//     }
//     return;
// }


function run_decel_phase(){
    decel_count++; //this counts decel curves

    update_time_distance(input_values_decel);

    //local vars for formula
    let start_phase_time = time_accumulated[phase_count-1];
    let end_phase_time = time_accumulated[phase_count];
    let start_phase_distance = Math.round(distance_accumulated[phase_count-1]);


    calculator.setExpression({ color: Desmos.Colors.RED, id: `${phase_count-1}decel${decel_count-1}`, latex: `x = -(${linespeed}/3.6)y + 0.5(${decel})(y+${start_phase_time})^2 + ${start_phase_distance}-((${linespeed}/3.6)*${start_phase_time})\\left \\{-${start_phase_time}>=y>=-${end_phase_time} \\right \\}` });

    for (i=Math.round(start_phase_time); i<Math.round(end_phase_time); i++){
        journey_data["distance"].push((-(linespeed/3.6)*(-i) + 0.5*decel*((-i)+start_phase_time)**2 + start_phase_distance)-((linespeed/3.6)*start_phase_time)) //x=-(${linespeed}/3.6)y + 0.5*(0.69)*(y+0)^{2}+7000
        journey_data["time"].push(i);
        journey_data["accel_rate"].push(decel);
        journey_data["local_speed"].push((journey_data["distance"][journey_data["distance"].length-1] - journey_data["distance"][journey_data["distance"].length-2])*3.6);
    }
    console.log(`decel phase ran for ${i-start_phase_time} seconds`)


}

function run_constant_phase(){
    //Must run this pre-check of deceleration phase for constant distant requirement
    let temp_decel_distance_value = calculate_vals(input_values_decel)[3];//[3] ->gives back distance from vals_array
    if (stop_chainages[dwell_count]){
        let const_distance = stop_chainages[dwell_count] - temp_decel_distance_value - distance_accumulated[distance_accumulated.length-1];
        input_values_constant['distance'] = const_distance;
    }
    else{
        console.log("no station stops!")
        if (distance_accumulated[distance_accumulated.length]){
            input_values_constant['distance'] =  end_chainage - start_chainage - distance_accumulated[distance_accumulated.length]
            console.log( input_values_constant['distance'])
        }
        else{
            input_values_constant['distance'] =  end_chainage - start_chainage;
            console.log( input_values_constant['distance'])
        }

    } 

    constant_count++; //this counts decel curves
    update_time_distance(input_values_constant);

    //local vars for formula
    let start_phase_time = time_accumulated[phase_count-1];
    let end_phase_time = time_accumulated[phase_count];
    let start_phase_distance = Math.round(distance_accumulated[phase_count-1]);

    calculator.setExpression({ color: Desmos.Colors.PURPLE, id: `${phase_count-1}const${constant_count-1}`, latex: `x = (-${linespeed}/3.6)*y + ${distance_accumulated[phase_count-1]} - (${linespeed/3.6}*${time_accumulated[phase_count-1]})\\left \\{-${start_phase_time}>=y>=-${end_phase_time} \\right \\}` });

    for (i=Math.round(start_phase_time); i< Math.round(end_phase_time); i++){
        journey_data["distance"].push((-linespeed/3.6)*(-i) + start_phase_distance - (linespeed/3.6*start_phase_time)); //x=0.5*(0.69)*(y+0)^{2}+7000
        journey_data["time"].push(i);
        journey_data["accel_rate"].push(0);
        journey_data["local_speed"].push((journey_data["distance"][journey_data["distance"].length-1] - journey_data["distance"][journey_data["distance"].length-2])*3.6);
    }
    console.log(start_phase_time)
    console.log(end_phase_time)
    console.log(`const phase ran for ${i-Math.round(start_phase_time)} seconds`)

}

function run_accel_phase(){
    accel_count++; //this counts decel curves
    update_time_distance(input_values_accel);

    //local vars for formula
    let start_phase_time = Math.round(time_accumulated[phase_count-1]);
    let end_phase_time = Math.round(time_accumulated[phase_count]);
    let start_phase_distance = Math.round(distance_accumulated[phase_count-1]);

    calculator.setExpression({ color: Desmos.Colors.GREEN, id: `${phase_count-1}accel${accel_count-1}`, latex: `x = 0.5*(${accel_rate})*(y+${start_phase_time})^2 + ${distance_accumulated[phase_count-1]} \\left \\{-${start_phase_time}>=y>=-${end_phase_time} \\right \\}` });
    //add this phase to journey_data
    for (i=start_phase_time; i<end_phase_time; i++){
        journey_data["distance"].push(0.5*accel_rate*((-i)+start_phase_time)**2 + start_phase_distance) //x=0.5*(0.69)*(y+0)^{2}+7000
        journey_data["time"].push(i);
        journey_data["accel_rate"].push(accel_rate);
        journey_data["local_speed"].push((journey_data["distance"][journey_data["distance"].length-1] - journey_data["distance"][journey_data["distance"].length-2])*3.6);
    }
    console.log(`accel phase ran for ${i-start_phase_time} seconds`)
}
function run_dwell_phase(){
    dwell_count++; //this counts decel curves
    update_time_distance(dwell_phase)

    //local vars for formula
    let start_phase_time = Math.round(time_accumulated[phase_count-1]);
    let end_phase_time = Math.round(time_accumulated[phase_count]);
    let start_phase_distance = Math.round(distance_accumulated[phase_count-1]);

    calculator.setExpression({ color: Desmos.Colors.BLUE, id: `${phase_count-1}dwell${dwell_count-1}`, latex: `x = ${start_phase_distance}\\left \\{-${start_phase_time}>=y>=-${end_phase_time} \\right \\}` });

    for (i=start_phase_time; i<end_phase_time; i++){
        journey_data["distance"].push(start_phase_distance) //x=0.5*(0.69)*(y+0)^{2}+7000
        journey_data["time"].push(i);
        journey_data["accel_rate"].push(0);
        journey_data["local_speed"].push((journey_data["distance"][journey_data["distance"].length-1] - journey_data["distance"][journey_data["distance"].length-2])*3.6);
    }

}

// run_decel_phase();
// run_dwell_phase();
// run_accel_phase();
// run_constant_phase();
// run_decel_phase();
// run_dwell_phase();
// run_accel_phase();
// run_constant_phase();
// run_decel_phase();
// run_dwell_phase();

function determine_phases(){
    if (stop_chainages.length === 0){
        if (starting_phase === 'accel'){
            run_accel_phase();
            run_constant_phase();
        }
        // if (starting_phase === 'constant'){
        //     run_constant_phase();
        // }
    }
    //1 station stop
    if (stop_chainages.length === 1){
        if (starting_phase === 'accel'){
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
        // if (starting_phase === 'constant'){
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        // }
        // if (starting_phase === 'decel'){
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        // }
    }
    if (stop_chainages.length === 2){
        if (starting_phase === 'accel'){
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
        // if (starting_phase === 'constant'){
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        // }
        // if (starting_phase === 'decel'){
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        // }
    }
    if (stop_chainages.length === 3){
        if (starting_phase === 'accel'){
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
    
        // if (starting_phase === 'constant'){
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        // }
        // if (starting_phase === 'decel'){
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        //     run_decel_phase();
        //     run_dwell_phase();
        //     run_accel_phase();
        //     run_constant_phase();
        // }
    }
    if (stop_chainages.length === 4){
        if (starting_phase === 'accel'){
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
    
    }
    if (stop_chainages.length === 5){
        if (starting_phase === 'accel'){
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
    }
    if (stop_chainages.length === 6){
        if (starting_phase === 'accel'){
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
    }
    if (stop_chainages.length === 7){
        if (starting_phase === 'accel'){
            console.log("THERE ARE 7 stations!");
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
    }
    if (stop_chainages.length === 8){
        if (starting_phase === 'accel'){
            console.log("THERE ARE 8 stations!!");
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
            run_dwell_phase();
            run_accel_phase();
            run_constant_phase();
            run_decel_phase();
        }
    }
    // if (distance_to_first_station < decel){
    //     decel from appropriate distance
    // }
    // if (distance_to_first_station > decel){
    //     constant + decel phase
    // }
    // if (distance is > accel + decel){
    //     accel_constant_decel
    // }
    // if (user input speed < decel distance){
    //     //error - the train cannot stop at this station from this speed
    // }
}




// //this makes home button restore to this view.
// var newDefaultState = calculator.getState();
// calculator.setDefaultState(newDefaultState);
// Desmos.LabelOrientations.RIGHT;
// Desmos.LabelOrientations.BELOW;

//we have an object that needs updating in order to graph in desmos and save data!
function update_input_vars(){
    let i =0; 
    //update station arrays in object!
    for (i=0; i<station_count; i++){
        input_vars["station_chainages"][i] = parseFloat(document.getElementById(`station_chainage${i}`).value);
        console.log(input_vars[`station_chainages`][i]);
        input_vars["station_names"][i] = document.getElementById(`station_name${i}`).value;
    }
    for (i=0; i<signal_overlap_count; i++){
        input_vars["signal_chainages"][i] = parseFloat(document.getElementById(`signal_chainage${i}`).value);
        input_vars["overlap_chainages"][i] = parseFloat(document.getElementById(`overlap_chainage${i}`).value);
        input_vars["signal_names"][i] = document.getElementById(`signal_name${i}`).value;
    }
    for (i=0; i<grad_input_count; i++){
        input_vars["grad"][i] = parseFloat(document.getElementById(`grad${i}`).value);
        input_vars["grad_chainages"][i] = parseFloat(document.getElementById(`grad_chainage${i}`).value);
    }
    for (i=0; i<speed_restriction_count; i++){
        input_vars["speed_restrictions"][i] = parseFloat(document.getElementById(`speed${i}`).value);
        input_vars["speed_restriction_chainages"][i] = parseFloat(document.getElementById(`speed_chainage${i}`).value);
    }
    if(document.getElementById("linespeed").value != ""){
        input_vars["linespeed"] = parseFloat(document.getElementById("linespeed").value);
    }
    if(document.getElementById("start_chainage").value != ""){
        input_vars["start_chainage"] = parseFloat(document.getElementById("start_chainage").value);
    }
    if(document.getElementById("end_chainage").value != ""){
        input_vars["end_chainage"] = parseFloat(document.getElementById("end_chainage").value);
    }
    
}


//INPUT TABLE UI

function add_station_stop(){
    let table_div = document.createElement("tr");
    table_div.classList.add('container');
    i=station_count;
    for (j=0;j<2;j++){
        table_div.innerHTML =  `<td id="tinr${i}c${j}" class="spec">
            <input type="text" id="station_name${i}" class="inputs form-control" placeholder="Station Name"><br><br>
            </td>
            <td id="tinr${i}c${j}" >
            <input type="number" id="station_chainage${i}" class="inputs form-control" placeholder="Station Chainage (front of train stops here)(m)"><br><br>
            </td>`
            document.getElementById("t0stations").appendChild(table_div);
    }
    station_count++;
}

// let signal_overlap_count = 0;
function add_signal_overlap(){
    let table_div = document.createElement("tr");
    table_div.classList.add('container');
    i=signal_overlap_count;
    for (j=0;j<2;j++){
        table_div.innerHTML =  `<td id="inr${i}c${j}" class="spec">
            <input type="text" id="signal_name${i}" class="inputs form-control" placeholder="Name" onChange=" update_input_vars(); graph_signal()"><br><br>
            </td>
            <td id="inr${i}c${j}" >
            <input type="number" id="signal_chainage${i}" class="inputs form-control" onChange="update_input_vars();graph_signal()" placeholder="(m)" ><br><br>
            </td>
            <td>
            <input type="number" id="overlap_chainage${i}" class="inputs form-control" onChange="update_input_vars(); graph_signal();" placeholder="(m)" ><br><br>
            </td>
            <td>
            <input type="radio" id="plt_start_y${i}" name="plt_start${i}" value="plt_start" >
            <label for="plt_start">Yes</label><br>
            <input type="radio" id="plt_start${i}" name="plt_start${i}" value="plt_start onChange="update_input_vars();graph_signal();" checked >
            <label for="plt_start_n${i}">No</label><br>
            </td>
            <td>
            <input type="radio" id="olap_a${i}" name="olap_type${i}" value="olap_type_a" checked>
            <label for="olap_type">a</label><br>
            <input type="radio" id="olap_b${i}" name="olap_type${i}" value="olap_type_b" onChange="update_input_vars();graph_signal();" >
            <label for="olap_type${i}">b</label><br>
            </td>`
            document.getElementById("t0signal/overlap").appendChild(table_div);
    }
    signal_overlap_count++;
}


function add_gradient(){
    let table_div = document.createElement("tr");
    table_div.classList.add('container');
    i=grad_input_count;
    for (j=0;j<2;j++){
        table_div.innerHTML =  `
            <td id="t_gradinr${i}c${j}" >
                <input type="number" id="grad_chainage${i}" class="inputs form-control" placeholder="Gradient Chainage (m)"><br><br>
            </td>
            <td id="t_gradinr${i}c${j}" class="spec">
                <input type="number" id="grad${i}" class="inputs form-control" placeholder="gradient"><br><br>
            </td>
            <td id="t_grad_unitsinr${i}c${j}" class="spec">
                <input type="radio" id="grad_ratio${i}" name="grad_in${i}" value="grad_rat">
                <label for="grad_rat${i}">ratio</label><br>
                <input type="radio" id="grad_%${i}" name="grad_in${i}" value="grad_%" checked>
                <label for="grad${i}">%</label><br>
            </td>`
            document.getElementById("t0_grad_inputs").appendChild(table_div);
    }
    grad_input_count++;
}


function add_speed_restriction(){
    let table_div = document.createElement("tr");
    table_div.classList.add('container');
    i=speed_restriction_count;
    for (j=0;j<2;j++){
        table_div.innerHTML =  `
            <td id="t_speedinr${i}c${j}" >
                <input type="number" id="speed_chainage${i}" class="inputs form-control" placeholder="Chainage (m)"><br><br>
            </td>
            <td id="t_speed${i}c${j}" class="spec">
                <input type="number" id="speed${i}" class="inputs form-control" placeholder="speed"><br><br>
            </td>`
            document.getElementById("t0speed_restrictions").appendChild(table_div);
    }
    speed_restriction_count++;
}

//this function resets stop chainages to new values
// function get_stop_chainages(){
//     stop_chainages = []
//     for (let i=0; i<station_count; i++){
//         stop_chainages.push(document.getElementById(`station_chainage${i}`).value);
//         // signals_object[current_station_name] = `station_chainage${i}`
//         console.log(stop_chainages)

//     }
// }


function graph_stations(){
    station_count = input_vars["station_chainages"].length;
    // //OLD
    // for (let i=0; i<station_count; i++){
    //     let current_station_name = document.getElementById(`station_name${i}`).value;
    //     let current_station_chainage = document.getElementById(`station_chainage${i}`).value;
    //     // signals_object[current_station_name] = `station_chainage${i}`
        
    //     console.log(`signal name = ${current_station_name}`)
    //     console.log(`signal name = ${current_station_chainage}`)
    //     calculator.setExpression({id:`Station${current_station_name}`, latex: `x = ${current_station_chainage}\\left \\{${0}>=y>=-${total_time} \\right \\}`, lineStyle: Desmos.Styles.DASHED, color: '#000000'}); //color black
    //     calculator.setExpression({ color: Desmos.Colors.BLACK, id: `${current_station_name}`, latex: `(${current_station_chainage},10)`, showLabel:true, label: `${current_station_name}` });
    
        
    //NEW
    for (let i=0; i<station_count; i++){
        let current_station_name = input_vars["station_names"][i];
        let current_station_chainage = input_vars["station_chainages"][i];
        // signals_object[current_station_name] = `station_chainage${i}`
        
        console.log(`signal name = ${current_station_name}`)
        console.log(`signal name = ${current_station_chainage}`)
        calculator.setExpression({color: Desmos.Colors.PURPLE, id:`Station${current_station_name}`, latex: `x = ${current_station_chainage}\\left \\{${0}>=y>=-${total_time} \\right \\}`, lineStyle: Desmos.Styles.DASHED}); //color black
        calculator.setExpression({color: Desmos.Colors.PURPLE, id: `${current_station_name}`, latex: `(${current_station_chainage},${-total_time+30})`, showLabel:true, label: `${current_station_name}`,pointStyle: Desmos.Styles.CROSS, labelOrientation: Desmos.LabelOrientations.LEFT, labelSize: Desmos.LabelSizes.MEDIUM });
    
    
    
    
    
    
    }
    return;
}





function graph_signal(){
// let signals_object = [];
signal_overlap_count = input_vars["signal_chainages"].length;
for (let i=0; i<signal_overlap_count; i++){
    //OLD METHOD
    // let current_signal_name = document.getElementById(`signal_name${i}`).value;
    // let current_signal_chainage = document.getElementById(`signal_chainage${i}`).value;
    // // signals_object[current_signal_name] = `signal_chainage${i}`
    // calculator.setExpression({ color: Desmos.Colors.BLACK, id: `${current_signal_name}`, latex: `(${current_signal_chainage},-10)`, showLabel:true, label: `|--0 ${current_signal_name}` });
    // console.log(`signal name = ${current_signal_name}`)
    // console.log(`signal name = ${current_signal_chainage}`)
    //NEW METHOD
    let current_signal_name = input_vars["signal_names"][i];
    let current_signal_chainage = input_vars["signal_chainages"][i];
    // signals_object[current_signal_name] = `signal_chainage${i}`
    calculator.setExpression({ color: Desmos.Colors.BLACK, id: `${current_signal_name}`, latex: `(${current_signal_chainage},+10)`, showLabel:true, label: `|--0 ${current_signal_name}`, labelOrientation: Desmos.LabelOrientations.RIGHT, labelSize: Desmos.LabelSizes.SMALL});
    calculator.setExpression({color: Desmos.Colors.ORANGE, id:`Signal${current_signal_name}`, latex: `x = ${current_signal_chainage}\\left \\{${0}>=y>=-${total_time} \\right \\}`, lineStyle: Desmos.Styles.DASHED}); //color black
    console.log(`signal name = ${current_signal_name}`)
    console.log(`signal name = ${current_signal_chainage}`)
}
return;
}





// /* Toggle between adding and removing the "responsive" class to topnav when the user clicks on the icon */
// function responsive_navbar() {
//     var x = document.getElementById("myTopnav");
//     if (x.className === "topnav") {
//       x.className += " responsive";
//     } else {
//       x.className = "topnav";
//     }
//   }


  //this is the train select menu.
//   function train_select(){
//     let EMU = document.getElementById("EMU_train_type").checked;
//     let Vlocity = document.getElementById("Vlocity_train_type").checked;
//     if (EMU.checked){
//         train_type = EMU
//     }
//     if (Vlocity.checked){
//         train_type = Vlocity
//     }
// }


function update_journey_data(){
    //this function will add local gradients and also speed restrictions to the journey_data object. 
    let gradient_index = 0;
    let local_gradient = 0;
    for (let i=0; i<journey_data["time"].length; i++){
        distance = journey_data["distance"][i];
        // console.log(`distance = ${distance}`)
        // console.log(input_vars["grad_chainages"].length)
        for (let j=0; j<input_vars["grad_chainages"].length; j++){
            let grad_chainage = input_vars["grad_chainages"][j]; 
            // console.log(grad_chainage)
            if (grad_chainage <= distance){
                gradient_index = input_vars["grad_chainages"].indexOf(grad_chainage);
            }
        }
        // console.log(`grad index = ${gradient_index}`)
        local_gradient = input_vars["grad"][gradient_index];
        // console.log(`local grad= ${local_gradient}`)
        journey_data["local_gradient"].push(local_gradient);
    }
}

function run_initial(){


    //the following two lines set the zoom to the current state!
    start_chainage = input_vars["start_chainage"];
    end_chainage = input_vars["end_chainage"];
    stop_chainages = input_vars["station_chainages"]; //m 

    determine_phases();
    // sets up domain and range of default graph
    total_time = journey_data['time'][journey_data['time'].length-1]+100
    calculator.setMathBounds({
        left: start_chainage-10,
        right: end_chainage+100,
        bottom: -total_time,
        top: 20
        });
    calculator.updateSettings({ xAxisStep:100, yAxisStep:60, xAxisMinorSubdivisions:1, yAxisMinorSubdivisions:1});
    let newDefaultState = calculator.getState();
    calculator.setDefaultState(newDefaultState);
    graph_signal();
    graph_stations();
    find_signal_to_signal_spacing();
    update_journey_data();
    call_count++;
    //re-initialise all coutners put this into a reset function later!
    phase_count = 0;
    decel_count = 0;
    accel_count = 0;
    dwell_count = 0;
    constant_count = 0;

    // input_vars = {
    //     grad: [],
    //     grad_chainages: [],
    //     station_names: [],
    //     station_chainages: [],
    //     speed_restrictions: [],
    //     speed_restriction_chainages: [],
    //     signal_names: [],
    //     signal_chainages: [],
    //     overlap_names: [],
    //     overlap_chainages: [],
    //     start_chainage: 8000,
    //     end_chainage: 11720,
    //     // train_type: EMU,
    //     starting_phase: "accel",
    //     linespeed: 80
    // }
    
    grad_input_count = 0; //initialises counting the input gradient values
    signal_overlap_count = 0;
    station_count = 0;
    speed_restriction_count = 0; //initialise the number of restrictions
    console.log("INITIAL RUN COMPLETE!");

    //add_desmos_grad_graph();

}

function journey_data_to_csv(){
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "TIME(s), DISTANCE(m), LOCAL GRADIENT(%), RAW_ACCEL_RATE(m/s/s), LOCAL_SPEED(km/h)" + "\r\n"
    for (i=0; i<journey_data["time"].length; i++){
        //add row for each element in object
        csvContent += journey_data["time"][i] + ",";
        csvContent += Math.round(journey_data["distance"][i]) + ",";
        csvContent += Math.round(journey_data["local_gradient"][i]*1000)/1000 + ",";
        csvContent += journey_data["accel_rate"][i] + ",";
        csvContent += journey_data["local_speed"][i];
        csvContent += "\r\n";
    }


    let encodedUri = encodeURI(csvContent);
    let link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "my_data.csv");
    document.body.appendChild(link); // Required for FF

    link.click(); // This will download the data file named "my_data.csv".
}

//resets variables to generate another graph
function reset_vars(){

}

//MAY HAVE ISSUE OF WHAT TO DO IF THERE ARE NO GRADIENTS? MUST RESOLVE THIS!
function find_signal_to_signal_spacing(){
    let signal_to_signal_av_gradients = calculated_vars["signal_to_signal_av_gradients"];
    let signal_to_signal_distance = calculated_vars["signal_to_signal_distance"];
    let signal_to_next_signal_av_gradient = calculated_vars["signal_to_next_signal_av_gradient"];
    let signal_to_next_signal_distance = calculated_vars["signal_to_next_signal_distance"];
    let signal_to_olap_distance = calculated_vars["signal_to_olap_distance"];
    let signal_to_olap_gradient = calculated_vars["signal_to_olap_gradient"];
    //need to know direction
    function find_signal_to_signal_gradients(){
        let direction = "down";
        let num_signals = input_vars["signal_chainages"].length
        grad_input_count = input_vars["grad_chainages"].length
        let gradient_chainages = input_vars["grad_chainages"];
        let gradients = input_vars["grad"];
        //check direction of traffic (determines + or minus for chainages)
        if(direction == "down"){
            console.log("THIS DIRECTION HAS BEEN DECLARED AS down!")
        //get chainage of each signal to compare to the gradient chainages
        let temp_array_to_find_gradient = [];                //This if variable is for the situation in that there is a gradient before the first signal and no intermediate gradients
        for (let i =0; i<num_signals-1; i++){
            let current_signal_chainage = input_vars["signal_chainages"][i];
            let current_signal_name = input_vars["signal_names"][i];
            let next_signal = input_vars["signal_chainages"][i+1];
            let temp_grad_chainages = [];
            let temp_grads_array = [];
            let temp_array_to_find_gradient = []; //this is another temporary array to find grads.
            //Get chainages that are within limits (This will change slightly for down direction)
            for (let j=1; j<grad_input_count; j++){
                // console.log(gradient_chainages[j])
                // console.log(current_signal_chainage);
                // console.log(next_signal)
                //find the gradients to take into account for each signal.
                //CASE 1 ->   /G0  |--0s1    /G1  |--0 s2
                //check for these intermediate gradients like G1
                if (current_signal_chainage < gradient_chainages[j] && next_signal >= gradient_chainages[j]){
                    //NOW WE ADD GRADIENTS AND CHAINAGES TO ARRAYS, AND MAKE A NEW ARRAY FOR AV SIGNAL GRADIENTS.
                    temp_grads_array.push(gradients[j-1]);
                    temp_grad_chainages.push(gradient_chainages[j-1])
                    // console.log(gradients[j-1])
                }
                //this considers the last part of the gradients needed
                else if(temp_grads_array.length >= 1){
                    temp_grads_array.push(gradients[j-1]);
                    temp_grad_chainages.push(gradient_chainages[j-1])
                    break;
                }

                //This if statement is for the situation in that there is a gradient before the first signal and no intermediate gradients
                //CASE 2 -> /G3 |--0 s1 |--0 s2 /G4
                //put all previous gradients in list
                if (gradient_chainages[j] <= current_signal_chainage){
                    temp_array_to_find_gradient.push(gradients[j])
                }
            }
            //This if statement is for the situation in that there is a gradient before the first signal and no intermediate gradients
            if (temp_grads_array.length == 0){
                temp_grads_array.push(Math.max(...temp_array_to_find_gradient));
            }
            //get info for av grads
            // console.log(temp_grad_chainages)
            //the remp_grad_chainages now has chainages of relevant gradients changes. This needs to be changed for signal positions with intermediate gradient changes. 
            temp_grad_chainages[0] = current_signal_chainage;
            temp_grad_chainages.push(next_signal);
            // console.log(temp_grads_array) //prints array of grads for each signal!
            console.log(`NEW SIGNAL -> Temp grad array -> ${temp_grads_array} for signal ${current_signal_name}`);

            let total_distance = 0;
            let sum_product_distance_gradient = 0;
            for (let k=0; k< temp_grad_chainages.length-1; k++){
                // console.log(k);
                let temp_distance = temp_grad_chainages[k+1]-temp_grad_chainages[k];
                total_distance += temp_distance;
                sum_product_distance_gradient += temp_distance * temp_grads_array[k];
            }
            //perform av gradient calc within range of signals!
            let av_gradient = Math.round((sum_product_distance_gradient/total_distance)*1000)/1000;
            total_distance = Math.round(total_distance*100)/100;
            //put this info into arrays for signal_to_signal information.
            signal_to_signal_distance.push(total_distance);
            signal_to_signal_av_gradients.push(av_gradient);
        }
        //Signal to NEXT signal gradients
        for (let i =0; i<num_signals-2; i++){
            let d1 = signal_to_signal_distance[i];
            let g1 = signal_to_signal_av_gradients[i];
            let d2 = signal_to_signal_distance[i+1];
            let g2 = signal_to_signal_av_gradients[i+1];
            let av_grad = Math.round((d1*g1 + d2*g2) / (d1+d2)*100)/100;
            let distance = d1+d2
            signal_to_next_signal_distance.push(distance) 
            signal_to_next_signal_av_gradient.push(av_grad)
        }
        //Signal to overlap gradients!
        for (let i =0; i<num_signals-2; i++){

            let num_signals = input_vars["signal_chainages"].length
            grad_input_count = input_vars["grad_chainages"].length
            let gradient_chainages = input_vars["grad_chainages"];
            let gradients = input_vars["grad"];
            //check direction of traffic (determines + or minus for chainages)
            if(direction == "down"){
                console.log("THIS DIRECTION HAS BEEN DECLARED AS down!")
            //get chainage of each signal to compare to the gradient chainages
            for (let i =0; i<num_signals-2; i++){
                // let current_signal_chainage = input_vars["signal_chainages"][i];
                let stop_signal_name = input_vars["signal_names"][i+1];
                let stop_signal_chainage = input_vars["signal_chainages"][i+1];
                // let next_signal = input_vars["signal_chainages"][i+1];
                let olap_chainage = input_vars["overlap_chainages"][i];


                let temp_grad_chainages = [];
                let temp_grads_array = [];
                let temp_array_to_find_gradient = []; //this is another temporary array to find grads.
                //Get chainages that are within limits (This will change slightly for down direction)
                for (let j=1; j<grad_input_count; j++){
                    // console.log(gradient_chainages[j])
                    // console.log(stop_signal_chainage);
                    // console.log(olap_chainage)
                    //find the gradients to take into account for each signal.
                    //CASE 1 ->   /G0  |--0s1    /G1  |--0 s2
                    //check for these intermediate gradients like G1
                    if (stop_signal_chainage < gradient_chainages[j] && olap_chainage >= gradient_chainages[j]){
                        //NOW WE ADD GRADIENTS AND CHAINAGES TO ARRAYS, AND MAKE A NEW ARRAY FOR AV SIGNAL GRADIENTS.
                        temp_grads_array.push(gradients[j-1]);
                        temp_grad_chainages.push(gradient_chainages[j-1])
                        // console.log(gradients[j-1])
                    }
                    //this considers the last part of the gradients needed
                    else if(temp_grads_array.length >= 1){
                        temp_grads_array.push(gradients[j-1]);
                        temp_grad_chainages.push(gradient_chainages[j-1])
                        break;
                    }
    
                    //This if statement is for the situation in that there is a gradient before the first signal and no intermediate gradients
                    //CASE 2 -> /G3 |--0 s1 |--0 s2 /G4
                    //put all previous gradients in list
                    if (gradient_chainages[j] <= stop_signal_chainage){
                        temp_array_to_find_gradient.push(gradients[j])
                    }
                }
                //This if statement is for the situation in that there is a gradient before the first signal and no intermediate gradients
                if (temp_grads_array.length == 0){
                    temp_grads_array.push(Math.max(...temp_array_to_find_gradient));
                }
                //get info for av grads
                // console.log(temp_grad_chainages)
                //the remp_grad_chainages now has chainages of relevant gradients changes. This needs to be changed for signal positions with intermediate gradient changes. 
                temp_grad_chainages[0] = stop_signal_chainage;
                temp_grad_chainages.push(olap_chainage);
                // console.log(temp_grads_array) //prints array of grads for each signal!
                console.log(`NEW SIGNAL -> Temp grad array -> ${temp_grads_array} for signal ${stop_signal_name}`);
    
                let total_distance = 0;
                let sum_product_distance_gradient = 0;
                for (let k=0; k< temp_grad_chainages.length-1; k++){
                    // console.log(k);
                    let temp_distance = temp_grad_chainages[k+1]-temp_grad_chainages[k];
                    total_distance += temp_distance;
                    sum_product_distance_gradient += temp_distance * temp_grads_array[k];
                }
                //perform av gradient calc within range of signals!
                let av_gradient = Math.round((sum_product_distance_gradient/total_distance)*1000)/1000;
                total_distance = Math.round(total_distance*100)/100;
                //put this info into arrays for signal_to_signal information.
                signal_to_olap_distance.push(total_distance);
                signal_to_olap_gradient.push(av_gradient);
            }

        }
    //THIS IS FOR THE DOWN DIRECTION (WE ARE NOT THERE YET :(
        else{

        }
    }
    ///LEADIES AND GENTLEMAN, Marcus B. NOW GIVE YOU GRADIENTS AND DISTANCE IN THE calculated_vars OBJECT! 
    }
}
    function calculate_safety_signal_spacing(){
        signal_spacing_table_data_object = {
            calc_type: [],
            train_type: [],
            initial_speed:[],
            final_speed: [],
            time:[],
            accel:[],
            av_grad:[],
            th_distance:[],
            actual_distance:[],
            last_green_aspect: [],
            start_chainage:[],
            from_sig:[],
            end_chainage:[],
            exit_signal:[],
            margin:[],
            safety_status:[],
        }

        signal_spacing_linespeed_to_medspeed_table_data_object = {
            calc_type: [],
            train_type: [],
            initial_speed:[],
            final_speed: [],
            time:[],
            accel:[],
            av_grad:[],
            th_distance:[],
            actual_distance:[],
            last_green_aspect: [],
            start_chainage:[],
            from_sig:[],
            end_chainage:[],
            exit_signal:[],
            margin:[],
            safety_status:[],
        }

        signal_spacing_linespeed_to_0_table_data_object = {
            calc_type: [],
            train_type: [],
            initial_speed:[],
            final_speed: [],
            time:[],
            accel:[],
            av_grad:[],
            th_distance:[],
            actual_distance:[],
            last_green_aspect: [],
            start_chainage:[],
            from_sig:[],
            end_chainage:[],
            exit_signal:[],
            margin:[],
            safety_status:[],
        }

        olap_spacing_table_data_object = {
            calc_type: [],
            train_type: [],
            initial_speed:[],
            final_speed: [],
            time:[],
            accel:[],
            av_grad:[],
            th_distance:[],
            actual_distance:[],
            start_chainage:[],
            from_sig:[],
            end_chainage:[],
            exit_signal:[],
            margin:[],
            safety_status:[]
        }
        function update_braking_table_object(){
            //update station arrays in object!
            //EXAMPLE
            function get_linespeed(current_signal_chainage){
                console.log("HI-ho")
                //key assumption -> if there is a speed restriction before the signal, the train will be going at the speed restriction through the signal
                let speed_restriction_chainages = input_vars["speed_restriction_chainages"];
                let speed_restrictions = input_vars["speed_restrictions"];
                let speed_restriction_index =0;

                if (speed_restriction_chainages.length < 2){
                    return linespeed;
                }
                //this is only for the Down Direction
                //get chainage of speed restriction by checking if the signal is higher than each chainage and lower than the next one (signal is between speed restrictions or after the last one)
                for (let i=0; i<speed_restriction_chainages.length-1; i++){
                    //checks for signals between speed restrictions
                    if (speed_restriction_chainages[i] <= current_signal_chainage && speed_restriction_chainages[i+1] > current_signal_chainage){
                        speed_restriction_index =  i;
                        console.log(speed_restrictions[speed_restriction_index])
                        return speed_restrictions[speed_restriction_index]
                    }
                    else if (speed_restriction_chainages[0] > current_signal_chainage){
                        return linespeed
                    }
                    //if speed restriction is the last one on the line
                    else if (i === speed_restriction_chainages.length-2){
                        speed_restriction_index = i+1;
                        console.log(speed_restrictions[speed_restriction_index])
                        return speed_restrictions[speed_restriction_index]
                    }

                }
                }

            for (let i=0; i<signal_overlap_count-1; i++){
                let input_vals = {
                    initial_vel: get_linespeed(input_vars["signal_chainages"][i]),
                    final_vel: 0,
                    time:  "",
                    distance: "",
                    accel: "",
                    grad: calculated_vars["signal_to_signal_av_gradients"][i] //add gradient based on signal!
                }
                    // let more_train_data = get_headway_info();
                current_temp_gloabal_grad = input_vals["grad"];
                get_headway_info(input_vals["initial_vel"]);//this functions gets some trian specs based on inputs
                console.log(train_specs_clean_temp);
                // if olap is NOT 'b' e.g is 'a' aspect sequence is G/R, Y/R, R/R Olap only one service braking calc from Y/R to R/R
                if (input_vars["overlap_type"][i] != 'b'){
                    signal_spacing_table_data_object["calc_type"].push("service braking <br>(Linespeed->0)"); //:)
                    signal_spacing_table_data_object["train_type"].push(train_type); //:)
                    signal_spacing_table_data_object["initial_speed"].push(input_vals["initial_vel"]); //:)
                    signal_spacing_table_data_object["final_speed"].push(0); //:)
                    signal_spacing_table_data_object["time"].push(Math.round(train_specs_clean_temp["serv_brake_time"])*10/10);
                    signal_spacing_table_data_object["accel"].push(Math.round(train_specs_clean_temp["serv_brake_rate"]*100)/100);
                    signal_spacing_table_data_object["av_grad"].push(calculated_vars["signal_to_signal_av_gradients"][i]);
                    signal_spacing_table_data_object["th_distance"].push(Math.round(train_specs_clean_temp["min_signal_space"])*10/10);
                    signal_spacing_table_data_object["actual_distance"].push(Math.round(calculated_vars["signal_to_signal_distance"][i]*10)/10);
                    signal_spacing_table_data_object["start_chainage"].push(input_vars["signal_chainages"][i]);
                    signal_spacing_table_data_object["from_sig"].push(input_vars["signal_names"][i]);
                    signal_spacing_table_data_object["end_chainage"].push(input_vars["signal_chainages"][i+1]);
                    signal_spacing_table_data_object["exit_signal"].push(input_vars["signal_names"][i+1]);
                    signal_spacing_table_data_object["margin"].push(Math.round(100*signal_spacing_table_data_object["actual_distance"][i]/signal_spacing_table_data_object["th_distance"][i]));
                    signal_spacing_table_data_object["safety_status"].push(signal_spacing_table_data_object["margin"][i] > 100 ? "Ok :)" : "Not Ok :(");
                    signal_spacing_table_data_object["last_green_aspect"].push(i >0 ? input_vars["signal_names"][i-1] : "NA");
                }

                //need to check if next signal has a b-arm o/lap to do calcs
                if (input_vars["overlap_type"][i+1] == 'b'){
                    // //Calc 3 - b-arm o/lap -> linespeed to zero skipping a signal,
                    signal_spacing_linespeed_to_0_table_data_object["calc_type"].push("service braking <br>line->0 (2 -sig)"); //:)
                    signal_spacing_linespeed_to_0_table_data_object["train_type"].push(train_type); //:)
                    signal_spacing_linespeed_to_0_table_data_object["initial_speed"].push(input_vals["initial_vel"]); //:)
                    signal_spacing_linespeed_to_0_table_data_object["final_speed"].push(0); //:)
                    signal_spacing_linespeed_to_0_table_data_object["time"].push(Math.round(train_specs_clean_temp["serv_brake_time"])*10/10);
                    signal_spacing_linespeed_to_0_table_data_object["accel"].push(Math.round(train_specs_clean_temp["serv_brake_rate"]*100)/100);
                    signal_spacing_linespeed_to_0_table_data_object["av_grad"].push(calculated_vars["signal_to_next_signal_av_gradient"][i]);
                    signal_spacing_linespeed_to_0_table_data_object["th_distance"].push(Math.round(train_specs_clean_temp["serv_brake_distance"])*10/10);
                    signal_spacing_linespeed_to_0_table_data_object["actual_distance"].push(Math.round(calculated_vars["signal_to_next_signal_distance"][i]*10)/10);
                    signal_spacing_linespeed_to_0_table_data_object["start_chainage"].push(input_vars["signal_chainages"][i]);
                    signal_spacing_linespeed_to_0_table_data_object["from_sig"].push(input_vars["signal_names"][i]);
                    signal_spacing_linespeed_to_0_table_data_object["end_chainage"].push(input_vars["signal_chainages"][i+2]);
                    signal_spacing_linespeed_to_0_table_data_object["exit_signal"].push(input_vars["signal_names"][i+2]);
                    signal_spacing_linespeed_to_0_table_data_object["margin"].push(Math.round(100*(calculated_vars["signal_to_next_signal_distance"][i])/(train_specs_clean_temp["serv_brake_distance"]))); //acutal /theoretical
                    signal_spacing_linespeed_to_0_table_data_object["safety_status"].push(signal_spacing_linespeed_to_0_table_data_object["margin"][signal_spacing_linespeed_to_0_table_data_object["margin"].length-1] > 100 ? "Ok :)" : "Not Ok :(");
                    signal_spacing_linespeed_to_0_table_data_object["last_green_aspect"].push(i >1 ? input_vars["signal_names"][i-1] : "NA");
                
                    //Calc 2 b-arm o/lap -> linespeed to med speed , med_speed = 40
                    signal_spacing_linespeed_to_medspeed_table_data_object["calc_type"].push("service braking <br>line->med speed"); //:)
                    signal_spacing_linespeed_to_medspeed_table_data_object["train_type"].push(train_type); //:)
                    signal_spacing_linespeed_to_medspeed_table_data_object["initial_speed"].push(input_vals["initial_vel"]); //:)
                    signal_spacing_linespeed_to_medspeed_table_data_object["final_speed"].push(40); //:)
                    signal_spacing_linespeed_to_medspeed_table_data_object["time"].push(Math.round(train_specs_clean_temp["line_to_med_speed_braking_time"])*10/10);
                    signal_spacing_linespeed_to_medspeed_table_data_object["accel"].push(Math.round(train_specs_clean_temp["line_to_med_speed_braking_rate"]*100)/100);
                    signal_spacing_linespeed_to_medspeed_table_data_object["av_grad"].push(calculated_vars["signal_to_signal_av_gradients"][i]);
                    signal_spacing_linespeed_to_medspeed_table_data_object["th_distance"].push(Math.round(train_specs_clean_temp["line_to_med_speed_braking_distance"])*10/10);
                    signal_spacing_linespeed_to_medspeed_table_data_object["actual_distance"].push(Math.round(calculated_vars["signal_to_signal_distance"][i]*10)/10);
                    signal_spacing_linespeed_to_medspeed_table_data_object["start_chainage"].push(input_vars["signal_chainages"][i]);
                    signal_spacing_linespeed_to_medspeed_table_data_object["from_sig"].push(input_vars["signal_names"][i]);
                    signal_spacing_linespeed_to_medspeed_table_data_object["end_chainage"].push(input_vars["signal_chainages"][i+1]);
                    signal_spacing_linespeed_to_medspeed_table_data_object["exit_signal"].push(input_vars["signal_names"][i+1]);
                    signal_spacing_linespeed_to_medspeed_table_data_object["margin"].push(Math.round(100*(calculated_vars["signal_to_signal_distance"][i])/(train_specs_clean_temp["line_to_med_speed_braking_distance"]))); //acutal /theoretical
                    signal_spacing_linespeed_to_medspeed_table_data_object["safety_status"].push(signal_spacing_linespeed_to_medspeed_table_data_object["margin"][signal_spacing_linespeed_to_medspeed_table_data_object["margin"].length-1] > 100 ? "Ok :)" : "Not Ok :(");
                    signal_spacing_linespeed_to_medspeed_table_data_object["last_green_aspect"].push(i >1 ? input_vars["signal_names"][i-2] : "NA");
                
                }



                //if o/lap is b it means the aspect sequence is G/R Y/G (red to med), R/Y, R/R, Olap
                //Three calcs are necesarry, Y/G to R/Y -> 80km/h to 40km/h & R/Y to R/R 40km/h to 0. Note: olap is named after R/Y signal
                if (input_vars["overlap_type"][i] == 'b'){

                    // //CALC 1: med-speed to zero, signal to next 
                    input_vals["initial_vel"] = 40
                    signal_spacing_table_data_object["calc_type"].push("service braking <br>(Med speed -> 0)"); //:)
                    signal_spacing_table_data_object["train_type"].push(train_type); //:)
                    signal_spacing_table_data_object["initial_speed"].push(input_vals["initial_vel"]); //:)
                    signal_spacing_table_data_object["final_speed"].push(0); //:)
                    signal_spacing_table_data_object["time"].push(Math.round(train_specs_clean_temp["med_speed_serv_braking_time"])*10/10);
                    signal_spacing_table_data_object["accel"].push(Math.round(train_specs_clean_temp["med_speed_serv_braking_rate"]*100)/100);
                    signal_spacing_table_data_object["av_grad"].push(calculated_vars["signal_to_signal_av_gradients"][i]);
                    signal_spacing_table_data_object["th_distance"].push(Math.round(train_specs_clean_temp["med_speed_serv_braking_distance"])*10/10);
                    signal_spacing_table_data_object["actual_distance"].push(Math.round(calculated_vars["signal_to_signal_distance"][i]*10)/10);
                    signal_spacing_table_data_object["start_chainage"].push(input_vars["signal_chainages"][i]);
                    signal_spacing_table_data_object["from_sig"].push(input_vars["signal_names"][i]);
                    signal_spacing_table_data_object["end_chainage"].push(input_vars["signal_chainages"][i+1]);
                    signal_spacing_table_data_object["exit_signal"].push(input_vars["signal_names"][i+1]);
                    signal_spacing_table_data_object["margin"].push(Math.round(100*signal_spacing_table_data_object["actual_distance"][i]/signal_spacing_table_data_object["th_distance"][i]));
                    signal_spacing_table_data_object["safety_status"].push(signal_spacing_table_data_object["margin"][i] > 100 ? "Ok :)" : "Not Ok :(");
                    signal_spacing_table_data_object["last_green_aspect"].push(i >1 ? input_vars["signal_names"][i-2] : "NA");
                
                }
            }



            for (let i=0; i<signal_overlap_count-1; i++){
                //in the case of a-arm o/lap:
                let input_vals = {
                    initial_vel: get_linespeed(input_vars["signal_chainages"][i+1]),
                    final_vel: 0,
                    time:  "",
                    distance: "",
                    accel: "",
                    grad: 0 //add gradient based on signal!
                }
                current_temp_gloabal_grad = input_vals["grad"];
                get_headway_info(input_vals["initial_vel"]);//this functions gets some trian specs based on inputs
                console.log(train_specs_clean_temp);
                if (input_vars["overlap_type"][i] == 'a'){
                    olap_spacing_table_data_object["calc_type"].push("Emergency Braking (a-arm"); //:)
                    olap_spacing_table_data_object["train_type"].push(train_type); //:)
                    olap_spacing_table_data_object["initial_speed"].push(input_vals["initial_vel"]); //:)
                    olap_spacing_table_data_object["final_speed"].push(0); //:)
                    olap_spacing_table_data_object["time"].push(Math.round(train_specs_clean_temp["emerg_braking_time"])*10/10);
                    olap_spacing_table_data_object["accel"].push(Math.round(train_specs_clean_temp["emerg_brake_rate"]*100)/100);
                    olap_spacing_table_data_object["av_grad"].push(calculated_vars["signal_to_olap_gradient"][i]); //calculated_vars["signal_to_olap_av_gradients"][i]
                    olap_spacing_table_data_object["th_distance"].push(Math.round(train_specs_clean_temp["overlap_distance"])*10/10);
                    olap_spacing_table_data_object["start_chainage"].push(input_vars["signal_chainages"][i+1]);
                    olap_spacing_table_data_object["from_sig"].push(input_vars["signal_names"][i+1]);
                    olap_spacing_table_data_object["end_chainage"].push(input_vars["overlap_chainages"][i]);
                    olap_spacing_table_data_object["exit_signal"].push(input_vars["overlap_type"][i] + input_vars["signal_names"][i]);
                    olap_spacing_table_data_object["actual_distance"].push(olap_spacing_table_data_object["end_chainage"][i] - olap_spacing_table_data_object["start_chainage"][i]);
                    olap_spacing_table_data_object["margin"].push(Math.round(100*olap_spacing_table_data_object["actual_distance"][i]/olap_spacing_table_data_object["th_distance"][i]));
                    olap_spacing_table_data_object["safety_status"].push(olap_spacing_table_data_object["margin"][i] > 100 ? "Ok :)" : "Not Ok :(");
                }

                //in the case of b arm olap overide this!
                if (input_vars["overlap_type"][i] == 'b'){
                    input_vals = {
                        initial_vel: 40,
                        final_vel: 0,
                        time:  "",
                        distance: "",
                        accel: "",
                        grad: 0 //add gradient based on signal!
                    }
                    // let more_train_data = get_headway_info();
                    current_temp_gloabal_grad = input_vals["grad"];
                    get_headway_info(input_vals["initial_vel"]);//this functions gets some trian specs based on inputs
                    console.log(train_specs_clean_temp);
                    console.log(train_specs_clean_temp);
                    olap_spacing_table_data_object["calc_type"].push("Emergency Braking (b-arm)"); //:)
                    olap_spacing_table_data_object["train_type"].push(train_type); //:)
                    olap_spacing_table_data_object["initial_speed"].push(input_vals["initial_vel"]); //:)
                    olap_spacing_table_data_object["final_speed"].push(0); //:)
                    olap_spacing_table_data_object["time"].push(Math.round(train_specs_clean_temp["med_speed_emerg_braking_time"])*10/10);
                    olap_spacing_table_data_object["accel"].push(Math.round(train_specs_clean_temp["med_speed_emerg_braking_rate"]*100)/100);
                    olap_spacing_table_data_object["av_grad"].push(calculated_vars["signal_to_olap_gradient"][i]); //calculated_vars["signal_to_olap_av_gradients"][i]
                    olap_spacing_table_data_object["th_distance"].push(Math.round(train_specs_clean_temp["med_speed_serv_braking_distance"])*10/10);
                    olap_spacing_table_data_object["start_chainage"].push(input_vars["signal_chainages"][i+1]);
                    olap_spacing_table_data_object["from_sig"].push(input_vars["signal_names"][i+1]);
                    olap_spacing_table_data_object["end_chainage"].push(input_vars["overlap_chainages"][i]);
                    olap_spacing_table_data_object["exit_signal"].push(input_vars["overlap_type"][i] + input_vars["signal_names"][i]);
                    olap_spacing_table_data_object["actual_distance"].push(olap_spacing_table_data_object["end_chainage"][i] - olap_spacing_table_data_object["start_chainage"][i]);
                    olap_spacing_table_data_object["margin"].push(Math.round(100*olap_spacing_table_data_object["actual_distance"][i]/olap_spacing_table_data_object["th_distance"][i]));
                    olap_spacing_table_data_object["safety_status"].push(olap_spacing_table_data_object["margin"][i] > 100 ? "Ok :)" : "Not Ok :(");   
                }
                }

            }

        update_braking_table_object()

        function tabulate_braking_table_object(){
            //ADD TABLE ROW!
            let table = document.getElementById("signal_spacing_table");
            let j=1; // a new counter
            for (let i=0; i < olap_spacing_table_data_object["calc_type"].length; i++){
                let row = table.insertRow();
                for (let key in signal_spacing_table_data_object){
                    cell = row.insertCell();
                    cell.innerHTML = signal_spacing_table_data_object[key][i]; //this requires the object to be sorted in the order of the table!
                    cell.id = `row${i+1}-col${j}:`
                    cell.className = `col${i+1} text-center`
                    if (cell.innerHTML == "Not Ok :("){cell.style.backgroundColor = "yellow"};
                    if (cell.innerHTML == "Ok :)"){cell.style.backgroundColor = "LightGreen"};

                    j++;
                }
            }

            //this is for the rest of the four aspect sequencing signal spaces
            let table_additional = document.getElementById("signal_spacing_table_additional");
            j=1; // a new counter
            for (let i=0; i < signal_spacing_linespeed_to_0_table_data_object["calc_type"].length; i++){
                let row = table_additional.insertRow();
                for (let key in signal_spacing_linespeed_to_0_table_data_object){
                    cell = row.insertCell();
                    cell.innerHTML = signal_spacing_linespeed_to_0_table_data_object[key][i]; //this requires the object to be sorted in the order of the table!
                    cell.id = `row${i+1}-col${j}:`
                    cell.className = `col${i+1} text-center`
                    if (cell.innerHTML == "Not Ok :("){cell.style.backgroundColor = "yellow"};
                    if (cell.innerHTML == "Ok :)"){cell.style.backgroundColor = "LightGreen"};
                    j++;
                }
            }
            let table_additional_line_to_med = document.getElementById("signal_spacing_table_body_additional_line_to_med");
            for (let i=0; i < signal_spacing_linespeed_to_0_table_data_object["calc_type"].length; i++){
                row = table_additional_line_to_med.insertRow();
                for (let key in signal_spacing_linespeed_to_medspeed_table_data_object){
                    cell = row.insertCell();
                    cell.innerHTML = signal_spacing_linespeed_to_medspeed_table_data_object[key][i]; //this requires the object to be sorted in the order of the table!
                    cell.id = `row${i+1}-col${j}:`
                    cell.className = `col${i+1} text-center`
                    if (cell.innerHTML == "Not Ok :("){cell.style.backgroundColor = "yellow"};
                    if (cell.innerHTML == "Ok :)"){cell.style.backgroundColor = "LightGreen"};
                    j++;
                }
            }



                //Do the same for Olap Signal Spacing
                let olap_table = document.getElementById("olap_spacing_table_body");
                j=1; // a new counter
                for (let i=0; i < olap_spacing_table_data_object["calc_type"].length; i++){
                    row = olap_table.insertRow();
                    for (let key in olap_spacing_table_data_object){
                        cell = row.insertCell();
                        cell.innerHTML = olap_spacing_table_data_object[key][i]; //this requires the object to be sorted in the order of the table!
                        cell.id = `row${i+1}-col${j}:`
                        cell.className = `col${i+1} text-center`
                        if (cell.innerHTML == "Not Ok :("){cell.style.backgroundColor = "yellow"};
                        if (cell.innerHTML == "Ok :)"){cell.style.backgroundColor = "LightGreen"};
    
                        j++;
                    }
                }
            }
        
        tabulate_braking_table_object();
    }
    //this graphs gradients-gradient graph
    function add_desmos_grad_graph(){
        let elt_grads = document.getElementById('calculator_grads');
        let calculator_grads = Desmos.GraphingCalculator(elt_grads);
        let grad_vals = [];
        let grad_chainages = [];
        for (let i=0; i<input_vars["grad_chainages"].length; i++){
            grad_vals.push(input_vars["grad"][i].toString());
            grad_chainages.push(input_vars["grad_chainages"][i].toString());

        }
        calculator_grads.setMathBounds({
            left: start_chainage-10,
            right: end_chainage+100,
            bottom: -3.4,
            top: 3.6
            });
        calculator_grads.updateSettings({ xAxisStep:200, yAxisStep:0.01, yAxisMinorSubdivisions:5, xAxisMinorSubdivisions:1, expressionsCollapsed: true});
        let newDefaultState = calculator_grads.getState();
        calculator_grads.setDefaultState(newDefaultState);
        
        calculator_grads.setExpression({
            type: 'table',
            columns: [
              {
                latex: 'x', //chainage
                values: grad_chainages
              },
              {
                latex: 'y', //gradient
                values: grad_vals,
                dragMode: Desmos.DragModes.XY
              },
              {
                latex: 'y', //this is connects all points with lines!
                color: Desmos.Colors.BLUE,
                columnMode: Desmos.ColumnModes.LINES
              }
            ]
          });
          for (let i=0; i<signal_overlap_count; i++){
            let current_signal_name = input_vars["signal_names"][i];
            let current_signal_chainage = input_vars["signal_chainages"][i];
            // signals_object[current_signal_name] = `signal_chainage${i}`
            calculator_grads.setExpression({ color: Desmos.Colors.BLACK, id: `${current_signal_name}`, latex: `(${current_signal_chainage},3.4)`, showLabel:true, label: `|--0 ${current_signal_name}`, labelOrientation: Desmos.LabelOrientations.RIGHT, labelSize: Desmos.LabelSizes.SMALL});
            calculator_grads.setExpression({color: Desmos.Colors.ORANGE, id:`Signal${current_signal_name}`, latex: `x = ${current_signal_chainage}\\left \\{${3.4}>=y>=-0 \\right \\}`, lineStyle: Desmos.Styles.DASHED}); //color black
            }
    }
    find_signal_to_signal_gradients();
    //calculate_safety_signal_spacing();
    add_desmos_grad_graph();
    calculate_safety_signal_spacing();
}

function main(){
    //this runs the initial example

    //this runs the actual calculations
    if (call_count !== 0){


        //this data will keep a log of every second of the journey, it will then be able to help with headways and output journey to a csv file!
        journey_data = {
        time: [],
        distance: [],
        accel_rate: [],
        local_gradient: [],
        local_speed: []
        }

        ////THESE SHOULD ONLY BE INITIALISED ONCE!
        //initialise more counters for adding HTML input elements
        // grad_input_count = 0; //initialises counting the input gradient values
        // signal_overlap_count = 0;
        // station_count = 0;
        // speed_restriction_count = 0; //initialise the number of restrictions


        // train_type = [];
        calculator.setBlank();
        //need to reininitialise all variables!
        // total_time = (end_chainage-start_chainage)*linespeed/3.6/3; //this should be estimated by the program but for now its ok for user input.
        accel_rate = 0.69 //m/s/s
        starting_phase = 'accel' //this was originally set to decel but is now at accel, i think it should always be at accel.
        phase_count = 0;
        decel_count = 0;
        accel_count = 0;
        dwell_count = 0;
        constant_count = 0;
        train_type = [];
          //lists accumulated time for each phase
        time_accumulated = [0]
        distance_accumulated = [start_chainage]
        // get_stop_chainages();
        // map_station_stops(stop_chainages); 

        update_input_vars();
        linespeed = 80 //km/h
        decel = -0.71
        start_chainage = input_vars["start_chainage"];
        end_chainage = input_vars["end_chainage"];
        stop_chainages = input_vars["station_chainages"]; //m 
        determine_phases();
        // sets up domain and range of default graph
        total_time = journey_data['time'][journey_data['time'].length-1]+100
        calculator.setMathBounds({
            left: start_chainage-10,
            right: end_chainage+100,
            bottom: -total_time,
            top: 20
            });
        calculator.updateSettings({ xAxisStep:100, yAxisStep:60, xAxisMinorSubdivisions:1, yAxisMinorSubdivisions:1});
        newDefaultState = calculator.getState();
        calculator.setDefaultState(newDefaultState);
        console.log(input_vars);
        graph_signal();
        graph_stations();
        let newDefaultState = calculator.getState();
        calculator.setDefaultState(newDefaultState);
    }
}
